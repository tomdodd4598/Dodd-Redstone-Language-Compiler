/*
var f = 1;
var a = 1;
var b = 0;

void update() {
	f = a + b;
	b = a;
	a = f;
}

while (f > 0) {
	out(f);
	update();
}
*/

/*
var f = 1;
var i = 1;

fun fib(n) {
	if (n <= 2) {
		return 1;
	}
	return fib(n - 1) + fib(n - 2);
}

void update() {
	i = i + 1;
	f = fib(i);
}

while (f > 0) {
	out(f);
	update();
}
*/

/*
var f = 1;
var a = 1;
var b = 1;

void update() {
	f = a * b;
	b = b + 1;
	a = f;
}

while (f > 0) {
	out(f);
	update();
}
*/

/*
var f = 1;
var i = 1;

fun fact(n) {
	if (n <= 1) {
		return 1;
	}
	return n * fact(n - 1);
}

void update() {
	i = i + 1;
	f = fact(i);
}

while (f > 0) {
	out(f);
	update();
}
*/

/*
const max = 15;
const fail = max + 1;
var n = 1;

fun high_approx_sqrt(m) {
    var a = (m + 1) >> 1;
    var b;
    
    b = m / a; a = (a + b) >> 1;
    b = m / a; a = (a + b) >> 1;
    b = m / a; a = (a + b) >> 1;
    
    return a + 1;
}

while (n < max) {
	n = n + 1;
	var i = 2;
	var j = high_approx_sqrt(n);
	while (i < j) {
		if (n % i) {
			i = i + 1;
		}
		else {
			i = fail;
		}
	}
	if (i != fail) {
		out(n);
	}
}
*/

set_argc(2);

var a = argv(1);
var #b = argv(0);
var c = @a;

var i = 0;
while (i < argc()) {
	#c = argv(i);
	c = b;
	i = i + 1;
}

out(a * #b);
