nesting fn root() -> Int:
{def}:
	Thing: Thing {Chars, &Thing}
{0}:
	%0 = call $main()
	exit $0

nesting fn printChars(<9> chars: Chars {&mut Char, Nat}) -> ():
{dec}:
	<10> i: Nat
{0}:
	<10> i = $0
	jmp 2
{1}:
	%0 = &<9> chars
	%1 = *%0
	%2 = %1 + <10> i
	%3 = *%2
	%4 = call builtin $printChar(%3)
	%5 = &<10> i
	%6 = *%5
	*%5 = %6 + $1
	%7 = *%5
{2}:
	%8 = &<9> chars + $8
	%9 = *%8
	%t = %9 > <10> i
	cj 1
	ret $()

nesting fn main() -> ():
{dec}:
	\r0: [Char; 5]
	\r1: [Char; 6]
	<22> \r0: Thing {Chars, &Thing}
	<21> \r0: Thing {Chars, &Thing}
	<21> \r1: &Thing {Chars, &Thing}
	<20> tracer: &&Thing {Chars, &Thing}
{0}:
	\r0 = $['c', 'h', 'i', 'p', 's']
	\r1 = $['b', 'u', 'r', 'g', 'e', 'r']
	<22> \r0 = (&\r1, $6, $0x0)
	<21> \r0 = (&\r0, $5, &<22> \r0)
	<21> \r1 = &<21> \r0
	<20> tracer = &<21> \r1
	%0 = &<20> tracer
	%1 = *%0
	%2 = *%1
	%3 = %2 + $16
	%4 = &<20> tracer
	*%4 = %3
	%5 = &<20> tracer
	%6 = *%5
	%7 = *%6
	%8 = *%7
	%9 = call $printChars(%8)
	ret $()
