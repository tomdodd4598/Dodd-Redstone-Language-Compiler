nesting fn \root() -> Int:
{def}:
	Item: Item {Int, &Item}
{0}:
	%0 = call $main()
	exit $0

leaf fn insertItem(<1> tracer: &&Item {Int, &Item}, <1> val: Int) -> ():
{dec}:
	<2> \r0: Bool
	<1> \r0: Item {Int, &Item}
{0}:
	jmp 2
{1}:
	%0 = *tracer
	tracer = %0.8
{2}:
	%1 = *tracer
	%t = %1 != $0x0
	cnj 3
	%2 = *tracer
	%3 = *%2
	\r0 = %3 <= val
	jmp 4
{3}:
	\r0 = $false
{4}:
	%t = \r0
	cj 1
	%5 = *tracer
	\r0 = (val, %5)
	*tracer = &\r0
	ret $()

leaf fn removeItem(<3> tracer: &&Item {Int, &Item}, <3> val: Int) -> ():
{dec}:
	<4> \r0: Bool
{0}:
	jmp 2
{1}:
	%0 = *tracer
	tracer = %0.8
{2}:
	%1 = *tracer
	%t = %1 != $0x0
	cnj 3
	%2 = *tracer
	%3 = *%2
	\r0 = %3 != val
	jmp 4
{3}:
	\r0 = $false
{4}:
	%t = \r0
	cj 1
	%5 = *tracer
	%t = %5 != $0x0
	cnj 5
	%7 = *tracer
	%8 = *%7.8
	*tracer = %8
{5}:
	ret $()

nesting fn print(<6> tracer: &&Item {Int, &Item}) -> ():
{0}:
	jmp 2
{1}:
	%0 = *tracer
	%1 = *%0
	%2 = call builtin $outint(%1)
	%3 = *tracer
	tracer = %3.8
{2}:
	%4 = *tracer
	%t = %4 != $0x0
	cj 1
	ret $()

nesting fn main() -> ():
{dec}:
	<8> start: &Item {Int, &Item}
{0}:
	start = $0x0
	%0 = call $insertItem(&start, $3)
	%1 = call $insertItem(&start, $6)
	%2 = call $insertItem(&start, $2)
	%3 = call $insertItem(&start, $1)
	%4 = call $insertItem(&start, $4)
	%5 = call $insertItem(&start, $7)
	%6 = call $insertItem(&start, $2)
	%7 = call $insertItem(&start, $5)
	%8 = call $print(&start)
	%9 = call $removeItem(&start, $4)
	%10 = call $removeItem(&start, $7)
	%11 = call $removeItem(&start, $2)
	%12 = call $print(&start)
	ret $()
