Make logical and/or short-circuiting and non-commutative

Replace evaluator with optimisation logic

Remove preprocessor, switch '#def name ... #enddef' for 'const name = ...' and 'macro! name(...) { ... }' syntax

Use 'main' function as entry point (remove 'setargc' directive, implement proper argc and argv)?

Implement 'static' keyword for variables

Immutable variables with 'let' keyword, mutable with 'let mut', parameters immutable by default (require 'mut' to be mutable)

Add 'sizeof(x)' for variables

Arrays

String literals

For loops

Tuples (use '(x, y, z, ...)' syntax, replace 'Void' with '()' having one instance '()')

Structs (nominal typing)

Enums (nominal typing, pattern matching)

Universal function call syntax?

Pipeline function call syntax

Namespaces, multiple files, add 'import' for importing globals and functions

Closures

Generics (use lowercase type parameters)
Higher kinded types? (https://pastebin.com/htWPe3HZ)

'extern "C" { ... }' blocks for transpilation to C

Standard library

Variable type inference
