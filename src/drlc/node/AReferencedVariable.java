/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AReferencedVariable extends PVariable
{
    private TReference _reference_;
    private PNonReferencedVariable _nonReferencedVariable_;

    public AReferencedVariable()
    {
        // Constructor
    }

    public AReferencedVariable(
        @SuppressWarnings("hiding") TReference _reference_,
        @SuppressWarnings("hiding") PNonReferencedVariable _nonReferencedVariable_)
    {
        // Constructor
        setReference(_reference_);

        setNonReferencedVariable(_nonReferencedVariable_);

    }

    @Override
    public Object clone()
    {
        return new AReferencedVariable(
            cloneNode(this._reference_),
            cloneNode(this._nonReferencedVariable_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReferencedVariable(this);
    }

    public TReference getReference()
    {
        return this._reference_;
    }

    public void setReference(TReference node)
    {
        if(this._reference_ != null)
        {
            this._reference_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reference_ = node;
    }

    public PNonReferencedVariable getNonReferencedVariable()
    {
        return this._nonReferencedVariable_;
    }

    public void setNonReferencedVariable(PNonReferencedVariable node)
    {
        if(this._nonReferencedVariable_ != null)
        {
            this._nonReferencedVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonReferencedVariable_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reference_)
            + toString(this._nonReferencedVariable_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reference_ == child)
        {
            this._reference_ = null;
            return;
        }

        if(this._nonReferencedVariable_ == child)
        {
            this._nonReferencedVariable_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reference_ == oldChild)
        {
            setReference((TReference) newChild);
            return;
        }

        if(this._nonReferencedVariable_ == oldChild)
        {
            setNonReferencedVariable((PNonReferencedVariable) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
