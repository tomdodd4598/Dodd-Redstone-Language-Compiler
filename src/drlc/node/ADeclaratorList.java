/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADeclaratorList extends PDeclaratorList
{
    private PDeclarator _declarator_;
    private final LinkedList<PDeclaratorListTail> _declaratorListTail_ = new LinkedList<PDeclaratorListTail>();
    private TComma _comma_;

    public ADeclaratorList()
    {
        // Constructor
    }

    public ADeclaratorList(
        @SuppressWarnings("hiding") PDeclarator _declarator_,
        @SuppressWarnings("hiding") List<?> _declaratorListTail_,
        @SuppressWarnings("hiding") TComma _comma_)
    {
        // Constructor
        setDeclarator(_declarator_);

        setDeclaratorListTail(_declaratorListTail_);

        setComma(_comma_);

    }

    @Override
    public Object clone()
    {
        return new ADeclaratorList(
            cloneNode(this._declarator_),
            cloneList(this._declaratorListTail_),
            cloneNode(this._comma_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclaratorList(this);
    }

    public PDeclarator getDeclarator()
    {
        return this._declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(this._declarator_ != null)
        {
            this._declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarator_ = node;
    }

    public LinkedList<PDeclaratorListTail> getDeclaratorListTail()
    {
        return this._declaratorListTail_;
    }

    public void setDeclaratorListTail(List<?> list)
    {
        for(PDeclaratorListTail e : this._declaratorListTail_)
        {
            e.parent(null);
        }
        this._declaratorListTail_.clear();

        for(Object obj_e : list)
        {
            PDeclaratorListTail e = (PDeclaratorListTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaratorListTail_.add(e);
        }
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._declarator_)
            + toString(this._declaratorListTail_)
            + toString(this._comma_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._declarator_ == child)
        {
            this._declarator_ = null;
            return;
        }

        if(this._declaratorListTail_.remove(child))
        {
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        for(ListIterator<PDeclaratorListTail> i = this._declaratorListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaratorListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
