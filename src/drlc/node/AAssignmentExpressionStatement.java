/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentExpressionStatement extends PExpressionStatement
{
    private PAssignmentExpression _assignmentExpression_;
    private PAssignmentOp _assignmentOp_;
    private PExpression _expression_;
    private final LinkedList<TSemicolon> _semicolon_ = new LinkedList<TSemicolon>();

    public AAssignmentExpressionStatement()
    {
        // Constructor
    }

    public AAssignmentExpressionStatement(
        @SuppressWarnings("hiding") PAssignmentExpression _assignmentExpression_,
        @SuppressWarnings("hiding") PAssignmentOp _assignmentOp_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") List<?> _semicolon_)
    {
        // Constructor
        setAssignmentExpression(_assignmentExpression_);

        setAssignmentOp(_assignmentOp_);

        setExpression(_expression_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentExpressionStatement(
            cloneNode(this._assignmentExpression_),
            cloneNode(this._assignmentOp_),
            cloneNode(this._expression_),
            cloneList(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentExpressionStatement(this);
    }

    public PAssignmentExpression getAssignmentExpression()
    {
        return this._assignmentExpression_;
    }

    public void setAssignmentExpression(PAssignmentExpression node)
    {
        if(this._assignmentExpression_ != null)
        {
            this._assignmentExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignmentExpression_ = node;
    }

    public PAssignmentOp getAssignmentOp()
    {
        return this._assignmentOp_;
    }

    public void setAssignmentOp(PAssignmentOp node)
    {
        if(this._assignmentOp_ != null)
        {
            this._assignmentOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignmentOp_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public LinkedList<TSemicolon> getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(List<?> list)
    {
        for(TSemicolon e : this._semicolon_)
        {
            e.parent(null);
        }
        this._semicolon_.clear();

        for(Object obj_e : list)
        {
            TSemicolon e = (TSemicolon) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._semicolon_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assignmentExpression_)
            + toString(this._assignmentOp_)
            + toString(this._expression_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assignmentExpression_ == child)
        {
            this._assignmentExpression_ = null;
            return;
        }

        if(this._assignmentOp_ == child)
        {
            this._assignmentOp_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._semicolon_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assignmentExpression_ == oldChild)
        {
            setAssignmentExpression((PAssignmentExpression) newChild);
            return;
        }

        if(this._assignmentOp_ == oldChild)
        {
            setAssignmentOp((PAssignmentOp) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator<TSemicolon> i = this._semicolon_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSemicolon) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
