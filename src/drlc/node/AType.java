/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AType extends PType
{
    private final LinkedList<TAnd> _and_ = new LinkedList<TAnd>();
    private PRawType _rawType_;

    public AType()
    {
        // Constructor
    }

    public AType(
        @SuppressWarnings("hiding") List<?> _and_,
        @SuppressWarnings("hiding") PRawType _rawType_)
    {
        // Constructor
        setAnd(_and_);

        setRawType(_rawType_);

    }

    @Override
    public Object clone()
    {
        return new AType(
            cloneList(this._and_),
            cloneNode(this._rawType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAType(this);
    }

    public LinkedList<TAnd> getAnd()
    {
        return this._and_;
    }

    public void setAnd(List<?> list)
    {
        for(TAnd e : this._and_)
        {
            e.parent(null);
        }
        this._and_.clear();

        for(Object obj_e : list)
        {
            TAnd e = (TAnd) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._and_.add(e);
        }
    }

    public PRawType getRawType()
    {
        return this._rawType_;
    }

    public void setRawType(PRawType node)
    {
        if(this._rawType_ != null)
        {
            this._rawType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rawType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._and_)
            + toString(this._rawType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._and_.remove(child))
        {
            return;
        }

        if(this._rawType_ == child)
        {
            this._rawType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TAnd> i = this._and_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TAnd) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rawType_ == oldChild)
        {
            setRawType((PRawType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
