/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryBraceShiftExpression extends PBraceShiftExpression
{
    private PBraceShiftExpression _braceShiftExpression_;
    private PShiftBinaryOp _shiftBinaryOp_;
    private PBraceCastExpression _braceCastExpression_;

    public ABinaryBraceShiftExpression()
    {
        // Constructor
    }

    public ABinaryBraceShiftExpression(
        @SuppressWarnings("hiding") PBraceShiftExpression _braceShiftExpression_,
        @SuppressWarnings("hiding") PShiftBinaryOp _shiftBinaryOp_,
        @SuppressWarnings("hiding") PBraceCastExpression _braceCastExpression_)
    {
        // Constructor
        setBraceShiftExpression(_braceShiftExpression_);

        setShiftBinaryOp(_shiftBinaryOp_);

        setBraceCastExpression(_braceCastExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryBraceShiftExpression(
            cloneNode(this._braceShiftExpression_),
            cloneNode(this._shiftBinaryOp_),
            cloneNode(this._braceCastExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryBraceShiftExpression(this);
    }

    public PBraceShiftExpression getBraceShiftExpression()
    {
        return this._braceShiftExpression_;
    }

    public void setBraceShiftExpression(PBraceShiftExpression node)
    {
        if(this._braceShiftExpression_ != null)
        {
            this._braceShiftExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceShiftExpression_ = node;
    }

    public PShiftBinaryOp getShiftBinaryOp()
    {
        return this._shiftBinaryOp_;
    }

    public void setShiftBinaryOp(PShiftBinaryOp node)
    {
        if(this._shiftBinaryOp_ != null)
        {
            this._shiftBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftBinaryOp_ = node;
    }

    public PBraceCastExpression getBraceCastExpression()
    {
        return this._braceCastExpression_;
    }

    public void setBraceCastExpression(PBraceCastExpression node)
    {
        if(this._braceCastExpression_ != null)
        {
            this._braceCastExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceCastExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceShiftExpression_)
            + toString(this._shiftBinaryOp_)
            + toString(this._braceCastExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceShiftExpression_ == child)
        {
            this._braceShiftExpression_ = null;
            return;
        }

        if(this._shiftBinaryOp_ == child)
        {
            this._shiftBinaryOp_ = null;
            return;
        }

        if(this._braceCastExpression_ == child)
        {
            this._braceCastExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceShiftExpression_ == oldChild)
        {
            setBraceShiftExpression((PBraceShiftExpression) newChild);
            return;
        }

        if(this._shiftBinaryOp_ == oldChild)
        {
            setShiftBinaryOp((PShiftBinaryOp) newChild);
            return;
        }

        if(this._braceCastExpression_ == oldChild)
        {
            setBraceCastExpression((PBraceCastExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
