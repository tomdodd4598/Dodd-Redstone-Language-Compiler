/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADoubleAddressOfConditionalExpression6 extends PConditionalExpression6
{
    private TLogicalAnd _logicalAnd_;
    private TMut _mut_;
    private PConditionalExpression6 _conditionalExpression6_;

    public ADoubleAddressOfConditionalExpression6()
    {
        // Constructor
    }

    public ADoubleAddressOfConditionalExpression6(
        @SuppressWarnings("hiding") TLogicalAnd _logicalAnd_,
        @SuppressWarnings("hiding") TMut _mut_,
        @SuppressWarnings("hiding") PConditionalExpression6 _conditionalExpression6_)
    {
        // Constructor
        setLogicalAnd(_logicalAnd_);

        setMut(_mut_);

        setConditionalExpression6(_conditionalExpression6_);

    }

    @Override
    public Object clone()
    {
        return new ADoubleAddressOfConditionalExpression6(
            cloneNode(this._logicalAnd_),
            cloneNode(this._mut_),
            cloneNode(this._conditionalExpression6_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADoubleAddressOfConditionalExpression6(this);
    }

    public TLogicalAnd getLogicalAnd()
    {
        return this._logicalAnd_;
    }

    public void setLogicalAnd(TLogicalAnd node)
    {
        if(this._logicalAnd_ != null)
        {
            this._logicalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalAnd_ = node;
    }

    public TMut getMut()
    {
        return this._mut_;
    }

    public void setMut(TMut node)
    {
        if(this._mut_ != null)
        {
            this._mut_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mut_ = node;
    }

    public PConditionalExpression6 getConditionalExpression6()
    {
        return this._conditionalExpression6_;
    }

    public void setConditionalExpression6(PConditionalExpression6 node)
    {
        if(this._conditionalExpression6_ != null)
        {
            this._conditionalExpression6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression6_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._logicalAnd_)
            + toString(this._mut_)
            + toString(this._conditionalExpression6_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._logicalAnd_ == child)
        {
            this._logicalAnd_ = null;
            return;
        }

        if(this._mut_ == child)
        {
            this._mut_ = null;
            return;
        }

        if(this._conditionalExpression6_ == child)
        {
            this._conditionalExpression6_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._logicalAnd_ == oldChild)
        {
            setLogicalAnd((TLogicalAnd) newChild);
            return;
        }

        if(this._mut_ == oldChild)
        {
            setMut((TMut) newChild);
            return;
        }

        if(this._conditionalExpression6_ == oldChild)
        {
            setConditionalExpression6((PConditionalExpression6) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
