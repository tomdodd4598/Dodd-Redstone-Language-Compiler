/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryBraceEqualityExpression extends PBraceEqualityExpression
{
    private PBraceEqualityExpression _braceEqualityExpression_;
    private PEqualityBinaryOp _equalityBinaryOp_;
    private PBraceComparativeExpression _braceComparativeExpression_;

    public ABinaryBraceEqualityExpression()
    {
        // Constructor
    }

    public ABinaryBraceEqualityExpression(
        @SuppressWarnings("hiding") PBraceEqualityExpression _braceEqualityExpression_,
        @SuppressWarnings("hiding") PEqualityBinaryOp _equalityBinaryOp_,
        @SuppressWarnings("hiding") PBraceComparativeExpression _braceComparativeExpression_)
    {
        // Constructor
        setBraceEqualityExpression(_braceEqualityExpression_);

        setEqualityBinaryOp(_equalityBinaryOp_);

        setBraceComparativeExpression(_braceComparativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryBraceEqualityExpression(
            cloneNode(this._braceEqualityExpression_),
            cloneNode(this._equalityBinaryOp_),
            cloneNode(this._braceComparativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryBraceEqualityExpression(this);
    }

    public PBraceEqualityExpression getBraceEqualityExpression()
    {
        return this._braceEqualityExpression_;
    }

    public void setBraceEqualityExpression(PBraceEqualityExpression node)
    {
        if(this._braceEqualityExpression_ != null)
        {
            this._braceEqualityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceEqualityExpression_ = node;
    }

    public PEqualityBinaryOp getEqualityBinaryOp()
    {
        return this._equalityBinaryOp_;
    }

    public void setEqualityBinaryOp(PEqualityBinaryOp node)
    {
        if(this._equalityBinaryOp_ != null)
        {
            this._equalityBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalityBinaryOp_ = node;
    }

    public PBraceComparativeExpression getBraceComparativeExpression()
    {
        return this._braceComparativeExpression_;
    }

    public void setBraceComparativeExpression(PBraceComparativeExpression node)
    {
        if(this._braceComparativeExpression_ != null)
        {
            this._braceComparativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceComparativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceEqualityExpression_)
            + toString(this._equalityBinaryOp_)
            + toString(this._braceComparativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceEqualityExpression_ == child)
        {
            this._braceEqualityExpression_ = null;
            return;
        }

        if(this._equalityBinaryOp_ == child)
        {
            this._equalityBinaryOp_ = null;
            return;
        }

        if(this._braceComparativeExpression_ == child)
        {
            this._braceComparativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceEqualityExpression_ == oldChild)
        {
            setBraceEqualityExpression((PBraceEqualityExpression) newChild);
            return;
        }

        if(this._equalityBinaryOp_ == oldChild)
        {
            setEqualityBinaryOp((PEqualityBinaryOp) newChild);
            return;
        }

        if(this._braceComparativeExpression_ == oldChild)
        {
            setBraceComparativeExpression((PBraceComparativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
