/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryComparativeExpression extends PComparativeExpression
{
    private PComparativeExpression _comparativeExpression_;
    private PComparativeBinaryOp _comparativeBinaryOp_;
    private PAdditiveExpression _additiveExpression_;

    public ABinaryComparativeExpression()
    {
        // Constructor
    }

    public ABinaryComparativeExpression(
        @SuppressWarnings("hiding") PComparativeExpression _comparativeExpression_,
        @SuppressWarnings("hiding") PComparativeBinaryOp _comparativeBinaryOp_,
        @SuppressWarnings("hiding") PAdditiveExpression _additiveExpression_)
    {
        // Constructor
        setComparativeExpression(_comparativeExpression_);

        setComparativeBinaryOp(_comparativeBinaryOp_);

        setAdditiveExpression(_additiveExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryComparativeExpression(
            cloneNode(this._comparativeExpression_),
            cloneNode(this._comparativeBinaryOp_),
            cloneNode(this._additiveExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryComparativeExpression(this);
    }

    public PComparativeExpression getComparativeExpression()
    {
        return this._comparativeExpression_;
    }

    public void setComparativeExpression(PComparativeExpression node)
    {
        if(this._comparativeExpression_ != null)
        {
            this._comparativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparativeExpression_ = node;
    }

    public PComparativeBinaryOp getComparativeBinaryOp()
    {
        return this._comparativeBinaryOp_;
    }

    public void setComparativeBinaryOp(PComparativeBinaryOp node)
    {
        if(this._comparativeBinaryOp_ != null)
        {
            this._comparativeBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparativeBinaryOp_ = node;
    }

    public PAdditiveExpression getAdditiveExpression()
    {
        return this._additiveExpression_;
    }

    public void setAdditiveExpression(PAdditiveExpression node)
    {
        if(this._additiveExpression_ != null)
        {
            this._additiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comparativeExpression_)
            + toString(this._comparativeBinaryOp_)
            + toString(this._additiveExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comparativeExpression_ == child)
        {
            this._comparativeExpression_ = null;
            return;
        }

        if(this._comparativeBinaryOp_ == child)
        {
            this._comparativeBinaryOp_ = null;
            return;
        }

        if(this._additiveExpression_ == child)
        {
            this._additiveExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comparativeExpression_ == oldChild)
        {
            setComparativeExpression((PComparativeExpression) newChild);
            return;
        }

        if(this._comparativeBinaryOp_ == oldChild)
        {
            setComparativeBinaryOp((PComparativeBinaryOp) newChild);
            return;
        }

        if(this._additiveExpression_ == oldChild)
        {
            setAdditiveExpression((PAdditiveExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
