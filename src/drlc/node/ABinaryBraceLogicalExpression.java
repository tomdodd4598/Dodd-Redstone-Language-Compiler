/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryBraceLogicalExpression extends PBraceLogicalExpression
{
    private PBraceLogicalExpression _braceLogicalExpression_;
    private PLogicalBinaryOp _logicalBinaryOp_;
    private PBraceEqualityExpression _braceEqualityExpression_;

    public ABinaryBraceLogicalExpression()
    {
        // Constructor
    }

    public ABinaryBraceLogicalExpression(
        @SuppressWarnings("hiding") PBraceLogicalExpression _braceLogicalExpression_,
        @SuppressWarnings("hiding") PLogicalBinaryOp _logicalBinaryOp_,
        @SuppressWarnings("hiding") PBraceEqualityExpression _braceEqualityExpression_)
    {
        // Constructor
        setBraceLogicalExpression(_braceLogicalExpression_);

        setLogicalBinaryOp(_logicalBinaryOp_);

        setBraceEqualityExpression(_braceEqualityExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryBraceLogicalExpression(
            cloneNode(this._braceLogicalExpression_),
            cloneNode(this._logicalBinaryOp_),
            cloneNode(this._braceEqualityExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryBraceLogicalExpression(this);
    }

    public PBraceLogicalExpression getBraceLogicalExpression()
    {
        return this._braceLogicalExpression_;
    }

    public void setBraceLogicalExpression(PBraceLogicalExpression node)
    {
        if(this._braceLogicalExpression_ != null)
        {
            this._braceLogicalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceLogicalExpression_ = node;
    }

    public PLogicalBinaryOp getLogicalBinaryOp()
    {
        return this._logicalBinaryOp_;
    }

    public void setLogicalBinaryOp(PLogicalBinaryOp node)
    {
        if(this._logicalBinaryOp_ != null)
        {
            this._logicalBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalBinaryOp_ = node;
    }

    public PBraceEqualityExpression getBraceEqualityExpression()
    {
        return this._braceEqualityExpression_;
    }

    public void setBraceEqualityExpression(PBraceEqualityExpression node)
    {
        if(this._braceEqualityExpression_ != null)
        {
            this._braceEqualityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceEqualityExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceLogicalExpression_)
            + toString(this._logicalBinaryOp_)
            + toString(this._braceEqualityExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceLogicalExpression_ == child)
        {
            this._braceLogicalExpression_ = null;
            return;
        }

        if(this._logicalBinaryOp_ == child)
        {
            this._logicalBinaryOp_ = null;
            return;
        }

        if(this._braceEqualityExpression_ == child)
        {
            this._braceEqualityExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceLogicalExpression_ == oldChild)
        {
            setBraceLogicalExpression((PBraceLogicalExpression) newChild);
            return;
        }

        if(this._logicalBinaryOp_ == oldChild)
        {
            setLogicalBinaryOp((PLogicalBinaryOp) newChild);
            return;
        }

        if(this._braceEqualityExpression_ == oldChild)
        {
            setBraceEqualityExpression((PBraceEqualityExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
