/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AWildcardUseTree extends PUseTree
{
    private final LinkedList<PPathPrefix> _pathPrefix_ = new LinkedList<PPathPrefix>();
    private TMultiply _multiply_;

    public AWildcardUseTree()
    {
        // Constructor
    }

    public AWildcardUseTree(
        @SuppressWarnings("hiding") List<?> _pathPrefix_,
        @SuppressWarnings("hiding") TMultiply _multiply_)
    {
        // Constructor
        setPathPrefix(_pathPrefix_);

        setMultiply(_multiply_);

    }

    @Override
    public Object clone()
    {
        return new AWildcardUseTree(
            cloneList(this._pathPrefix_),
            cloneNode(this._multiply_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWildcardUseTree(this);
    }

    public LinkedList<PPathPrefix> getPathPrefix()
    {
        return this._pathPrefix_;
    }

    public void setPathPrefix(List<?> list)
    {
        for(PPathPrefix e : this._pathPrefix_)
        {
            e.parent(null);
        }
        this._pathPrefix_.clear();

        for(Object obj_e : list)
        {
            PPathPrefix e = (PPathPrefix) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._pathPrefix_.add(e);
        }
    }

    public TMultiply getMultiply()
    {
        return this._multiply_;
    }

    public void setMultiply(TMultiply node)
    {
        if(this._multiply_ != null)
        {
            this._multiply_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiply_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pathPrefix_)
            + toString(this._multiply_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pathPrefix_.remove(child))
        {
            return;
        }

        if(this._multiply_ == child)
        {
            this._multiply_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PPathPrefix> i = this._pathPrefix_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPathPrefix) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._multiply_ == oldChild)
        {
            setMultiply((TMultiply) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
