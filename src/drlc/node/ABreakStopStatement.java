/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABreakStopStatement extends PStopStatement
{
    private TBreak _break_;
    private TSemicolon _semicolon_;
    private final LinkedList<PDeadCode> _deadCode_ = new LinkedList<PDeadCode>();

    public ABreakStopStatement()
    {
        // Constructor
    }

    public ABreakStopStatement(
        @SuppressWarnings("hiding") TBreak _break_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") List<?> _deadCode_)
    {
        // Constructor
        setBreak(_break_);

        setSemicolon(_semicolon_);

        setDeadCode(_deadCode_);

    }

    @Override
    public Object clone()
    {
        return new ABreakStopStatement(
            cloneNode(this._break_),
            cloneNode(this._semicolon_),
            cloneList(this._deadCode_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABreakStopStatement(this);
    }

    public TBreak getBreak()
    {
        return this._break_;
    }

    public void setBreak(TBreak node)
    {
        if(this._break_ != null)
        {
            this._break_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._break_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public LinkedList<PDeadCode> getDeadCode()
    {
        return this._deadCode_;
    }

    public void setDeadCode(List<?> list)
    {
        for(PDeadCode e : this._deadCode_)
        {
            e.parent(null);
        }
        this._deadCode_.clear();

        for(Object obj_e : list)
        {
            PDeadCode e = (PDeadCode) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._deadCode_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._break_)
            + toString(this._semicolon_)
            + toString(this._deadCode_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._break_ == child)
        {
            this._break_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._deadCode_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._break_ == oldChild)
        {
            setBreak((TBreak) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator<PDeadCode> i = this._deadCode_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeadCode) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
