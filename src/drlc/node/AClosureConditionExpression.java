/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AClosureConditionExpression extends PConditionExpression
{
    private PClosureDeclaratorList _closureDeclaratorList_;
    private PConditionExpression _conditionExpression_;

    public AClosureConditionExpression()
    {
        // Constructor
    }

    public AClosureConditionExpression(
        @SuppressWarnings("hiding") PClosureDeclaratorList _closureDeclaratorList_,
        @SuppressWarnings("hiding") PConditionExpression _conditionExpression_)
    {
        // Constructor
        setClosureDeclaratorList(_closureDeclaratorList_);

        setConditionExpression(_conditionExpression_);

    }

    @Override
    public Object clone()
    {
        return new AClosureConditionExpression(
            cloneNode(this._closureDeclaratorList_),
            cloneNode(this._conditionExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClosureConditionExpression(this);
    }

    public PClosureDeclaratorList getClosureDeclaratorList()
    {
        return this._closureDeclaratorList_;
    }

    public void setClosureDeclaratorList(PClosureDeclaratorList node)
    {
        if(this._closureDeclaratorList_ != null)
        {
            this._closureDeclaratorList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closureDeclaratorList_ = node;
    }

    public PConditionExpression getConditionExpression()
    {
        return this._conditionExpression_;
    }

    public void setConditionExpression(PConditionExpression node)
    {
        if(this._conditionExpression_ != null)
        {
            this._conditionExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._closureDeclaratorList_)
            + toString(this._conditionExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._closureDeclaratorList_ == child)
        {
            this._closureDeclaratorList_ = null;
            return;
        }

        if(this._conditionExpression_ == child)
        {
            this._conditionExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._closureDeclaratorList_ == oldChild)
        {
            setClosureDeclaratorList((PClosureDeclaratorList) newChild);
            return;
        }

        if(this._conditionExpression_ == oldChild)
        {
            setConditionExpression((PConditionExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
