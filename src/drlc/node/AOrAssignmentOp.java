/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AOrAssignmentOp extends PAssignmentOp
{
    private TOrEquals _orEquals_;

    public AOrAssignmentOp()
    {
        // Constructor
    }

    public AOrAssignmentOp(
        @SuppressWarnings("hiding") TOrEquals _orEquals_)
    {
        // Constructor
        setOrEquals(_orEquals_);

    }

    @Override
    public Object clone()
    {
        return new AOrAssignmentOp(
            cloneNode(this._orEquals_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrAssignmentOp(this);
    }

    public TOrEquals getOrEquals()
    {
        return this._orEquals_;
    }

    public void setOrEquals(TOrEquals node)
    {
        if(this._orEquals_ != null)
        {
            this._orEquals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._orEquals_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._orEquals_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._orEquals_ == child)
        {
            this._orEquals_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._orEquals_ == oldChild)
        {
            setOrEquals((TOrEquals) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
