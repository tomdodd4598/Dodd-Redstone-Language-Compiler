/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class APathTail extends PPathTail
{
    private TPathSeparator _pathSeparator_;
    private PPathSegment _pathSegment_;

    public APathTail()
    {
        // Constructor
    }

    public APathTail(
        @SuppressWarnings("hiding") TPathSeparator _pathSeparator_,
        @SuppressWarnings("hiding") PPathSegment _pathSegment_)
    {
        // Constructor
        setPathSeparator(_pathSeparator_);

        setPathSegment(_pathSegment_);

    }

    @Override
    public Object clone()
    {
        return new APathTail(
            cloneNode(this._pathSeparator_),
            cloneNode(this._pathSegment_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPathTail(this);
    }

    public TPathSeparator getPathSeparator()
    {
        return this._pathSeparator_;
    }

    public void setPathSeparator(TPathSeparator node)
    {
        if(this._pathSeparator_ != null)
        {
            this._pathSeparator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathSeparator_ = node;
    }

    public PPathSegment getPathSegment()
    {
        return this._pathSegment_;
    }

    public void setPathSegment(PPathSegment node)
    {
        if(this._pathSegment_ != null)
        {
            this._pathSegment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathSegment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pathSeparator_)
            + toString(this._pathSegment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pathSeparator_ == child)
        {
            this._pathSeparator_ = null;
            return;
        }

        if(this._pathSegment_ == child)
        {
            this._pathSegment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pathSeparator_ == oldChild)
        {
            setPathSeparator((TPathSeparator) newChild);
            return;
        }

        if(this._pathSegment_ == oldChild)
        {
            setPathSegment((PPathSegment) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
