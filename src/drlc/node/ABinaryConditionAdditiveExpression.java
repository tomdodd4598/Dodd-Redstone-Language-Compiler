/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionAdditiveExpression extends PConditionAdditiveExpression
{
    private PConditionAdditiveExpression _conditionAdditiveExpression_;
    private PAdditiveBinaryOp _additiveBinaryOp_;
    private PConditionMultiplicativeExpression _conditionMultiplicativeExpression_;

    public ABinaryConditionAdditiveExpression()
    {
        // Constructor
    }

    public ABinaryConditionAdditiveExpression(
        @SuppressWarnings("hiding") PConditionAdditiveExpression _conditionAdditiveExpression_,
        @SuppressWarnings("hiding") PAdditiveBinaryOp _additiveBinaryOp_,
        @SuppressWarnings("hiding") PConditionMultiplicativeExpression _conditionMultiplicativeExpression_)
    {
        // Constructor
        setConditionAdditiveExpression(_conditionAdditiveExpression_);

        setAdditiveBinaryOp(_additiveBinaryOp_);

        setConditionMultiplicativeExpression(_conditionMultiplicativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionAdditiveExpression(
            cloneNode(this._conditionAdditiveExpression_),
            cloneNode(this._additiveBinaryOp_),
            cloneNode(this._conditionMultiplicativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionAdditiveExpression(this);
    }

    public PConditionAdditiveExpression getConditionAdditiveExpression()
    {
        return this._conditionAdditiveExpression_;
    }

    public void setConditionAdditiveExpression(PConditionAdditiveExpression node)
    {
        if(this._conditionAdditiveExpression_ != null)
        {
            this._conditionAdditiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionAdditiveExpression_ = node;
    }

    public PAdditiveBinaryOp getAdditiveBinaryOp()
    {
        return this._additiveBinaryOp_;
    }

    public void setAdditiveBinaryOp(PAdditiveBinaryOp node)
    {
        if(this._additiveBinaryOp_ != null)
        {
            this._additiveBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveBinaryOp_ = node;
    }

    public PConditionMultiplicativeExpression getConditionMultiplicativeExpression()
    {
        return this._conditionMultiplicativeExpression_;
    }

    public void setConditionMultiplicativeExpression(PConditionMultiplicativeExpression node)
    {
        if(this._conditionMultiplicativeExpression_ != null)
        {
            this._conditionMultiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionMultiplicativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionAdditiveExpression_)
            + toString(this._additiveBinaryOp_)
            + toString(this._conditionMultiplicativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionAdditiveExpression_ == child)
        {
            this._conditionAdditiveExpression_ = null;
            return;
        }

        if(this._additiveBinaryOp_ == child)
        {
            this._additiveBinaryOp_ = null;
            return;
        }

        if(this._conditionMultiplicativeExpression_ == child)
        {
            this._conditionMultiplicativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionAdditiveExpression_ == oldChild)
        {
            setConditionAdditiveExpression((PConditionAdditiveExpression) newChild);
            return;
        }

        if(this._additiveBinaryOp_ == oldChild)
        {
            setAdditiveBinaryOp((PAdditiveBinaryOp) newChild);
            return;
        }

        if(this._conditionMultiplicativeExpression_ == oldChild)
        {
            setConditionMultiplicativeExpression((PConditionMultiplicativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
