/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentBraceAssignmentExpression extends PBraceAssignmentExpression
{
    private PBraceUnaryExpression _braceUnaryExpression_;
    private PAssignmentOp _assignmentOp_;
    private PBraceExpression _braceExpression_;

    public AAssignmentBraceAssignmentExpression()
    {
        // Constructor
    }

    public AAssignmentBraceAssignmentExpression(
        @SuppressWarnings("hiding") PBraceUnaryExpression _braceUnaryExpression_,
        @SuppressWarnings("hiding") PAssignmentOp _assignmentOp_,
        @SuppressWarnings("hiding") PBraceExpression _braceExpression_)
    {
        // Constructor
        setBraceUnaryExpression(_braceUnaryExpression_);

        setAssignmentOp(_assignmentOp_);

        setBraceExpression(_braceExpression_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentBraceAssignmentExpression(
            cloneNode(this._braceUnaryExpression_),
            cloneNode(this._assignmentOp_),
            cloneNode(this._braceExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentBraceAssignmentExpression(this);
    }

    public PBraceUnaryExpression getBraceUnaryExpression()
    {
        return this._braceUnaryExpression_;
    }

    public void setBraceUnaryExpression(PBraceUnaryExpression node)
    {
        if(this._braceUnaryExpression_ != null)
        {
            this._braceUnaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceUnaryExpression_ = node;
    }

    public PAssignmentOp getAssignmentOp()
    {
        return this._assignmentOp_;
    }

    public void setAssignmentOp(PAssignmentOp node)
    {
        if(this._assignmentOp_ != null)
        {
            this._assignmentOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignmentOp_ = node;
    }

    public PBraceExpression getBraceExpression()
    {
        return this._braceExpression_;
    }

    public void setBraceExpression(PBraceExpression node)
    {
        if(this._braceExpression_ != null)
        {
            this._braceExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceUnaryExpression_)
            + toString(this._assignmentOp_)
            + toString(this._braceExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceUnaryExpression_ == child)
        {
            this._braceUnaryExpression_ = null;
            return;
        }

        if(this._assignmentOp_ == child)
        {
            this._assignmentOp_ = null;
            return;
        }

        if(this._braceExpression_ == child)
        {
            this._braceExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceUnaryExpression_ == oldChild)
        {
            setBraceUnaryExpression((PBraceUnaryExpression) newChild);
            return;
        }

        if(this._assignmentOp_ == oldChild)
        {
            setAssignmentOp((PAssignmentOp) newChild);
            return;
        }

        if(this._braceExpression_ == oldChild)
        {
            setBraceExpression((PBraceExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
