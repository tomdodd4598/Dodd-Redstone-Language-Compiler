/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADereferenceExpression6 extends PExpression6
{
    private TMultiply _multiply_;
    private PExpression6 _expression6_;

    public ADereferenceExpression6()
    {
        // Constructor
    }

    public ADereferenceExpression6(
        @SuppressWarnings("hiding") TMultiply _multiply_,
        @SuppressWarnings("hiding") PExpression6 _expression6_)
    {
        // Constructor
        setMultiply(_multiply_);

        setExpression6(_expression6_);

    }

    @Override
    public Object clone()
    {
        return new ADereferenceExpression6(
            cloneNode(this._multiply_),
            cloneNode(this._expression6_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADereferenceExpression6(this);
    }

    public TMultiply getMultiply()
    {
        return this._multiply_;
    }

    public void setMultiply(TMultiply node)
    {
        if(this._multiply_ != null)
        {
            this._multiply_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiply_ = node;
    }

    public PExpression6 getExpression6()
    {
        return this._expression6_;
    }

    public void setExpression6(PExpression6 node)
    {
        if(this._expression6_ != null)
        {
            this._expression6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression6_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiply_)
            + toString(this._expression6_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiply_ == child)
        {
            this._multiply_ = null;
            return;
        }

        if(this._expression6_ == child)
        {
            this._expression6_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiply_ == oldChild)
        {
            setMultiply((TMultiply) newChild);
            return;
        }

        if(this._expression6_ == oldChild)
        {
            setExpression6((PExpression6) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
