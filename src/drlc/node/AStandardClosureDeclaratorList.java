/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AStandardClosureDeclaratorList extends PClosureDeclaratorList
{
    private TOr _lOr_;
    private PDeclaratorList _declaratorList_;
    private TOr _rOr_;

    public AStandardClosureDeclaratorList()
    {
        // Constructor
    }

    public AStandardClosureDeclaratorList(
        @SuppressWarnings("hiding") TOr _lOr_,
        @SuppressWarnings("hiding") PDeclaratorList _declaratorList_,
        @SuppressWarnings("hiding") TOr _rOr_)
    {
        // Constructor
        setLOr(_lOr_);

        setDeclaratorList(_declaratorList_);

        setROr(_rOr_);

    }

    @Override
    public Object clone()
    {
        return new AStandardClosureDeclaratorList(
            cloneNode(this._lOr_),
            cloneNode(this._declaratorList_),
            cloneNode(this._rOr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStandardClosureDeclaratorList(this);
    }

    public TOr getLOr()
    {
        return this._lOr_;
    }

    public void setLOr(TOr node)
    {
        if(this._lOr_ != null)
        {
            this._lOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lOr_ = node;
    }

    public PDeclaratorList getDeclaratorList()
    {
        return this._declaratorList_;
    }

    public void setDeclaratorList(PDeclaratorList node)
    {
        if(this._declaratorList_ != null)
        {
            this._declaratorList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declaratorList_ = node;
    }

    public TOr getROr()
    {
        return this._rOr_;
    }

    public void setROr(TOr node)
    {
        if(this._rOr_ != null)
        {
            this._rOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rOr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lOr_)
            + toString(this._declaratorList_)
            + toString(this._rOr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lOr_ == child)
        {
            this._lOr_ = null;
            return;
        }

        if(this._declaratorList_ == child)
        {
            this._declaratorList_ = null;
            return;
        }

        if(this._rOr_ == child)
        {
            this._rOr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lOr_ == oldChild)
        {
            setLOr((TOr) newChild);
            return;
        }

        if(this._declaratorList_ == oldChild)
        {
            setDeclaratorList((PDeclaratorList) newChild);
            return;
        }

        if(this._rOr_ == oldChild)
        {
            setROr((TOr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
