/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class APrioritizedBraceUnaryExpression extends PBraceUnaryExpression
{
    private PBraceSuffixExpression _braceSuffixExpression_;

    public APrioritizedBraceUnaryExpression()
    {
        // Constructor
    }

    public APrioritizedBraceUnaryExpression(
        @SuppressWarnings("hiding") PBraceSuffixExpression _braceSuffixExpression_)
    {
        // Constructor
        setBraceSuffixExpression(_braceSuffixExpression_);

    }

    @Override
    public Object clone()
    {
        return new APrioritizedBraceUnaryExpression(
            cloneNode(this._braceSuffixExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrioritizedBraceUnaryExpression(this);
    }

    public PBraceSuffixExpression getBraceSuffixExpression()
    {
        return this._braceSuffixExpression_;
    }

    public void setBraceSuffixExpression(PBraceSuffixExpression node)
    {
        if(this._braceSuffixExpression_ != null)
        {
            this._braceSuffixExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceSuffixExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceSuffixExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceSuffixExpression_ == child)
        {
            this._braceSuffixExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceSuffixExpression_ == oldChild)
        {
            setBraceSuffixExpression((PBraceSuffixExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
