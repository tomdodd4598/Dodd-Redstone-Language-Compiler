/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADoConditionalIterativeSection extends PIterativeSection
{
    private TDo _do_;
    private TLBrace _lBrace_;
    private final LinkedList<PBasicSection> _basicSection_ = new LinkedList<PBasicSection>();
    private PStopStatement _stopStatement_;
    private TRBrace _rBrace_;
    private TConditionalIterativeSectionKeyword _conditionalIterativeSectionKeyword_;
    private PExpressionRvalue _expressionRvalue_;
    private PSeparator _separator_;

    public ADoConditionalIterativeSection()
    {
        // Constructor
    }

    public ADoConditionalIterativeSection(
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<?> _basicSection_,
        @SuppressWarnings("hiding") PStopStatement _stopStatement_,
        @SuppressWarnings("hiding") TRBrace _rBrace_,
        @SuppressWarnings("hiding") TConditionalIterativeSectionKeyword _conditionalIterativeSectionKeyword_,
        @SuppressWarnings("hiding") PExpressionRvalue _expressionRvalue_,
        @SuppressWarnings("hiding") PSeparator _separator_)
    {
        // Constructor
        setDo(_do_);

        setLBrace(_lBrace_);

        setBasicSection(_basicSection_);

        setStopStatement(_stopStatement_);

        setRBrace(_rBrace_);

        setConditionalIterativeSectionKeyword(_conditionalIterativeSectionKeyword_);

        setExpressionRvalue(_expressionRvalue_);

        setSeparator(_separator_);

    }

    @Override
    public Object clone()
    {
        return new ADoConditionalIterativeSection(
            cloneNode(this._do_),
            cloneNode(this._lBrace_),
            cloneList(this._basicSection_),
            cloneNode(this._stopStatement_),
            cloneNode(this._rBrace_),
            cloneNode(this._conditionalIterativeSectionKeyword_),
            cloneNode(this._expressionRvalue_),
            cloneNode(this._separator_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADoConditionalIterativeSection(this);
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public LinkedList<PBasicSection> getBasicSection()
    {
        return this._basicSection_;
    }

    public void setBasicSection(List<?> list)
    {
        for(PBasicSection e : this._basicSection_)
        {
            e.parent(null);
        }
        this._basicSection_.clear();

        for(Object obj_e : list)
        {
            PBasicSection e = (PBasicSection) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._basicSection_.add(e);
        }
    }

    public PStopStatement getStopStatement()
    {
        return this._stopStatement_;
    }

    public void setStopStatement(PStopStatement node)
    {
        if(this._stopStatement_ != null)
        {
            this._stopStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stopStatement_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    public TConditionalIterativeSectionKeyword getConditionalIterativeSectionKeyword()
    {
        return this._conditionalIterativeSectionKeyword_;
    }

    public void setConditionalIterativeSectionKeyword(TConditionalIterativeSectionKeyword node)
    {
        if(this._conditionalIterativeSectionKeyword_ != null)
        {
            this._conditionalIterativeSectionKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalIterativeSectionKeyword_ = node;
    }

    public PExpressionRvalue getExpressionRvalue()
    {
        return this._expressionRvalue_;
    }

    public void setExpressionRvalue(PExpressionRvalue node)
    {
        if(this._expressionRvalue_ != null)
        {
            this._expressionRvalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionRvalue_ = node;
    }

    public PSeparator getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(PSeparator node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._do_)
            + toString(this._lBrace_)
            + toString(this._basicSection_)
            + toString(this._stopStatement_)
            + toString(this._rBrace_)
            + toString(this._conditionalIterativeSectionKeyword_)
            + toString(this._expressionRvalue_)
            + toString(this._separator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._basicSection_.remove(child))
        {
            return;
        }

        if(this._stopStatement_ == child)
        {
            this._stopStatement_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        if(this._conditionalIterativeSectionKeyword_ == child)
        {
            this._conditionalIterativeSectionKeyword_ = null;
            return;
        }

        if(this._expressionRvalue_ == child)
        {
            this._expressionRvalue_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PBasicSection> i = this._basicSection_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PBasicSection) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._stopStatement_ == oldChild)
        {
            setStopStatement((PStopStatement) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        if(this._conditionalIterativeSectionKeyword_ == oldChild)
        {
            setConditionalIterativeSectionKeyword((TConditionalIterativeSectionKeyword) newChild);
            return;
        }

        if(this._expressionRvalue_ == oldChild)
        {
            setExpressionRvalue((PExpressionRvalue) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((PSeparator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
