/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryAdditiveExpression extends PAdditiveExpression
{
    private PAdditiveExpression _additiveExpression_;
    private PAdditiveBinaryOp _additiveBinaryOp_;
    private PMultiplicativeExpression _multiplicativeExpression_;

    public ABinaryAdditiveExpression()
    {
        // Constructor
    }

    public ABinaryAdditiveExpression(
        @SuppressWarnings("hiding") PAdditiveExpression _additiveExpression_,
        @SuppressWarnings("hiding") PAdditiveBinaryOp _additiveBinaryOp_,
        @SuppressWarnings("hiding") PMultiplicativeExpression _multiplicativeExpression_)
    {
        // Constructor
        setAdditiveExpression(_additiveExpression_);

        setAdditiveBinaryOp(_additiveBinaryOp_);

        setMultiplicativeExpression(_multiplicativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryAdditiveExpression(
            cloneNode(this._additiveExpression_),
            cloneNode(this._additiveBinaryOp_),
            cloneNode(this._multiplicativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryAdditiveExpression(this);
    }

    public PAdditiveExpression getAdditiveExpression()
    {
        return this._additiveExpression_;
    }

    public void setAdditiveExpression(PAdditiveExpression node)
    {
        if(this._additiveExpression_ != null)
        {
            this._additiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpression_ = node;
    }

    public PAdditiveBinaryOp getAdditiveBinaryOp()
    {
        return this._additiveBinaryOp_;
    }

    public void setAdditiveBinaryOp(PAdditiveBinaryOp node)
    {
        if(this._additiveBinaryOp_ != null)
        {
            this._additiveBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveBinaryOp_ = node;
    }

    public PMultiplicativeExpression getMultiplicativeExpression()
    {
        return this._multiplicativeExpression_;
    }

    public void setMultiplicativeExpression(PMultiplicativeExpression node)
    {
        if(this._multiplicativeExpression_ != null)
        {
            this._multiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._additiveExpression_)
            + toString(this._additiveBinaryOp_)
            + toString(this._multiplicativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._additiveExpression_ == child)
        {
            this._additiveExpression_ = null;
            return;
        }

        if(this._additiveBinaryOp_ == child)
        {
            this._additiveBinaryOp_ = null;
            return;
        }

        if(this._multiplicativeExpression_ == child)
        {
            this._multiplicativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._additiveExpression_ == oldChild)
        {
            setAdditiveExpression((PAdditiveExpression) newChild);
            return;
        }

        if(this._additiveBinaryOp_ == oldChild)
        {
            setAdditiveBinaryOp((PAdditiveBinaryOp) newChild);
            return;
        }

        if(this._multiplicativeExpression_ == oldChild)
        {
            setMultiplicativeExpression((PMultiplicativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
