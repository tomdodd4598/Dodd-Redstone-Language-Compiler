/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionRawType extends PRawType
{
    private TFn _fn_;
    private TLPar _lPar_;
    private PTypeList _typeList_;
    private TRPar _rPar_;
    private PReturnType _returnType_;

    public AFunctionRawType()
    {
        // Constructor
    }

    public AFunctionRawType(
        @SuppressWarnings("hiding") TFn _fn_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PTypeList _typeList_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PReturnType _returnType_)
    {
        // Constructor
        setFn(_fn_);

        setLPar(_lPar_);

        setTypeList(_typeList_);

        setRPar(_rPar_);

        setReturnType(_returnType_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionRawType(
            cloneNode(this._fn_),
            cloneNode(this._lPar_),
            cloneNode(this._typeList_),
            cloneNode(this._rPar_),
            cloneNode(this._returnType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionRawType(this);
    }

    public TFn getFn()
    {
        return this._fn_;
    }

    public void setFn(TFn node)
    {
        if(this._fn_ != null)
        {
            this._fn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fn_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PTypeList getTypeList()
    {
        return this._typeList_;
    }

    public void setTypeList(PTypeList node)
    {
        if(this._typeList_ != null)
        {
            this._typeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PReturnType getReturnType()
    {
        return this._returnType_;
    }

    public void setReturnType(PReturnType node)
    {
        if(this._returnType_ != null)
        {
            this._returnType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fn_)
            + toString(this._lPar_)
            + toString(this._typeList_)
            + toString(this._rPar_)
            + toString(this._returnType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fn_ == child)
        {
            this._fn_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._typeList_ == child)
        {
            this._typeList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._returnType_ == child)
        {
            this._returnType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fn_ == oldChild)
        {
            setFn((TFn) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._typeList_ == oldChild)
        {
            setTypeList((PTypeList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._returnType_ == oldChild)
        {
            setReturnType((PReturnType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
