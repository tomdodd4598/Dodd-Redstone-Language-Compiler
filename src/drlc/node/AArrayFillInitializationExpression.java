/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AArrayFillInitializationExpression extends PInitializationExpression
{
    private TLBracket _lBracket_;
    private PExpressionRvalue _expressionRvalue_;
    private PArrayTypeTail _arrayTypeTail_;
    private TRBracket _rBracket_;

    public AArrayFillInitializationExpression()
    {
        // Constructor
    }

    public AArrayFillInitializationExpression(
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PExpressionRvalue _expressionRvalue_,
        @SuppressWarnings("hiding") PArrayTypeTail _arrayTypeTail_,
        @SuppressWarnings("hiding") TRBracket _rBracket_)
    {
        // Constructor
        setLBracket(_lBracket_);

        setExpressionRvalue(_expressionRvalue_);

        setArrayTypeTail(_arrayTypeTail_);

        setRBracket(_rBracket_);

    }

    @Override
    public Object clone()
    {
        return new AArrayFillInitializationExpression(
            cloneNode(this._lBracket_),
            cloneNode(this._expressionRvalue_),
            cloneNode(this._arrayTypeTail_),
            cloneNode(this._rBracket_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayFillInitializationExpression(this);
    }

    public TLBracket getLBracket()
    {
        return this._lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(this._lBracket_ != null)
        {
            this._lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracket_ = node;
    }

    public PExpressionRvalue getExpressionRvalue()
    {
        return this._expressionRvalue_;
    }

    public void setExpressionRvalue(PExpressionRvalue node)
    {
        if(this._expressionRvalue_ != null)
        {
            this._expressionRvalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionRvalue_ = node;
    }

    public PArrayTypeTail getArrayTypeTail()
    {
        return this._arrayTypeTail_;
    }

    public void setArrayTypeTail(PArrayTypeTail node)
    {
        if(this._arrayTypeTail_ != null)
        {
            this._arrayTypeTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayTypeTail_ = node;
    }

    public TRBracket getRBracket()
    {
        return this._rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(this._rBracket_ != null)
        {
            this._rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBracket_)
            + toString(this._expressionRvalue_)
            + toString(this._arrayTypeTail_)
            + toString(this._rBracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBracket_ == child)
        {
            this._lBracket_ = null;
            return;
        }

        if(this._expressionRvalue_ == child)
        {
            this._expressionRvalue_ = null;
            return;
        }

        if(this._arrayTypeTail_ == child)
        {
            this._arrayTypeTail_ = null;
            return;
        }

        if(this._rBracket_ == child)
        {
            this._rBracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this._expressionRvalue_ == oldChild)
        {
            setExpressionRvalue((PExpressionRvalue) newChild);
            return;
        }

        if(this._arrayTypeTail_ == oldChild)
        {
            setArrayTypeTail((PArrayTypeTail) newChild);
            return;
        }

        if(this._rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
