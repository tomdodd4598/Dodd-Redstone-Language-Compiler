/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AParameterListTail extends PParameterListTail
{
    private TComma _comma_;
    private final LinkedList<TVariableModifier> _variableModifier_ = new LinkedList<TVariableModifier>();
    private PParameter _parameter_;

    public AParameterListTail()
    {
        // Constructor
    }

    public AParameterListTail(
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") List<?> _variableModifier_,
        @SuppressWarnings("hiding") PParameter _parameter_)
    {
        // Constructor
        setComma(_comma_);

        setVariableModifier(_variableModifier_);

        setParameter(_parameter_);

    }

    @Override
    public Object clone()
    {
        return new AParameterListTail(
            cloneNode(this._comma_),
            cloneList(this._variableModifier_),
            cloneNode(this._parameter_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParameterListTail(this);
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public LinkedList<TVariableModifier> getVariableModifier()
    {
        return this._variableModifier_;
    }

    public void setVariableModifier(List<?> list)
    {
        for(TVariableModifier e : this._variableModifier_)
        {
            e.parent(null);
        }
        this._variableModifier_.clear();

        for(Object obj_e : list)
        {
            TVariableModifier e = (TVariableModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableModifier_.add(e);
        }
    }

    public PParameter getParameter()
    {
        return this._parameter_;
    }

    public void setParameter(PParameter node)
    {
        if(this._parameter_ != null)
        {
            this._parameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comma_)
            + toString(this._variableModifier_)
            + toString(this._parameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._variableModifier_.remove(child))
        {
            return;
        }

        if(this._parameter_ == child)
        {
            this._parameter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        for(ListIterator<TVariableModifier> i = this._variableModifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TVariableModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._parameter_ == oldChild)
        {
            setParameter((PParameter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
