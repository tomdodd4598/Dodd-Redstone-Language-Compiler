/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionalExpression5 extends PConditionalExpression5
{
    private PConditionalExpression5 _conditionalExpression5_;
    private PShiftBinaryOp _shiftBinaryOp_;
    private PConditionalExpression6 _conditionalExpression6_;

    public ABinaryConditionalExpression5()
    {
        // Constructor
    }

    public ABinaryConditionalExpression5(
        @SuppressWarnings("hiding") PConditionalExpression5 _conditionalExpression5_,
        @SuppressWarnings("hiding") PShiftBinaryOp _shiftBinaryOp_,
        @SuppressWarnings("hiding") PConditionalExpression6 _conditionalExpression6_)
    {
        // Constructor
        setConditionalExpression5(_conditionalExpression5_);

        setShiftBinaryOp(_shiftBinaryOp_);

        setConditionalExpression6(_conditionalExpression6_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionalExpression5(
            cloneNode(this._conditionalExpression5_),
            cloneNode(this._shiftBinaryOp_),
            cloneNode(this._conditionalExpression6_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionalExpression5(this);
    }

    public PConditionalExpression5 getConditionalExpression5()
    {
        return this._conditionalExpression5_;
    }

    public void setConditionalExpression5(PConditionalExpression5 node)
    {
        if(this._conditionalExpression5_ != null)
        {
            this._conditionalExpression5_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression5_ = node;
    }

    public PShiftBinaryOp getShiftBinaryOp()
    {
        return this._shiftBinaryOp_;
    }

    public void setShiftBinaryOp(PShiftBinaryOp node)
    {
        if(this._shiftBinaryOp_ != null)
        {
            this._shiftBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftBinaryOp_ = node;
    }

    public PConditionalExpression6 getConditionalExpression6()
    {
        return this._conditionalExpression6_;
    }

    public void setConditionalExpression6(PConditionalExpression6 node)
    {
        if(this._conditionalExpression6_ != null)
        {
            this._conditionalExpression6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression6_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalExpression5_)
            + toString(this._shiftBinaryOp_)
            + toString(this._conditionalExpression6_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalExpression5_ == child)
        {
            this._conditionalExpression5_ = null;
            return;
        }

        if(this._shiftBinaryOp_ == child)
        {
            this._shiftBinaryOp_ = null;
            return;
        }

        if(this._conditionalExpression6_ == child)
        {
            this._conditionalExpression6_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalExpression5_ == oldChild)
        {
            setConditionalExpression5((PConditionalExpression5) newChild);
            return;
        }

        if(this._shiftBinaryOp_ == oldChild)
        {
            setShiftBinaryOp((PShiftBinaryOp) newChild);
            return;
        }

        if(this._conditionalExpression6_ == oldChild)
        {
            setConditionalExpression6((PConditionalExpression6) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
