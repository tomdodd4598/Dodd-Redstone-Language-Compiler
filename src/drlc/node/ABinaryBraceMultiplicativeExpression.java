/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryBraceMultiplicativeExpression extends PBraceMultiplicativeExpression
{
    private PBraceMultiplicativeExpression _braceMultiplicativeExpression_;
    private PMultiplicativeBinaryOp _multiplicativeBinaryOp_;
    private PBraceShiftExpression _braceShiftExpression_;

    public ABinaryBraceMultiplicativeExpression()
    {
        // Constructor
    }

    public ABinaryBraceMultiplicativeExpression(
        @SuppressWarnings("hiding") PBraceMultiplicativeExpression _braceMultiplicativeExpression_,
        @SuppressWarnings("hiding") PMultiplicativeBinaryOp _multiplicativeBinaryOp_,
        @SuppressWarnings("hiding") PBraceShiftExpression _braceShiftExpression_)
    {
        // Constructor
        setBraceMultiplicativeExpression(_braceMultiplicativeExpression_);

        setMultiplicativeBinaryOp(_multiplicativeBinaryOp_);

        setBraceShiftExpression(_braceShiftExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryBraceMultiplicativeExpression(
            cloneNode(this._braceMultiplicativeExpression_),
            cloneNode(this._multiplicativeBinaryOp_),
            cloneNode(this._braceShiftExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryBraceMultiplicativeExpression(this);
    }

    public PBraceMultiplicativeExpression getBraceMultiplicativeExpression()
    {
        return this._braceMultiplicativeExpression_;
    }

    public void setBraceMultiplicativeExpression(PBraceMultiplicativeExpression node)
    {
        if(this._braceMultiplicativeExpression_ != null)
        {
            this._braceMultiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceMultiplicativeExpression_ = node;
    }

    public PMultiplicativeBinaryOp getMultiplicativeBinaryOp()
    {
        return this._multiplicativeBinaryOp_;
    }

    public void setMultiplicativeBinaryOp(PMultiplicativeBinaryOp node)
    {
        if(this._multiplicativeBinaryOp_ != null)
        {
            this._multiplicativeBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeBinaryOp_ = node;
    }

    public PBraceShiftExpression getBraceShiftExpression()
    {
        return this._braceShiftExpression_;
    }

    public void setBraceShiftExpression(PBraceShiftExpression node)
    {
        if(this._braceShiftExpression_ != null)
        {
            this._braceShiftExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceShiftExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceMultiplicativeExpression_)
            + toString(this._multiplicativeBinaryOp_)
            + toString(this._braceShiftExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceMultiplicativeExpression_ == child)
        {
            this._braceMultiplicativeExpression_ = null;
            return;
        }

        if(this._multiplicativeBinaryOp_ == child)
        {
            this._multiplicativeBinaryOp_ = null;
            return;
        }

        if(this._braceShiftExpression_ == child)
        {
            this._braceShiftExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceMultiplicativeExpression_ == oldChild)
        {
            setBraceMultiplicativeExpression((PBraceMultiplicativeExpression) newChild);
            return;
        }

        if(this._multiplicativeBinaryOp_ == oldChild)
        {
            setMultiplicativeBinaryOp((PMultiplicativeBinaryOp) newChild);
            return;
        }

        if(this._braceShiftExpression_ == oldChild)
        {
            setBraceShiftExpression((PBraceShiftExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
