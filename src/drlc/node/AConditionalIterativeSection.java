/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AConditionalIterativeSection extends PIterativeSection
{
    private PIterativeSectionLabel _iterativeSectionLabel_;
    private TConditionalIterativeKeyword _conditionalIterativeKeyword_;
    private PExpression _expression_;
    private TLBrace _lBrace_;
    private PScopeContents _scopeContents_;
    private TRBrace _rBrace_;

    public AConditionalIterativeSection()
    {
        // Constructor
    }

    public AConditionalIterativeSection(
        @SuppressWarnings("hiding") PIterativeSectionLabel _iterativeSectionLabel_,
        @SuppressWarnings("hiding") TConditionalIterativeKeyword _conditionalIterativeKeyword_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PScopeContents _scopeContents_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setIterativeSectionLabel(_iterativeSectionLabel_);

        setConditionalIterativeKeyword(_conditionalIterativeKeyword_);

        setExpression(_expression_);

        setLBrace(_lBrace_);

        setScopeContents(_scopeContents_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AConditionalIterativeSection(
            cloneNode(this._iterativeSectionLabel_),
            cloneNode(this._conditionalIterativeKeyword_),
            cloneNode(this._expression_),
            cloneNode(this._lBrace_),
            cloneNode(this._scopeContents_),
            cloneNode(this._rBrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionalIterativeSection(this);
    }

    public PIterativeSectionLabel getIterativeSectionLabel()
    {
        return this._iterativeSectionLabel_;
    }

    public void setIterativeSectionLabel(PIterativeSectionLabel node)
    {
        if(this._iterativeSectionLabel_ != null)
        {
            this._iterativeSectionLabel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iterativeSectionLabel_ = node;
    }

    public TConditionalIterativeKeyword getConditionalIterativeKeyword()
    {
        return this._conditionalIterativeKeyword_;
    }

    public void setConditionalIterativeKeyword(TConditionalIterativeKeyword node)
    {
        if(this._conditionalIterativeKeyword_ != null)
        {
            this._conditionalIterativeKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalIterativeKeyword_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PScopeContents getScopeContents()
    {
        return this._scopeContents_;
    }

    public void setScopeContents(PScopeContents node)
    {
        if(this._scopeContents_ != null)
        {
            this._scopeContents_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._scopeContents_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._iterativeSectionLabel_)
            + toString(this._conditionalIterativeKeyword_)
            + toString(this._expression_)
            + toString(this._lBrace_)
            + toString(this._scopeContents_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._iterativeSectionLabel_ == child)
        {
            this._iterativeSectionLabel_ = null;
            return;
        }

        if(this._conditionalIterativeKeyword_ == child)
        {
            this._conditionalIterativeKeyword_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._scopeContents_ == child)
        {
            this._scopeContents_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._iterativeSectionLabel_ == oldChild)
        {
            setIterativeSectionLabel((PIterativeSectionLabel) newChild);
            return;
        }

        if(this._conditionalIterativeKeyword_ == oldChild)
        {
            setConditionalIterativeKeyword((TConditionalIterativeKeyword) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._scopeContents_ == oldChild)
        {
            setScopeContents((PScopeContents) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
