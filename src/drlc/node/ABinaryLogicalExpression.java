/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryLogicalExpression extends PLogicalExpression
{
    private PLogicalExpression _logicalExpression_;
    private PLogicalBinaryOp _logicalBinaryOp_;
    private PEqualityExpression _equalityExpression_;

    public ABinaryLogicalExpression()
    {
        // Constructor
    }

    public ABinaryLogicalExpression(
        @SuppressWarnings("hiding") PLogicalExpression _logicalExpression_,
        @SuppressWarnings("hiding") PLogicalBinaryOp _logicalBinaryOp_,
        @SuppressWarnings("hiding") PEqualityExpression _equalityExpression_)
    {
        // Constructor
        setLogicalExpression(_logicalExpression_);

        setLogicalBinaryOp(_logicalBinaryOp_);

        setEqualityExpression(_equalityExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryLogicalExpression(
            cloneNode(this._logicalExpression_),
            cloneNode(this._logicalBinaryOp_),
            cloneNode(this._equalityExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryLogicalExpression(this);
    }

    public PLogicalExpression getLogicalExpression()
    {
        return this._logicalExpression_;
    }

    public void setLogicalExpression(PLogicalExpression node)
    {
        if(this._logicalExpression_ != null)
        {
            this._logicalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalExpression_ = node;
    }

    public PLogicalBinaryOp getLogicalBinaryOp()
    {
        return this._logicalBinaryOp_;
    }

    public void setLogicalBinaryOp(PLogicalBinaryOp node)
    {
        if(this._logicalBinaryOp_ != null)
        {
            this._logicalBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalBinaryOp_ = node;
    }

    public PEqualityExpression getEqualityExpression()
    {
        return this._equalityExpression_;
    }

    public void setEqualityExpression(PEqualityExpression node)
    {
        if(this._equalityExpression_ != null)
        {
            this._equalityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalityExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._logicalExpression_)
            + toString(this._logicalBinaryOp_)
            + toString(this._equalityExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._logicalExpression_ == child)
        {
            this._logicalExpression_ = null;
            return;
        }

        if(this._logicalBinaryOp_ == child)
        {
            this._logicalBinaryOp_ = null;
            return;
        }

        if(this._equalityExpression_ == child)
        {
            this._equalityExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._logicalExpression_ == oldChild)
        {
            setLogicalExpression((PLogicalExpression) newChild);
            return;
        }

        if(this._logicalBinaryOp_ == oldChild)
        {
            setLogicalBinaryOp((PLogicalBinaryOp) newChild);
            return;
        }

        if(this._equalityExpression_ == oldChild)
        {
            setEqualityExpression((PEqualityExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
