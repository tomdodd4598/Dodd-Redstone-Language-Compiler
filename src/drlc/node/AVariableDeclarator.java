/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AVariableDeclarator extends PVariableDeclarator
{
    private final LinkedList<TVariableModifier> _variableModifier_ = new LinkedList<TVariableModifier>();
    private TName _name_;
    private PTypeAnnotation _typeAnnotation_;

    public AVariableDeclarator()
    {
        // Constructor
    }

    public AVariableDeclarator(
        @SuppressWarnings("hiding") List<?> _variableModifier_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") PTypeAnnotation _typeAnnotation_)
    {
        // Constructor
        setVariableModifier(_variableModifier_);

        setName(_name_);

        setTypeAnnotation(_typeAnnotation_);

    }

    @Override
    public Object clone()
    {
        return new AVariableDeclarator(
            cloneList(this._variableModifier_),
            cloneNode(this._name_),
            cloneNode(this._typeAnnotation_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclarator(this);
    }

    public LinkedList<TVariableModifier> getVariableModifier()
    {
        return this._variableModifier_;
    }

    public void setVariableModifier(List<?> list)
    {
        for(TVariableModifier e : this._variableModifier_)
        {
            e.parent(null);
        }
        this._variableModifier_.clear();

        for(Object obj_e : list)
        {
            TVariableModifier e = (TVariableModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableModifier_.add(e);
        }
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PTypeAnnotation getTypeAnnotation()
    {
        return this._typeAnnotation_;
    }

    public void setTypeAnnotation(PTypeAnnotation node)
    {
        if(this._typeAnnotation_ != null)
        {
            this._typeAnnotation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeAnnotation_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variableModifier_)
            + toString(this._name_)
            + toString(this._typeAnnotation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variableModifier_.remove(child))
        {
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._typeAnnotation_ == child)
        {
            this._typeAnnotation_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TVariableModifier> i = this._variableModifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TVariableModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._typeAnnotation_ == oldChild)
        {
            setTypeAnnotation((PTypeAnnotation) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
