/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AContinueStopStatement extends PStopStatement
{
    private TContinue _continue_;
    private TName _name_;
    private TSemicolon _semicolon_;
    private final LinkedList<PDeadSection> _deadSection_ = new LinkedList<PDeadSection>();

    public AContinueStopStatement()
    {
        // Constructor
    }

    public AContinueStopStatement(
        @SuppressWarnings("hiding") TContinue _continue_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") List<?> _deadSection_)
    {
        // Constructor
        setContinue(_continue_);

        setName(_name_);

        setSemicolon(_semicolon_);

        setDeadSection(_deadSection_);

    }

    @Override
    public Object clone()
    {
        return new AContinueStopStatement(
            cloneNode(this._continue_),
            cloneNode(this._name_),
            cloneNode(this._semicolon_),
            cloneList(this._deadSection_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAContinueStopStatement(this);
    }

    public TContinue getContinue()
    {
        return this._continue_;
    }

    public void setContinue(TContinue node)
    {
        if(this._continue_ != null)
        {
            this._continue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._continue_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public LinkedList<PDeadSection> getDeadSection()
    {
        return this._deadSection_;
    }

    public void setDeadSection(List<?> list)
    {
        for(PDeadSection e : this._deadSection_)
        {
            e.parent(null);
        }
        this._deadSection_.clear();

        for(Object obj_e : list)
        {
            PDeadSection e = (PDeadSection) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._deadSection_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._continue_)
            + toString(this._name_)
            + toString(this._semicolon_)
            + toString(this._deadSection_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._continue_ == child)
        {
            this._continue_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._deadSection_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._continue_ == oldChild)
        {
            setContinue((TContinue) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator<PDeadSection> i = this._deadSection_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeadSection) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
