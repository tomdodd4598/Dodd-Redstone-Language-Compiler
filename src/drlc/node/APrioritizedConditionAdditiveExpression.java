/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class APrioritizedConditionAdditiveExpression extends PConditionAdditiveExpression
{
    private PConditionMultiplicativeExpression _conditionMultiplicativeExpression_;

    public APrioritizedConditionAdditiveExpression()
    {
        // Constructor
    }

    public APrioritizedConditionAdditiveExpression(
        @SuppressWarnings("hiding") PConditionMultiplicativeExpression _conditionMultiplicativeExpression_)
    {
        // Constructor
        setConditionMultiplicativeExpression(_conditionMultiplicativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new APrioritizedConditionAdditiveExpression(
            cloneNode(this._conditionMultiplicativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrioritizedConditionAdditiveExpression(this);
    }

    public PConditionMultiplicativeExpression getConditionMultiplicativeExpression()
    {
        return this._conditionMultiplicativeExpression_;
    }

    public void setConditionMultiplicativeExpression(PConditionMultiplicativeExpression node)
    {
        if(this._conditionMultiplicativeExpression_ != null)
        {
            this._conditionMultiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionMultiplicativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionMultiplicativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionMultiplicativeExpression_ == child)
        {
            this._conditionMultiplicativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionMultiplicativeExpression_ == oldChild)
        {
            setConditionMultiplicativeExpression((PConditionMultiplicativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
