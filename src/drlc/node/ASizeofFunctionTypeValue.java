/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ASizeofFunctionTypeValue extends PValue
{
    private TSizeof _sizeof_;
    private TLPar _lPar_;
    private final LinkedList<TAnd> _and_ = new LinkedList<TAnd>();
    private TFun _fun_;
    private TRPar _rPar_;

    public ASizeofFunctionTypeValue()
    {
        // Constructor
    }

    public ASizeofFunctionTypeValue(
        @SuppressWarnings("hiding") TSizeof _sizeof_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") List<?> _and_,
        @SuppressWarnings("hiding") TFun _fun_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setSizeof(_sizeof_);

        setLPar(_lPar_);

        setAnd(_and_);

        setFun(_fun_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ASizeofFunctionTypeValue(
            cloneNode(this._sizeof_),
            cloneNode(this._lPar_),
            cloneList(this._and_),
            cloneNode(this._fun_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASizeofFunctionTypeValue(this);
    }

    public TSizeof getSizeof()
    {
        return this._sizeof_;
    }

    public void setSizeof(TSizeof node)
    {
        if(this._sizeof_ != null)
        {
            this._sizeof_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sizeof_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public LinkedList<TAnd> getAnd()
    {
        return this._and_;
    }

    public void setAnd(List<?> list)
    {
        for(TAnd e : this._and_)
        {
            e.parent(null);
        }
        this._and_.clear();

        for(Object obj_e : list)
        {
            TAnd e = (TAnd) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._and_.add(e);
        }
    }

    public TFun getFun()
    {
        return this._fun_;
    }

    public void setFun(TFun node)
    {
        if(this._fun_ != null)
        {
            this._fun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fun_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sizeof_)
            + toString(this._lPar_)
            + toString(this._and_)
            + toString(this._fun_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sizeof_ == child)
        {
            this._sizeof_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._and_.remove(child))
        {
            return;
        }

        if(this._fun_ == child)
        {
            this._fun_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sizeof_ == oldChild)
        {
            setSizeof((TSizeof) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        for(ListIterator<TAnd> i = this._and_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TAnd) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._fun_ == oldChild)
        {
            setFun((TFun) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
