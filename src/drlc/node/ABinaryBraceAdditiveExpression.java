/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryBraceAdditiveExpression extends PBraceAdditiveExpression
{
    private PBraceAdditiveExpression _braceAdditiveExpression_;
    private PAdditiveBinaryOp _additiveBinaryOp_;
    private PBraceMultiplicativeExpression _braceMultiplicativeExpression_;

    public ABinaryBraceAdditiveExpression()
    {
        // Constructor
    }

    public ABinaryBraceAdditiveExpression(
        @SuppressWarnings("hiding") PBraceAdditiveExpression _braceAdditiveExpression_,
        @SuppressWarnings("hiding") PAdditiveBinaryOp _additiveBinaryOp_,
        @SuppressWarnings("hiding") PBraceMultiplicativeExpression _braceMultiplicativeExpression_)
    {
        // Constructor
        setBraceAdditiveExpression(_braceAdditiveExpression_);

        setAdditiveBinaryOp(_additiveBinaryOp_);

        setBraceMultiplicativeExpression(_braceMultiplicativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryBraceAdditiveExpression(
            cloneNode(this._braceAdditiveExpression_),
            cloneNode(this._additiveBinaryOp_),
            cloneNode(this._braceMultiplicativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryBraceAdditiveExpression(this);
    }

    public PBraceAdditiveExpression getBraceAdditiveExpression()
    {
        return this._braceAdditiveExpression_;
    }

    public void setBraceAdditiveExpression(PBraceAdditiveExpression node)
    {
        if(this._braceAdditiveExpression_ != null)
        {
            this._braceAdditiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceAdditiveExpression_ = node;
    }

    public PAdditiveBinaryOp getAdditiveBinaryOp()
    {
        return this._additiveBinaryOp_;
    }

    public void setAdditiveBinaryOp(PAdditiveBinaryOp node)
    {
        if(this._additiveBinaryOp_ != null)
        {
            this._additiveBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveBinaryOp_ = node;
    }

    public PBraceMultiplicativeExpression getBraceMultiplicativeExpression()
    {
        return this._braceMultiplicativeExpression_;
    }

    public void setBraceMultiplicativeExpression(PBraceMultiplicativeExpression node)
    {
        if(this._braceMultiplicativeExpression_ != null)
        {
            this._braceMultiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._braceMultiplicativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._braceAdditiveExpression_)
            + toString(this._additiveBinaryOp_)
            + toString(this._braceMultiplicativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._braceAdditiveExpression_ == child)
        {
            this._braceAdditiveExpression_ = null;
            return;
        }

        if(this._additiveBinaryOp_ == child)
        {
            this._additiveBinaryOp_ = null;
            return;
        }

        if(this._braceMultiplicativeExpression_ == child)
        {
            this._braceMultiplicativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._braceAdditiveExpression_ == oldChild)
        {
            setBraceAdditiveExpression((PBraceAdditiveExpression) newChild);
            return;
        }

        if(this._additiveBinaryOp_ == oldChild)
        {
            setAdditiveBinaryOp((PAdditiveBinaryOp) newChild);
            return;
        }

        if(this._braceMultiplicativeExpression_ == oldChild)
        {
            setBraceMultiplicativeExpression((PBraceMultiplicativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
