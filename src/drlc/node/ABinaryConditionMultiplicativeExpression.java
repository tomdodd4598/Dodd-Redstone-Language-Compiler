/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionMultiplicativeExpression extends PConditionMultiplicativeExpression
{
    private PConditionMultiplicativeExpression _conditionMultiplicativeExpression_;
    private PMultiplicativeBinaryOp _multiplicativeBinaryOp_;
    private PConditionShiftExpression _conditionShiftExpression_;

    public ABinaryConditionMultiplicativeExpression()
    {
        // Constructor
    }

    public ABinaryConditionMultiplicativeExpression(
        @SuppressWarnings("hiding") PConditionMultiplicativeExpression _conditionMultiplicativeExpression_,
        @SuppressWarnings("hiding") PMultiplicativeBinaryOp _multiplicativeBinaryOp_,
        @SuppressWarnings("hiding") PConditionShiftExpression _conditionShiftExpression_)
    {
        // Constructor
        setConditionMultiplicativeExpression(_conditionMultiplicativeExpression_);

        setMultiplicativeBinaryOp(_multiplicativeBinaryOp_);

        setConditionShiftExpression(_conditionShiftExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionMultiplicativeExpression(
            cloneNode(this._conditionMultiplicativeExpression_),
            cloneNode(this._multiplicativeBinaryOp_),
            cloneNode(this._conditionShiftExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionMultiplicativeExpression(this);
    }

    public PConditionMultiplicativeExpression getConditionMultiplicativeExpression()
    {
        return this._conditionMultiplicativeExpression_;
    }

    public void setConditionMultiplicativeExpression(PConditionMultiplicativeExpression node)
    {
        if(this._conditionMultiplicativeExpression_ != null)
        {
            this._conditionMultiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionMultiplicativeExpression_ = node;
    }

    public PMultiplicativeBinaryOp getMultiplicativeBinaryOp()
    {
        return this._multiplicativeBinaryOp_;
    }

    public void setMultiplicativeBinaryOp(PMultiplicativeBinaryOp node)
    {
        if(this._multiplicativeBinaryOp_ != null)
        {
            this._multiplicativeBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeBinaryOp_ = node;
    }

    public PConditionShiftExpression getConditionShiftExpression()
    {
        return this._conditionShiftExpression_;
    }

    public void setConditionShiftExpression(PConditionShiftExpression node)
    {
        if(this._conditionShiftExpression_ != null)
        {
            this._conditionShiftExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionShiftExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionMultiplicativeExpression_)
            + toString(this._multiplicativeBinaryOp_)
            + toString(this._conditionShiftExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionMultiplicativeExpression_ == child)
        {
            this._conditionMultiplicativeExpression_ = null;
            return;
        }

        if(this._multiplicativeBinaryOp_ == child)
        {
            this._multiplicativeBinaryOp_ = null;
            return;
        }

        if(this._conditionShiftExpression_ == child)
        {
            this._conditionShiftExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionMultiplicativeExpression_ == oldChild)
        {
            setConditionMultiplicativeExpression((PConditionMultiplicativeExpression) newChild);
            return;
        }

        if(this._multiplicativeBinaryOp_ == oldChild)
        {
            setMultiplicativeBinaryOp((PMultiplicativeBinaryOp) newChild);
            return;
        }

        if(this._conditionShiftExpression_ == oldChild)
        {
            setConditionShiftExpression((PConditionShiftExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
