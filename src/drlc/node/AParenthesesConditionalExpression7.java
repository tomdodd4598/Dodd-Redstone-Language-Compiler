/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AParenthesesConditionalExpression7 extends PConditionalExpression7
{
    private PParenthesesExpression _parenthesesExpression_;

    public AParenthesesConditionalExpression7()
    {
        // Constructor
    }

    public AParenthesesConditionalExpression7(
        @SuppressWarnings("hiding") PParenthesesExpression _parenthesesExpression_)
    {
        // Constructor
        setParenthesesExpression(_parenthesesExpression_);

    }

    @Override
    public Object clone()
    {
        return new AParenthesesConditionalExpression7(
            cloneNode(this._parenthesesExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParenthesesConditionalExpression7(this);
    }

    public PParenthesesExpression getParenthesesExpression()
    {
        return this._parenthesesExpression_;
    }

    public void setParenthesesExpression(PParenthesesExpression node)
    {
        if(this._parenthesesExpression_ != null)
        {
            this._parenthesesExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenthesesExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._parenthesesExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._parenthesesExpression_ == child)
        {
            this._parenthesesExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._parenthesesExpression_ == oldChild)
        {
            setParenthesesExpression((PParenthesesExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
