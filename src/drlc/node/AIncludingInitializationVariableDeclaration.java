/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AIncludingInitializationVariableDeclaration extends PVariableDeclaration
{
    private final LinkedList<TVariableModifier> _variableModifier_ = new LinkedList<TVariableModifier>();
    private TVar _var_;
    private PDeclarator _declarator_;
    private TEquals _equals_;
    private PInitializationExpression _initializationExpression_;
    private final LinkedList<TSemicolon> _semicolon_ = new LinkedList<TSemicolon>();

    public AIncludingInitializationVariableDeclaration()
    {
        // Constructor
    }

    public AIncludingInitializationVariableDeclaration(
        @SuppressWarnings("hiding") List<?> _variableModifier_,
        @SuppressWarnings("hiding") TVar _var_,
        @SuppressWarnings("hiding") PDeclarator _declarator_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PInitializationExpression _initializationExpression_,
        @SuppressWarnings("hiding") List<?> _semicolon_)
    {
        // Constructor
        setVariableModifier(_variableModifier_);

        setVar(_var_);

        setDeclarator(_declarator_);

        setEquals(_equals_);

        setInitializationExpression(_initializationExpression_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AIncludingInitializationVariableDeclaration(
            cloneList(this._variableModifier_),
            cloneNode(this._var_),
            cloneNode(this._declarator_),
            cloneNode(this._equals_),
            cloneNode(this._initializationExpression_),
            cloneList(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIncludingInitializationVariableDeclaration(this);
    }

    public LinkedList<TVariableModifier> getVariableModifier()
    {
        return this._variableModifier_;
    }

    public void setVariableModifier(List<?> list)
    {
        for(TVariableModifier e : this._variableModifier_)
        {
            e.parent(null);
        }
        this._variableModifier_.clear();

        for(Object obj_e : list)
        {
            TVariableModifier e = (TVariableModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableModifier_.add(e);
        }
    }

    public TVar getVar()
    {
        return this._var_;
    }

    public void setVar(TVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return this._declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(this._declarator_ != null)
        {
            this._declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarator_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PInitializationExpression getInitializationExpression()
    {
        return this._initializationExpression_;
    }

    public void setInitializationExpression(PInitializationExpression node)
    {
        if(this._initializationExpression_ != null)
        {
            this._initializationExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initializationExpression_ = node;
    }

    public LinkedList<TSemicolon> getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(List<?> list)
    {
        for(TSemicolon e : this._semicolon_)
        {
            e.parent(null);
        }
        this._semicolon_.clear();

        for(Object obj_e : list)
        {
            TSemicolon e = (TSemicolon) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._semicolon_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variableModifier_)
            + toString(this._var_)
            + toString(this._declarator_)
            + toString(this._equals_)
            + toString(this._initializationExpression_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variableModifier_.remove(child))
        {
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._declarator_ == child)
        {
            this._declarator_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._initializationExpression_ == child)
        {
            this._initializationExpression_ = null;
            return;
        }

        if(this._semicolon_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TVariableModifier> i = this._variableModifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TVariableModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._var_ == oldChild)
        {
            setVar((TVar) newChild);
            return;
        }

        if(this._declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._initializationExpression_ == oldChild)
        {
            setInitializationExpression((PInitializationExpression) newChild);
            return;
        }

        for(ListIterator<TSemicolon> i = this._semicolon_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSemicolon) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
