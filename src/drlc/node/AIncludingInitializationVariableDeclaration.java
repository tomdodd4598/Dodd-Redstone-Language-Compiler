/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AIncludingInitializationVariableDeclaration extends PVariableDeclaration
{
    private final LinkedList<TModifier> _modifier_ = new LinkedList<TModifier>();
    private TVar _var_;
    private PDeclarator _declarator_;
    private TEquals _equals_;
    private PInitializationExpression _initializationExpression_;
    private PSeparator _separator_;

    public AIncludingInitializationVariableDeclaration()
    {
        // Constructor
    }

    public AIncludingInitializationVariableDeclaration(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") TVar _var_,
        @SuppressWarnings("hiding") PDeclarator _declarator_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PInitializationExpression _initializationExpression_,
        @SuppressWarnings("hiding") PSeparator _separator_)
    {
        // Constructor
        setModifier(_modifier_);

        setVar(_var_);

        setDeclarator(_declarator_);

        setEquals(_equals_);

        setInitializationExpression(_initializationExpression_);

        setSeparator(_separator_);

    }

    @Override
    public Object clone()
    {
        return new AIncludingInitializationVariableDeclaration(
            cloneList(this._modifier_),
            cloneNode(this._var_),
            cloneNode(this._declarator_),
            cloneNode(this._equals_),
            cloneNode(this._initializationExpression_),
            cloneNode(this._separator_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIncludingInitializationVariableDeclaration(this);
    }

    public LinkedList<TModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<?> list)
    {
        for(TModifier e : this._modifier_)
        {
            e.parent(null);
        }
        this._modifier_.clear();

        for(Object obj_e : list)
        {
            TModifier e = (TModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._modifier_.add(e);
        }
    }

    public TVar getVar()
    {
        return this._var_;
    }

    public void setVar(TVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return this._declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(this._declarator_ != null)
        {
            this._declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarator_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PInitializationExpression getInitializationExpression()
    {
        return this._initializationExpression_;
    }

    public void setInitializationExpression(PInitializationExpression node)
    {
        if(this._initializationExpression_ != null)
        {
            this._initializationExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initializationExpression_ = node;
    }

    public PSeparator getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(PSeparator node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._var_)
            + toString(this._declarator_)
            + toString(this._equals_)
            + toString(this._initializationExpression_)
            + toString(this._separator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._declarator_ == child)
        {
            this._declarator_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._initializationExpression_ == child)
        {
            this._initializationExpression_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._var_ == oldChild)
        {
            setVar((TVar) newChild);
            return;
        }

        if(this._declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._initializationExpression_ == oldChild)
        {
            setInitializationExpression((PInitializationExpression) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((PSeparator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
