/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionEqualityExpression extends PConditionEqualityExpression
{
    private PConditionEqualityExpression _conditionEqualityExpression_;
    private PEqualityBinaryOp _equalityBinaryOp_;
    private PConditionComparativeExpression _conditionComparativeExpression_;

    public ABinaryConditionEqualityExpression()
    {
        // Constructor
    }

    public ABinaryConditionEqualityExpression(
        @SuppressWarnings("hiding") PConditionEqualityExpression _conditionEqualityExpression_,
        @SuppressWarnings("hiding") PEqualityBinaryOp _equalityBinaryOp_,
        @SuppressWarnings("hiding") PConditionComparativeExpression _conditionComparativeExpression_)
    {
        // Constructor
        setConditionEqualityExpression(_conditionEqualityExpression_);

        setEqualityBinaryOp(_equalityBinaryOp_);

        setConditionComparativeExpression(_conditionComparativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionEqualityExpression(
            cloneNode(this._conditionEqualityExpression_),
            cloneNode(this._equalityBinaryOp_),
            cloneNode(this._conditionComparativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionEqualityExpression(this);
    }

    public PConditionEqualityExpression getConditionEqualityExpression()
    {
        return this._conditionEqualityExpression_;
    }

    public void setConditionEqualityExpression(PConditionEqualityExpression node)
    {
        if(this._conditionEqualityExpression_ != null)
        {
            this._conditionEqualityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionEqualityExpression_ = node;
    }

    public PEqualityBinaryOp getEqualityBinaryOp()
    {
        return this._equalityBinaryOp_;
    }

    public void setEqualityBinaryOp(PEqualityBinaryOp node)
    {
        if(this._equalityBinaryOp_ != null)
        {
            this._equalityBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalityBinaryOp_ = node;
    }

    public PConditionComparativeExpression getConditionComparativeExpression()
    {
        return this._conditionComparativeExpression_;
    }

    public void setConditionComparativeExpression(PConditionComparativeExpression node)
    {
        if(this._conditionComparativeExpression_ != null)
        {
            this._conditionComparativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionComparativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionEqualityExpression_)
            + toString(this._equalityBinaryOp_)
            + toString(this._conditionComparativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionEqualityExpression_ == child)
        {
            this._conditionEqualityExpression_ = null;
            return;
        }

        if(this._equalityBinaryOp_ == child)
        {
            this._equalityBinaryOp_ = null;
            return;
        }

        if(this._conditionComparativeExpression_ == child)
        {
            this._conditionComparativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionEqualityExpression_ == oldChild)
        {
            setConditionEqualityExpression((PConditionEqualityExpression) newChild);
            return;
        }

        if(this._equalityBinaryOp_ == oldChild)
        {
            setEqualityBinaryOp((PEqualityBinaryOp) newChild);
            return;
        }

        if(this._conditionComparativeExpression_ == oldChild)
        {
            setConditionComparativeExpression((PConditionComparativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
