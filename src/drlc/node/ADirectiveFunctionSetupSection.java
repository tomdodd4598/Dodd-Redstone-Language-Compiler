/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADirectiveFunctionSetupSection extends PSetupSection
{
    private THash _hash_;
    private TName _name_;
    private PExpressionList _expressionList_;
    private TEol _eol_;
    private PDirectiveEnd _directiveEnd_;

    public ADirectiveFunctionSetupSection()
    {
        // Constructor
    }

    public ADirectiveFunctionSetupSection(
        @SuppressWarnings("hiding") THash _hash_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") PExpressionList _expressionList_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") PDirectiveEnd _directiveEnd_)
    {
        // Constructor
        setHash(_hash_);

        setName(_name_);

        setExpressionList(_expressionList_);

        setEol(_eol_);

        setDirectiveEnd(_directiveEnd_);

    }

    @Override
    public Object clone()
    {
        return new ADirectiveFunctionSetupSection(
            cloneNode(this._hash_),
            cloneNode(this._name_),
            cloneNode(this._expressionList_),
            cloneNode(this._eol_),
            cloneNode(this._directiveEnd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADirectiveFunctionSetupSection(this);
    }

    public THash getHash()
    {
        return this._hash_;
    }

    public void setHash(THash node)
    {
        if(this._hash_ != null)
        {
            this._hash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hash_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PExpressionList getExpressionList()
    {
        return this._expressionList_;
    }

    public void setExpressionList(PExpressionList node)
    {
        if(this._expressionList_ != null)
        {
            this._expressionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionList_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public PDirectiveEnd getDirectiveEnd()
    {
        return this._directiveEnd_;
    }

    public void setDirectiveEnd(PDirectiveEnd node)
    {
        if(this._directiveEnd_ != null)
        {
            this._directiveEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._directiveEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._hash_)
            + toString(this._name_)
            + toString(this._expressionList_)
            + toString(this._eol_)
            + toString(this._directiveEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._hash_ == child)
        {
            this._hash_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._expressionList_ == child)
        {
            this._expressionList_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._directiveEnd_ == child)
        {
            this._directiveEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._hash_ == oldChild)
        {
            setHash((THash) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._expressionList_ == oldChild)
        {
            setExpressionList((PExpressionList) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        if(this._directiveEnd_ == oldChild)
        {
            setDirectiveEnd((PDirectiveEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
