/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionalExpression3 extends PConditionalExpression3
{
    private PConditionalExpression3 _conditionalExpression3_;
    private PAdditiveBinaryOp _additiveBinaryOp_;
    private PConditionalExpression4 _conditionalExpression4_;

    public ABinaryConditionalExpression3()
    {
        // Constructor
    }

    public ABinaryConditionalExpression3(
        @SuppressWarnings("hiding") PConditionalExpression3 _conditionalExpression3_,
        @SuppressWarnings("hiding") PAdditiveBinaryOp _additiveBinaryOp_,
        @SuppressWarnings("hiding") PConditionalExpression4 _conditionalExpression4_)
    {
        // Constructor
        setConditionalExpression3(_conditionalExpression3_);

        setAdditiveBinaryOp(_additiveBinaryOp_);

        setConditionalExpression4(_conditionalExpression4_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionalExpression3(
            cloneNode(this._conditionalExpression3_),
            cloneNode(this._additiveBinaryOp_),
            cloneNode(this._conditionalExpression4_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionalExpression3(this);
    }

    public PConditionalExpression3 getConditionalExpression3()
    {
        return this._conditionalExpression3_;
    }

    public void setConditionalExpression3(PConditionalExpression3 node)
    {
        if(this._conditionalExpression3_ != null)
        {
            this._conditionalExpression3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression3_ = node;
    }

    public PAdditiveBinaryOp getAdditiveBinaryOp()
    {
        return this._additiveBinaryOp_;
    }

    public void setAdditiveBinaryOp(PAdditiveBinaryOp node)
    {
        if(this._additiveBinaryOp_ != null)
        {
            this._additiveBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveBinaryOp_ = node;
    }

    public PConditionalExpression4 getConditionalExpression4()
    {
        return this._conditionalExpression4_;
    }

    public void setConditionalExpression4(PConditionalExpression4 node)
    {
        if(this._conditionalExpression4_ != null)
        {
            this._conditionalExpression4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalExpression3_)
            + toString(this._additiveBinaryOp_)
            + toString(this._conditionalExpression4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalExpression3_ == child)
        {
            this._conditionalExpression3_ = null;
            return;
        }

        if(this._additiveBinaryOp_ == child)
        {
            this._additiveBinaryOp_ = null;
            return;
        }

        if(this._conditionalExpression4_ == child)
        {
            this._conditionalExpression4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalExpression3_ == oldChild)
        {
            setConditionalExpression3((PConditionalExpression3) newChild);
            return;
        }

        if(this._additiveBinaryOp_ == oldChild)
        {
            setAdditiveBinaryOp((PAdditiveBinaryOp) newChild);
            return;
        }

        if(this._conditionalExpression4_ == oldChild)
        {
            setConditionalExpression4((PConditionalExpression4) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
