/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ATernaryTernaryExpression extends PTernaryExpression
{
    private PCastExpression _castExpression_;
    private TQuestionMark _questionMark_;
    private PExpression _expression_;
    private TColon _colon_;
    private PTernaryExpression _ternaryExpression_;

    public ATernaryTernaryExpression()
    {
        // Constructor
    }

    public ATernaryTernaryExpression(
        @SuppressWarnings("hiding") PCastExpression _castExpression_,
        @SuppressWarnings("hiding") TQuestionMark _questionMark_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PTernaryExpression _ternaryExpression_)
    {
        // Constructor
        setCastExpression(_castExpression_);

        setQuestionMark(_questionMark_);

        setExpression(_expression_);

        setColon(_colon_);

        setTernaryExpression(_ternaryExpression_);

    }

    @Override
    public Object clone()
    {
        return new ATernaryTernaryExpression(
            cloneNode(this._castExpression_),
            cloneNode(this._questionMark_),
            cloneNode(this._expression_),
            cloneNode(this._colon_),
            cloneNode(this._ternaryExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATernaryTernaryExpression(this);
    }

    public PCastExpression getCastExpression()
    {
        return this._castExpression_;
    }

    public void setCastExpression(PCastExpression node)
    {
        if(this._castExpression_ != null)
        {
            this._castExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._castExpression_ = node;
    }

    public TQuestionMark getQuestionMark()
    {
        return this._questionMark_;
    }

    public void setQuestionMark(TQuestionMark node)
    {
        if(this._questionMark_ != null)
        {
            this._questionMark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._questionMark_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PTernaryExpression getTernaryExpression()
    {
        return this._ternaryExpression_;
    }

    public void setTernaryExpression(PTernaryExpression node)
    {
        if(this._ternaryExpression_ != null)
        {
            this._ternaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ternaryExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._castExpression_)
            + toString(this._questionMark_)
            + toString(this._expression_)
            + toString(this._colon_)
            + toString(this._ternaryExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._castExpression_ == child)
        {
            this._castExpression_ = null;
            return;
        }

        if(this._questionMark_ == child)
        {
            this._questionMark_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._ternaryExpression_ == child)
        {
            this._ternaryExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._castExpression_ == oldChild)
        {
            setCastExpression((PCastExpression) newChild);
            return;
        }

        if(this._questionMark_ == oldChild)
        {
            setQuestionMark((TQuestionMark) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._ternaryExpression_ == oldChild)
        {
            setTernaryExpression((PTernaryExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
