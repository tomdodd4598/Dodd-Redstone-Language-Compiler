/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AAddressOfImplicitInitialisationArray extends PImplicitInitialisationArray
{
    private TAddressOf _addressOf_;
    private TName _name_;
    private final LinkedList<PArrayBrackets> _arrayBrackets_ = new LinkedList<PArrayBrackets>();

    public AAddressOfImplicitInitialisationArray()
    {
        // Constructor
    }

    public AAddressOfImplicitInitialisationArray(
        @SuppressWarnings("hiding") TAddressOf _addressOf_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") List<?> _arrayBrackets_)
    {
        // Constructor
        setAddressOf(_addressOf_);

        setName(_name_);

        setArrayBrackets(_arrayBrackets_);

    }

    @Override
    public Object clone()
    {
        return new AAddressOfImplicitInitialisationArray(
            cloneNode(this._addressOf_),
            cloneNode(this._name_),
            cloneList(this._arrayBrackets_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddressOfImplicitInitialisationArray(this);
    }

    public TAddressOf getAddressOf()
    {
        return this._addressOf_;
    }

    public void setAddressOf(TAddressOf node)
    {
        if(this._addressOf_ != null)
        {
            this._addressOf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addressOf_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PArrayBrackets> getArrayBrackets()
    {
        return this._arrayBrackets_;
    }

    public void setArrayBrackets(List<?> list)
    {
        for(PArrayBrackets e : this._arrayBrackets_)
        {
            e.parent(null);
        }
        this._arrayBrackets_.clear();

        for(Object obj_e : list)
        {
            PArrayBrackets e = (PArrayBrackets) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._arrayBrackets_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._addressOf_)
            + toString(this._name_)
            + toString(this._arrayBrackets_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._addressOf_ == child)
        {
            this._addressOf_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._arrayBrackets_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._addressOf_ == oldChild)
        {
            setAddressOf((TAddressOf) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        for(ListIterator<PArrayBrackets> i = this._arrayBrackets_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArrayBrackets) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
