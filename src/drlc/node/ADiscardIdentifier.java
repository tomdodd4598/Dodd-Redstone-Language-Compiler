/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ADiscardIdentifier extends PIdentifier
{
    private TDiscard _discard_;

    public ADiscardIdentifier()
    {
        // Constructor
    }

    public ADiscardIdentifier(
        @SuppressWarnings("hiding") TDiscard _discard_)
    {
        // Constructor
        setDiscard(_discard_);

    }

    @Override
    public Object clone()
    {
        return new ADiscardIdentifier(
            cloneNode(this._discard_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADiscardIdentifier(this);
    }

    public TDiscard getDiscard()
    {
        return this._discard_;
    }

    public void setDiscard(TDiscard node)
    {
        if(this._discard_ != null)
        {
            this._discard_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._discard_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._discard_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._discard_ == child)
        {
            this._discard_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._discard_ == oldChild)
        {
            setDiscard((TDiscard) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
