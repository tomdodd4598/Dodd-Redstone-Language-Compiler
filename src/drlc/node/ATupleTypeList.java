/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ATupleTypeList extends PTupleTypeList
{
    private final LinkedList<PTupleTypeListHead> _tupleTypeListHead_ = new LinkedList<PTupleTypeListHead>();
    private PType _type_;

    public ATupleTypeList()
    {
        // Constructor
    }

    public ATupleTypeList(
        @SuppressWarnings("hiding") List<?> _tupleTypeListHead_,
        @SuppressWarnings("hiding") PType _type_)
    {
        // Constructor
        setTupleTypeListHead(_tupleTypeListHead_);

        setType(_type_);

    }

    @Override
    public Object clone()
    {
        return new ATupleTypeList(
            cloneList(this._tupleTypeListHead_),
            cloneNode(this._type_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATupleTypeList(this);
    }

    public LinkedList<PTupleTypeListHead> getTupleTypeListHead()
    {
        return this._tupleTypeListHead_;
    }

    public void setTupleTypeListHead(List<?> list)
    {
        for(PTupleTypeListHead e : this._tupleTypeListHead_)
        {
            e.parent(null);
        }
        this._tupleTypeListHead_.clear();

        for(Object obj_e : list)
        {
            PTupleTypeListHead e = (PTupleTypeListHead) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._tupleTypeListHead_.add(e);
        }
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tupleTypeListHead_)
            + toString(this._type_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tupleTypeListHead_.remove(child))
        {
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTupleTypeListHead> i = this._tupleTypeListHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTupleTypeListHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
