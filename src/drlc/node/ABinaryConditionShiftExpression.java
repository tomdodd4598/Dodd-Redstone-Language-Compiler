/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionShiftExpression extends PConditionShiftExpression
{
    private PConditionShiftExpression _conditionShiftExpression_;
    private PShiftBinaryOp _shiftBinaryOp_;
    private PConditionUnaryExpression _conditionUnaryExpression_;

    public ABinaryConditionShiftExpression()
    {
        // Constructor
    }

    public ABinaryConditionShiftExpression(
        @SuppressWarnings("hiding") PConditionShiftExpression _conditionShiftExpression_,
        @SuppressWarnings("hiding") PShiftBinaryOp _shiftBinaryOp_,
        @SuppressWarnings("hiding") PConditionUnaryExpression _conditionUnaryExpression_)
    {
        // Constructor
        setConditionShiftExpression(_conditionShiftExpression_);

        setShiftBinaryOp(_shiftBinaryOp_);

        setConditionUnaryExpression(_conditionUnaryExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionShiftExpression(
            cloneNode(this._conditionShiftExpression_),
            cloneNode(this._shiftBinaryOp_),
            cloneNode(this._conditionUnaryExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionShiftExpression(this);
    }

    public PConditionShiftExpression getConditionShiftExpression()
    {
        return this._conditionShiftExpression_;
    }

    public void setConditionShiftExpression(PConditionShiftExpression node)
    {
        if(this._conditionShiftExpression_ != null)
        {
            this._conditionShiftExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionShiftExpression_ = node;
    }

    public PShiftBinaryOp getShiftBinaryOp()
    {
        return this._shiftBinaryOp_;
    }

    public void setShiftBinaryOp(PShiftBinaryOp node)
    {
        if(this._shiftBinaryOp_ != null)
        {
            this._shiftBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftBinaryOp_ = node;
    }

    public PConditionUnaryExpression getConditionUnaryExpression()
    {
        return this._conditionUnaryExpression_;
    }

    public void setConditionUnaryExpression(PConditionUnaryExpression node)
    {
        if(this._conditionUnaryExpression_ != null)
        {
            this._conditionUnaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionUnaryExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionShiftExpression_)
            + toString(this._shiftBinaryOp_)
            + toString(this._conditionUnaryExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionShiftExpression_ == child)
        {
            this._conditionShiftExpression_ = null;
            return;
        }

        if(this._shiftBinaryOp_ == child)
        {
            this._shiftBinaryOp_ = null;
            return;
        }

        if(this._conditionUnaryExpression_ == child)
        {
            this._conditionUnaryExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionShiftExpression_ == oldChild)
        {
            setConditionShiftExpression((PConditionShiftExpression) newChild);
            return;
        }

        if(this._shiftBinaryOp_ == oldChild)
        {
            setShiftBinaryOp((PShiftBinaryOp) newChild);
            return;
        }

        if(this._conditionUnaryExpression_ == oldChild)
        {
            setConditionUnaryExpression((PConditionUnaryExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
