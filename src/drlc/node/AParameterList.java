/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AParameterList extends PParameterList
{
    private final LinkedList<TModifier> _modifier_ = new LinkedList<TModifier>();
    private PParameter _parameter_;
    private PType _type_;
    private final LinkedList<PParameterListTail> _parameterListTail_ = new LinkedList<PParameterListTail>();
    private TComma _comma_;

    public AParameterList()
    {
        // Constructor
    }

    public AParameterList(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") PParameter _parameter_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") List<?> _parameterListTail_,
        @SuppressWarnings("hiding") TComma _comma_)
    {
        // Constructor
        setModifier(_modifier_);

        setParameter(_parameter_);

        setType(_type_);

        setParameterListTail(_parameterListTail_);

        setComma(_comma_);

    }

    @Override
    public Object clone()
    {
        return new AParameterList(
            cloneList(this._modifier_),
            cloneNode(this._parameter_),
            cloneNode(this._type_),
            cloneList(this._parameterListTail_),
            cloneNode(this._comma_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParameterList(this);
    }

    public LinkedList<TModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<?> list)
    {
        for(TModifier e : this._modifier_)
        {
            e.parent(null);
        }
        this._modifier_.clear();

        for(Object obj_e : list)
        {
            TModifier e = (TModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._modifier_.add(e);
        }
    }

    public PParameter getParameter()
    {
        return this._parameter_;
    }

    public void setParameter(PParameter node)
    {
        if(this._parameter_ != null)
        {
            this._parameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameter_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public LinkedList<PParameterListTail> getParameterListTail()
    {
        return this._parameterListTail_;
    }

    public void setParameterListTail(List<?> list)
    {
        for(PParameterListTail e : this._parameterListTail_)
        {
            e.parent(null);
        }
        this._parameterListTail_.clear();

        for(Object obj_e : list)
        {
            PParameterListTail e = (PParameterListTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._parameterListTail_.add(e);
        }
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._parameter_)
            + toString(this._type_)
            + toString(this._parameterListTail_)
            + toString(this._comma_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._parameter_ == child)
        {
            this._parameter_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._parameterListTail_.remove(child))
        {
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._parameter_ == oldChild)
        {
            setParameter((PParameter) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        for(ListIterator<PParameterListTail> i = this._parameterListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParameterListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
