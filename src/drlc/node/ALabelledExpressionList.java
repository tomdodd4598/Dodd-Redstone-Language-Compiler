/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ALabelledExpressionList extends PLabelledExpressionList
{
    private PLabelledExpression _labelledExpression_;
    private final LinkedList<PLabelledExpressionListTail> _labelledExpressionListTail_ = new LinkedList<PLabelledExpressionListTail>();
    private TComma _comma_;

    public ALabelledExpressionList()
    {
        // Constructor
    }

    public ALabelledExpressionList(
        @SuppressWarnings("hiding") PLabelledExpression _labelledExpression_,
        @SuppressWarnings("hiding") List<?> _labelledExpressionListTail_,
        @SuppressWarnings("hiding") TComma _comma_)
    {
        // Constructor
        setLabelledExpression(_labelledExpression_);

        setLabelledExpressionListTail(_labelledExpressionListTail_);

        setComma(_comma_);

    }

    @Override
    public Object clone()
    {
        return new ALabelledExpressionList(
            cloneNode(this._labelledExpression_),
            cloneList(this._labelledExpressionListTail_),
            cloneNode(this._comma_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALabelledExpressionList(this);
    }

    public PLabelledExpression getLabelledExpression()
    {
        return this._labelledExpression_;
    }

    public void setLabelledExpression(PLabelledExpression node)
    {
        if(this._labelledExpression_ != null)
        {
            this._labelledExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._labelledExpression_ = node;
    }

    public LinkedList<PLabelledExpressionListTail> getLabelledExpressionListTail()
    {
        return this._labelledExpressionListTail_;
    }

    public void setLabelledExpressionListTail(List<?> list)
    {
        for(PLabelledExpressionListTail e : this._labelledExpressionListTail_)
        {
            e.parent(null);
        }
        this._labelledExpressionListTail_.clear();

        for(Object obj_e : list)
        {
            PLabelledExpressionListTail e = (PLabelledExpressionListTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._labelledExpressionListTail_.add(e);
        }
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._labelledExpression_)
            + toString(this._labelledExpressionListTail_)
            + toString(this._comma_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._labelledExpression_ == child)
        {
            this._labelledExpression_ = null;
            return;
        }

        if(this._labelledExpressionListTail_.remove(child))
        {
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._labelledExpression_ == oldChild)
        {
            setLabelledExpression((PLabelledExpression) newChild);
            return;
        }

        for(ListIterator<PLabelledExpressionListTail> i = this._labelledExpressionListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLabelledExpressionListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
