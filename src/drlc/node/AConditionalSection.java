/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AConditionalSection extends PConditionalSection
{
    private PConditionalStartSection _conditionalStartSection_;
    private final LinkedList<PConditionalMiddleSection> _conditionalMiddleSection_ = new LinkedList<PConditionalMiddleSection>();
    private PElseSection _elseSection_;

    public AConditionalSection()
    {
        // Constructor
    }

    public AConditionalSection(
        @SuppressWarnings("hiding") PConditionalStartSection _conditionalStartSection_,
        @SuppressWarnings("hiding") List<?> _conditionalMiddleSection_,
        @SuppressWarnings("hiding") PElseSection _elseSection_)
    {
        // Constructor
        setConditionalStartSection(_conditionalStartSection_);

        setConditionalMiddleSection(_conditionalMiddleSection_);

        setElseSection(_elseSection_);

    }

    @Override
    public Object clone()
    {
        return new AConditionalSection(
            cloneNode(this._conditionalStartSection_),
            cloneList(this._conditionalMiddleSection_),
            cloneNode(this._elseSection_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionalSection(this);
    }

    public PConditionalStartSection getConditionalStartSection()
    {
        return this._conditionalStartSection_;
    }

    public void setConditionalStartSection(PConditionalStartSection node)
    {
        if(this._conditionalStartSection_ != null)
        {
            this._conditionalStartSection_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalStartSection_ = node;
    }

    public LinkedList<PConditionalMiddleSection> getConditionalMiddleSection()
    {
        return this._conditionalMiddleSection_;
    }

    public void setConditionalMiddleSection(List<?> list)
    {
        for(PConditionalMiddleSection e : this._conditionalMiddleSection_)
        {
            e.parent(null);
        }
        this._conditionalMiddleSection_.clear();

        for(Object obj_e : list)
        {
            PConditionalMiddleSection e = (PConditionalMiddleSection) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._conditionalMiddleSection_.add(e);
        }
    }

    public PElseSection getElseSection()
    {
        return this._elseSection_;
    }

    public void setElseSection(PElseSection node)
    {
        if(this._elseSection_ != null)
        {
            this._elseSection_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseSection_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalStartSection_)
            + toString(this._conditionalMiddleSection_)
            + toString(this._elseSection_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalStartSection_ == child)
        {
            this._conditionalStartSection_ = null;
            return;
        }

        if(this._conditionalMiddleSection_.remove(child))
        {
            return;
        }

        if(this._elseSection_ == child)
        {
            this._elseSection_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalStartSection_ == oldChild)
        {
            setConditionalStartSection((PConditionalStartSection) newChild);
            return;
        }

        for(ListIterator<PConditionalMiddleSection> i = this._conditionalMiddleSection_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PConditionalMiddleSection) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseSection_ == oldChild)
        {
            setElseSection((PElseSection) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
