/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import java.util.*;
import drlc.analysis.*;

@SuppressWarnings("nls")
public final class AConditionalSection extends PConditionalSection
{
    private PConditionalStartBlock _conditionalStartBlock_;
    private final LinkedList<PConditionalMiddleBlock> _conditionalMiddleBlock_ = new LinkedList<PConditionalMiddleBlock>();
    private PElseBlock _elseBlock_;

    public AConditionalSection()
    {
        // Constructor
    }

    public AConditionalSection(
        @SuppressWarnings("hiding") PConditionalStartBlock _conditionalStartBlock_,
        @SuppressWarnings("hiding") List<?> _conditionalMiddleBlock_,
        @SuppressWarnings("hiding") PElseBlock _elseBlock_)
    {
        // Constructor
        setConditionalStartBlock(_conditionalStartBlock_);

        setConditionalMiddleBlock(_conditionalMiddleBlock_);

        setElseBlock(_elseBlock_);

    }

    @Override
    public Object clone()
    {
        return new AConditionalSection(
            cloneNode(this._conditionalStartBlock_),
            cloneList(this._conditionalMiddleBlock_),
            cloneNode(this._elseBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionalSection(this);
    }

    public PConditionalStartBlock getConditionalStartBlock()
    {
        return this._conditionalStartBlock_;
    }

    public void setConditionalStartBlock(PConditionalStartBlock node)
    {
        if(this._conditionalStartBlock_ != null)
        {
            this._conditionalStartBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalStartBlock_ = node;
    }

    public LinkedList<PConditionalMiddleBlock> getConditionalMiddleBlock()
    {
        return this._conditionalMiddleBlock_;
    }

    public void setConditionalMiddleBlock(List<?> list)
    {
        for(PConditionalMiddleBlock e : this._conditionalMiddleBlock_)
        {
            e.parent(null);
        }
        this._conditionalMiddleBlock_.clear();

        for(Object obj_e : list)
        {
            PConditionalMiddleBlock e = (PConditionalMiddleBlock) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._conditionalMiddleBlock_.add(e);
        }
    }

    public PElseBlock getElseBlock()
    {
        return this._elseBlock_;
    }

    public void setElseBlock(PElseBlock node)
    {
        if(this._elseBlock_ != null)
        {
            this._elseBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalStartBlock_)
            + toString(this._conditionalMiddleBlock_)
            + toString(this._elseBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalStartBlock_ == child)
        {
            this._conditionalStartBlock_ = null;
            return;
        }

        if(this._conditionalMiddleBlock_.remove(child))
        {
            return;
        }

        if(this._elseBlock_ == child)
        {
            this._elseBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalStartBlock_ == oldChild)
        {
            setConditionalStartBlock((PConditionalStartBlock) newChild);
            return;
        }

        for(ListIterator<PConditionalMiddleBlock> i = this._conditionalMiddleBlock_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PConditionalMiddleBlock) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseBlock_ == oldChild)
        {
            setElseBlock((PElseBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
