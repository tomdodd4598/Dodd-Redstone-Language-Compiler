/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.node;

import drlc.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryConditionLogicalExpression extends PConditionLogicalExpression
{
    private PConditionLogicalExpression _conditionLogicalExpression_;
    private PLogicalBinaryOp _logicalBinaryOp_;
    private PConditionEqualityExpression _conditionEqualityExpression_;

    public ABinaryConditionLogicalExpression()
    {
        // Constructor
    }

    public ABinaryConditionLogicalExpression(
        @SuppressWarnings("hiding") PConditionLogicalExpression _conditionLogicalExpression_,
        @SuppressWarnings("hiding") PLogicalBinaryOp _logicalBinaryOp_,
        @SuppressWarnings("hiding") PConditionEqualityExpression _conditionEqualityExpression_)
    {
        // Constructor
        setConditionLogicalExpression(_conditionLogicalExpression_);

        setLogicalBinaryOp(_logicalBinaryOp_);

        setConditionEqualityExpression(_conditionEqualityExpression_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryConditionLogicalExpression(
            cloneNode(this._conditionLogicalExpression_),
            cloneNode(this._logicalBinaryOp_),
            cloneNode(this._conditionEqualityExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryConditionLogicalExpression(this);
    }

    public PConditionLogicalExpression getConditionLogicalExpression()
    {
        return this._conditionLogicalExpression_;
    }

    public void setConditionLogicalExpression(PConditionLogicalExpression node)
    {
        if(this._conditionLogicalExpression_ != null)
        {
            this._conditionLogicalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionLogicalExpression_ = node;
    }

    public PLogicalBinaryOp getLogicalBinaryOp()
    {
        return this._logicalBinaryOp_;
    }

    public void setLogicalBinaryOp(PLogicalBinaryOp node)
    {
        if(this._logicalBinaryOp_ != null)
        {
            this._logicalBinaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalBinaryOp_ = node;
    }

    public PConditionEqualityExpression getConditionEqualityExpression()
    {
        return this._conditionEqualityExpression_;
    }

    public void setConditionEqualityExpression(PConditionEqualityExpression node)
    {
        if(this._conditionEqualityExpression_ != null)
        {
            this._conditionEqualityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionEqualityExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionLogicalExpression_)
            + toString(this._logicalBinaryOp_)
            + toString(this._conditionEqualityExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionLogicalExpression_ == child)
        {
            this._conditionLogicalExpression_ = null;
            return;
        }

        if(this._logicalBinaryOp_ == child)
        {
            this._logicalBinaryOp_ = null;
            return;
        }

        if(this._conditionEqualityExpression_ == child)
        {
            this._conditionEqualityExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionLogicalExpression_ == oldChild)
        {
            setConditionLogicalExpression((PConditionLogicalExpression) newChild);
            return;
        }

        if(this._logicalBinaryOp_ == oldChild)
        {
            setLogicalBinaryOp((PLogicalBinaryOp) newChild);
            return;
        }

        if(this._conditionEqualityExpression_ == oldChild)
        {
            setConditionEqualityExpression((PConditionEqualityExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
