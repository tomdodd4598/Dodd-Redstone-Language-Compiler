/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASetup(ASetup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADirective(ADirective node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGotoStatementBasicSection(AGotoStatementBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASectionLabelBasicSection(ASectionLabelBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicInitializationExpression(ABasicInitializationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitializationExpression(AArrayInitializationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayFillInitializationExpression(AArrayFillInitializationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalSection(AConditionalSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGotoStatement(AGotoStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASectionLabel(ASectionLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitStopStatement(AExitStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitExpressionStopStatement(AExitExpressionStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead0DeadSection(ADead0DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead1DeadSection(ADead1DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead2DeadSection(ADead2DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead3DeadSection(ADead3DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead4DeadSection(ADead4DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead5DeadSection(ADead5DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead6DeadSection(ADead6DeadSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicRawType(ABasicRawType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayRawType(AArrayRawType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionRawType(AFunctionRawType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayTypeTail(AArrayTypeTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParParameterList(AParParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExcludingIdentifierParameter(AExcludingIdentifierParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncludingIdentifierParameter(AIncludingIdentifierParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarator(ADeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameIdentifier(ANameIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiscardIdentifier(ADiscardIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeAnnotation(ATypeAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionLvalue(AExpressionLvalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionRvalue(AExpressionRvalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression0(ABinaryExpression0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression1(ABinaryExpression1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression2(ABinaryExpression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression3(ABinaryExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression4(ABinaryExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression5(ABinaryExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndexExpression7(AIndexExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABracketExpression(ABracketExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABracketExpressionList(ABracketExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParExpressionList(AParExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueExpression8(AValueExpression8 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableExpression8(AVariableExpression8 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesesExpression8(AParenthesesExpression8 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolValue(ABoolValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntValue(AIntValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANatValue(ANatValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharValue(ACharValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullValue(ANullValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASizeofValue(ASizeofValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndAssignmentOp(ALogicalAndAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOrAssignmentOp(ALogicalOrAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDirectivePrefix(TDirectivePrefix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVariableModifier(TVariableModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFn(TFn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConditionalBranchSectionKeyword(TConditionalBranchSectionKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLoop(TLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConditionalIterativeSectionKeyword(TConditionalIterativeSectionKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExit(TExit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSizeof(TSizeof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalAndEquals(TLogicalAndEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalOrEquals(TLogicalOrEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusEquals(TPlusEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAndEquals(TAndEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOrEquals(TOrEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXorEquals(TXorEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusEquals(TMinusEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftShiftEquals(TLeftShiftEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightShiftEquals(TRightShiftEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftRotateEquals(TLeftRotateEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightRotateEquals(TRightRotateEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplyEquals(TMultiplyEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivideEquals(TDivideEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRemainderEquals(TRemainderEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalAnd(TLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalOr(TLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualTo(TEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEqualTo(TNotEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessOrEqual(TLessOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoreThan(TMoreThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoreOrEqual(TMoreOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftShift(TLeftShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightShift(TRightShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftRotate(TLeftRotate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightRotate(TRightRotate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRemainder(TRemainder node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiscard(TDiscard node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolValue(TBoolValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntValue(TIntValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNatValue(TNatValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharValue(TCharValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
