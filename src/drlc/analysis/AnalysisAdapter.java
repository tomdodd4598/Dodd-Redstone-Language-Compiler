/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASetupSection(ASetupSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputDeclaration(AInputDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDefinitionGeneralSection(AMethodDefinitionGeneralSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDefinitionGeneralSection(AFunctionDefinitionGeneralSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicGeneralSection(ABasicGeneralSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableModificationBasicSection(AVariableModificationBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallBasicSection(AMethodCallBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalBasicSection(AConditionalBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIterativeBasicSection(AIterativeBasicSection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDefinition(AMethodDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoInitialisationVariableDeclaration(ANoInitialisationVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithInitialisationVariableDeclaration(AWithInitialisationVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableModification(AVariableModification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABuiltInOutMethodCall(ABuiltInOutMethodCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefinedMethodCall(ADefinedMethodCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfBlock(AIfBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseIfBlock(AElseIfBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseBlock(AElseBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIterativeBlock(AIterativeBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead1DeadCode(ADead1DeadCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead2DeadCode(ADead2DeadCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead3DeadCode(ADead3DeadCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead4DeadCode(ADead4DeadCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADead5DeadCode(ADead5DeadCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrioritizedExpression(APrioritizedExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpression(ABinaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermPrioritizedExpression(ATermPrioritizedExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryPrioritizedExpression(ABinaryPrioritizedExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueTerm(AValueTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddressOfTerm(AAddressOfTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADereferenceTerm(ADereferenceTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryTerm(AUnaryTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParExpressionTerm(AParExpressionTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerValue(AIntegerValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableValue(AVariableValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionValue(AFunctionValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABuiltInArgcFunction(ABuiltInArgcFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABuiltInArgvFunction(ABuiltInArgvFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefinedFunction(ADefinedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARvalueVariable(ARvalueVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALvalueVariable(ALvalueVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentListTail(AArgumentListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComplementUnaryOp(AComplementUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndBinaryOp(AAndBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrBinaryOp(AOrBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorBinaryOp(AXorBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftShiftPrioritizedBinaryOp(ALeftShiftPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightShiftPrioritizedBinaryOp(ARightShiftPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyPrioritizedBinaryOp(AMultiplyPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualToPrioritizedBinaryOp(AEqualToPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADividePrioritizedBinaryOp(ADividePrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloPrioritizedBinaryOp(AModuloPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualToPrioritizedBinaryOp(ANotEqualToPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanPrioritizedBinaryOp(ALessThanPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessOrEqualPrioritizedBinaryOp(ALessOrEqualPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreThanPrioritizedBinaryOp(AMoreThanPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreOrEqualPrioritizedBinaryOp(AMoreOrEqualPrioritizedBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSetArgc(TSetArgc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFun(TFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOut(TOut node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArgc(TArgc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArgv(TArgv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAddressOf(TAddressOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDereference(TDereference node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComplement(TComplement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTToBool(TToBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftShift(TLeftShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightShift(TRightShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualTo(TEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEqualTo(TNotEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessOrEqual(TLessOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoreThan(TMoreThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoreOrEqual(TMoreOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
