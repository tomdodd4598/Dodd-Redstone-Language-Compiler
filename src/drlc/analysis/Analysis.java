/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import drlc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAModule(AModule node);
    void caseAModuleDeclarationStaticSection(AModuleDeclarationStaticSection node);
    void caseAModuleDefinitionStaticSection(AModuleDefinitionStaticSection node);
    void caseAUseDeclarationStaticSection(AUseDeclarationStaticSection node);
    void caseAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node);
    void caseATypeAliasDefinitionStaticSection(ATypeAliasDefinitionStaticSection node);
    void caseAStructDefinitionStaticSection(AStructDefinitionStaticSection node);
    void caseAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node);
    void caseAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node);
    void caseAEmptySectionStaticSection(AEmptySectionStaticSection node);
    void caseAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node);
    void caseAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node);
    void caseAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node);
    void caseAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node);
    void caseAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node);
    void caseAModuleDeclaration(AModuleDeclaration node);
    void caseAModuleDefinition(AModuleDefinition node);
    void caseAUseDeclaration(AUseDeclaration node);
    void caseANestedUseTree(ANestedUseTree node);
    void caseAWildcardUseTree(AWildcardUseTree node);
    void caseALeafUseTree(ALeafUseTree node);
    void caseAPathPrefix(APathPrefix node);
    void caseAUseTreeList(AUseTreeList node);
    void caseAUseTreeListTail(AUseTreeListTail node);
    void caseAUseAlias(AUseAlias node);
    void caseAFunctionDefinition(AFunctionDefinition node);
    void caseATypeAliasDefinition(ATypeAliasDefinition node);
    void caseAStructDefinition(AStructDefinition node);
    void caseAConstantDefinition(AConstantDefinition node);
    void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node);
    void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node);
    void caseAEmptySection(AEmptySection node);
    void caseAScopedSection(AScopedSection node);
    void caseAExpressionStatement(AExpressionStatement node);
    void caseAConditionalSection(AConditionalSection node);
    void caseAExcludingBranchElseSection(AExcludingBranchElseSection node);
    void caseAIncludingBranchElseSection(AIncludingBranchElseSection node);
    void caseALoopIterativeSection(ALoopIterativeSection node);
    void caseAConditionalIterativeSection(AConditionalIterativeSection node);
    void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node);
    void caseAScopedBody(AScopedBody node);
    void caseAExitStopStatement(AExitStopStatement node);
    void caseAReturnStopStatement(AReturnStopStatement node);
    void caseAContinueStopStatement(AContinueStopStatement node);
    void caseABreakStopStatement(ABreakStopStatement node);
    void caseADead0DeadSection(ADead0DeadSection node);
    void caseADead1DeadSection(ADead1DeadSection node);
    void caseADead2DeadSection(ADead2DeadSection node);
    void caseADead3DeadSection(ADead3DeadSection node);
    void caseADead4DeadSection(ADead4DeadSection node);
    void caseARawType(ARawType node);
    void caseAAddressOfType(AAddressOfType node);
    void caseADoubleAddressOfType(ADoubleAddressOfType node);
    void caseANominalRawType(ANominalRawType node);
    void caseAArrayRawType(AArrayRawType node);
    void caseATupleRawType(ATupleRawType node);
    void caseAFunctionRawType(AFunctionRawType node);
    void caseATupleTypeList(ATupleTypeList node);
    void caseATupleTypeListHead(ATupleTypeListHead node);
    void caseATypeList(ATypeList node);
    void caseATypeListTail(ATypeListTail node);
    void caseAReturnType(AReturnType node);
    void caseATypeAnnotation(ATypeAnnotation node);
    void caseAPath(APath node);
    void caseAPathTail(APathTail node);
    void caseARootPathSegment(ARootPathSegment node);
    void caseASuperPathSegment(ASuperPathSegment node);
    void caseASelfPathSegment(ASelfPathSegment node);
    void caseANamePathSegment(ANamePathSegment node);
    void caseADeclarator(ADeclarator node);
    void caseAStaticVariableModifier(AStaticVariableModifier node);
    void caseAMutVariableModifier(AMutVariableModifier node);
    void caseADeclaratorList(ADeclaratorList node);
    void caseADeclaratorListTail(ADeclaratorListTail node);
    void caseALabel(ALabel node);
    void caseAPrioritizedExpression(APrioritizedExpression node);
    void caseAClosureExpression(AClosureExpression node);
    void caseAStandardClosureDeclaratorList(AStandardClosureDeclaratorList node);
    void caseALogicalOrClosureDeclaratorList(ALogicalOrClosureDeclaratorList node);
    void caseAExpressionClosureBody(AExpressionClosureBody node);
    void caseABlockClosureBody(ABlockClosureBody node);
    void caseAPrioritizedAssignmentExpression(APrioritizedAssignmentExpression node);
    void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node);
    void caseAPrioritizedTernaryExpression(APrioritizedTernaryExpression node);
    void caseATernaryTernaryExpression(ATernaryTernaryExpression node);
    void caseAPrioritizedCastExpression(APrioritizedCastExpression node);
    void caseACastCastExpression(ACastCastExpression node);
    void caseAPrioritizedLogicalExpression(APrioritizedLogicalExpression node);
    void caseABinaryLogicalExpression(ABinaryLogicalExpression node);
    void caseAPrioritizedEqualityExpression(APrioritizedEqualityExpression node);
    void caseABinaryEqualityExpression(ABinaryEqualityExpression node);
    void caseAPrioritizedComparativeExpression(APrioritizedComparativeExpression node);
    void caseABinaryComparativeExpression(ABinaryComparativeExpression node);
    void caseAPrioritizedAdditiveExpression(APrioritizedAdditiveExpression node);
    void caseABinaryAdditiveExpression(ABinaryAdditiveExpression node);
    void caseAPrioritizedMultiplicativeExpression(APrioritizedMultiplicativeExpression node);
    void caseABinaryMultiplicativeExpression(ABinaryMultiplicativeExpression node);
    void caseAPrioritizedShiftExpression(APrioritizedShiftExpression node);
    void caseABinaryShiftExpression(ABinaryShiftExpression node);
    void caseAPrioritizedUnaryExpression(APrioritizedUnaryExpression node);
    void caseAUnaryUnaryExpression(AUnaryUnaryExpression node);
    void caseADereferenceUnaryExpression(ADereferenceUnaryExpression node);
    void caseAAddressOfUnaryExpression(AAddressOfUnaryExpression node);
    void caseADoubleAddressOfUnaryExpression(ADoubleAddressOfUnaryExpression node);
    void caseAPrioritizedSuffixExpression(APrioritizedSuffixExpression node);
    void caseAIndexSuffixExpression(AIndexSuffixExpression node);
    void caseAMemberSuffixExpression(AMemberSuffixExpression node);
    void caseAMethodSuffixExpression(AMethodSuffixExpression node);
    void caseAPrioritizedCallExpression(APrioritizedCallExpression node);
    void caseACallCallExpression(ACallCallExpression node);
    void caseAParenthesesCompoundExpression(AParenthesesCompoundExpression node);
    void caseAPrimaryCompoundExpression(APrimaryCompoundExpression node);
    void caseAArrayListCompoundExpression(AArrayListCompoundExpression node);
    void caseAArrayRepeatCompoundExpression(AArrayRepeatCompoundExpression node);
    void caseATupleCompoundExpression(ATupleCompoundExpression node);
    void caseAStructCompoundExpression(AStructCompoundExpression node);
    void caseAParenthesesExpression(AParenthesesExpression node);
    void caseAScalarPrimaryExpression(AScalarPrimaryExpression node);
    void caseAPathPrimaryExpression(APathPrimaryExpression node);
    void caseAExpressionList(AExpressionList node);
    void caseAExpressionListTail(AExpressionListTail node);
    void caseATupleExpressionList(ATupleExpressionList node);
    void caseATupleExpressionListHead(ATupleExpressionListHead node);
    void caseABasicStructExpressionList(ABasicStructExpressionList node);
    void caseALabelledStructExpressionList(ALabelledStructExpressionList node);
    void caseALabelledExpressionList(ALabelledExpressionList node);
    void caseALabelledExpressionListTail(ALabelledExpressionListTail node);
    void caseALabelledExpression(ALabelledExpression node);
    void caseANameMember(ANameMember node);
    void caseAWordMember(AWordMember node);
    void caseANullScalar(ANullScalar node);
    void caseABoolScalar(ABoolScalar node);
    void caseAIntScalar(AIntScalar node);
    void caseANatScalar(ANatScalar node);
    void caseAWordScalar(AWordScalar node);
    void caseACharScalar(ACharScalar node);
    void caseAStringScalar(AStringScalar node);
    void caseASizeofScalar(ASizeofScalar node);
    void caseAPrioritizedBraceExpression(APrioritizedBraceExpression node);
    void caseAClosureBraceExpression(AClosureBraceExpression node);
    void caseAPrioritizedBraceAssignmentExpression(APrioritizedBraceAssignmentExpression node);
    void caseAAssignmentBraceAssignmentExpression(AAssignmentBraceAssignmentExpression node);
    void caseAPrioritizedBraceTernaryExpression(APrioritizedBraceTernaryExpression node);
    void caseATernaryBraceTernaryExpression(ATernaryBraceTernaryExpression node);
    void caseAPrioritizedBraceCastExpression(APrioritizedBraceCastExpression node);
    void caseACastBraceCastExpression(ACastBraceCastExpression node);
    void caseAPrioritizedBraceLogicalExpression(APrioritizedBraceLogicalExpression node);
    void caseABinaryBraceLogicalExpression(ABinaryBraceLogicalExpression node);
    void caseAPrioritizedBraceEqualityExpression(APrioritizedBraceEqualityExpression node);
    void caseABinaryBraceEqualityExpression(ABinaryBraceEqualityExpression node);
    void caseAPrioritizedBraceComparativeExpression(APrioritizedBraceComparativeExpression node);
    void caseABinaryBraceComparativeExpression(ABinaryBraceComparativeExpression node);
    void caseAPrioritizedBraceAdditiveExpression(APrioritizedBraceAdditiveExpression node);
    void caseABinaryBraceAdditiveExpression(ABinaryBraceAdditiveExpression node);
    void caseAPrioritizedBraceMultiplicativeExpression(APrioritizedBraceMultiplicativeExpression node);
    void caseABinaryBraceMultiplicativeExpression(ABinaryBraceMultiplicativeExpression node);
    void caseAPrioritizedBraceShiftExpression(APrioritizedBraceShiftExpression node);
    void caseABinaryBraceShiftExpression(ABinaryBraceShiftExpression node);
    void caseAPrioritizedBraceUnaryExpression(APrioritizedBraceUnaryExpression node);
    void caseAUnaryBraceUnaryExpression(AUnaryBraceUnaryExpression node);
    void caseADereferenceBraceUnaryExpression(ADereferenceBraceUnaryExpression node);
    void caseAAddressOfBraceUnaryExpression(AAddressOfBraceUnaryExpression node);
    void caseADoubleAddressOfBraceUnaryExpression(ADoubleAddressOfBraceUnaryExpression node);
    void caseAPrioritizedBraceSuffixExpression(APrioritizedBraceSuffixExpression node);
    void caseAIndexBraceSuffixExpression(AIndexBraceSuffixExpression node);
    void caseAMemberBraceSuffixExpression(AMemberBraceSuffixExpression node);
    void caseAMethodBraceSuffixExpression(AMethodBraceSuffixExpression node);
    void caseAPrioritizedBraceCallExpression(APrioritizedBraceCallExpression node);
    void caseACallBraceCallExpression(ACallBraceCallExpression node);
    void caseAParenthesesBraceCompoundExpression(AParenthesesBraceCompoundExpression node);
    void caseAPrimaryBraceCompoundExpression(APrimaryBraceCompoundExpression node);
    void caseAArrayListBraceCompoundExpression(AArrayListBraceCompoundExpression node);
    void caseAArrayRepeatBraceCompoundExpression(AArrayRepeatBraceCompoundExpression node);
    void caseATupleBraceCompoundExpression(ATupleBraceCompoundExpression node);
    void caseAEqualsAssignmentOp(AEqualsAssignmentOp node);
    void caseAPlusAssignmentOp(APlusAssignmentOp node);
    void caseAAndAssignmentOp(AAndAssignmentOp node);
    void caseAOrAssignmentOp(AOrAssignmentOp node);
    void caseAXorAssignmentOp(AXorAssignmentOp node);
    void caseAMinusAssignmentOp(AMinusAssignmentOp node);
    void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node);
    void caseADivideAssignmentOp(ADivideAssignmentOp node);
    void caseARemainderAssignmentOp(ARemainderAssignmentOp node);
    void caseALeftShiftAssignmentOp(ALeftShiftAssignmentOp node);
    void caseARightShiftAssignmentOp(ARightShiftAssignmentOp node);
    void caseALeftRotateAssignmentOp(ALeftRotateAssignmentOp node);
    void caseARightRotateAssignmentOp(ARightRotateAssignmentOp node);
    void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node);
    void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node);
    void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node);
    void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node);
    void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node);
    void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node);
    void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node);
    void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node);
    void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node);
    void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node);
    void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node);
    void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node);
    void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node);
    void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node);
    void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node);
    void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node);
    void caseALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node);
    void caseARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node);
    void caseALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node);
    void caseARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node);
    void caseAMinusUnaryOp(AMinusUnaryOp node);
    void caseANotUnaryOp(ANotUnaryOp node);

    void caseTPathSeparator(TPathSeparator node);
    void caseTArrow(TArrow node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTFullStop(TFullStop node);
    void caseTQuestionMark(TQuestionMark node);
    void caseTEquals(TEquals node);
    void caseTPlusEquals(TPlusEquals node);
    void caseTAndEquals(TAndEquals node);
    void caseTOrEquals(TOrEquals node);
    void caseTXorEquals(TXorEquals node);
    void caseTMinusEquals(TMinusEquals node);
    void caseTLeftShiftEquals(TLeftShiftEquals node);
    void caseTRightShiftEquals(TRightShiftEquals node);
    void caseTLeftRotateEquals(TLeftRotateEquals node);
    void caseTRightRotateEquals(TRightRotateEquals node);
    void caseTMultiplyEquals(TMultiplyEquals node);
    void caseTDivideEquals(TDivideEquals node);
    void caseTRemainderEquals(TRemainderEquals node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTEqualTo(TEqualTo node);
    void caseTNotEqualTo(TNotEqualTo node);
    void caseTLessThan(TLessThan node);
    void caseTLessOrEqual(TLessOrEqual node);
    void caseTMoreThan(TMoreThan node);
    void caseTMoreOrEqual(TMoreOrEqual node);
    void caseTPlus(TPlus node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTMinus(TMinus node);
    void caseTLeftShift(TLeftShift node);
    void caseTRightShift(TRightShift node);
    void caseTLeftRotate(TLeftRotate node);
    void caseTRightRotate(TRightRotate node);
    void caseTMultiply(TMultiply node);
    void caseTDivide(TDivide node);
    void caseTRemainder(TRemainder node);
    void caseTNot(TNot node);
    void caseTMod(TMod node);
    void caseTUse(TUse node);
    void caseTRoot(TRoot node);
    void caseTSuper(TSuper node);
    void caseTSelf(TSelf node);
    void caseTFn(TFn node);
    void caseTAlias(TAlias node);
    void caseTStruct(TStruct node);
    void caseTConst(TConst node);
    void caseTLet(TLet node);
    void caseTAs(TAs node);
    void caseTStatic(TStatic node);
    void caseTMut(TMut node);
    void caseTConditionalBranchKeyword(TConditionalBranchKeyword node);
    void caseTElse(TElse node);
    void caseTLoop(TLoop node);
    void caseTConditionalIterativeKeyword(TConditionalIterativeKeyword node);
    void caseTDo(TDo node);
    void caseTExit(TExit node);
    void caseTReturn(TReturn node);
    void caseTContinue(TContinue node);
    void caseTBreak(TBreak node);
    void caseTSizeof(TSizeof node);
    void caseTNullValue(TNullValue node);
    void caseTBoolValue(TBoolValue node);
    void caseTName(TName node);
    void caseTIntValue(TIntValue node);
    void caseTNatValue(TNatValue node);
    void caseTWordValue(TWordValue node);
    void caseTCharValue(TCharValue node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
