/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUnit(AUnit node)
    {
        defaultIn(node);
    }

    public void outAUnit(AUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        inAUnit(node);
        if(node.getSetup() != null)
        {
            node.getSetup().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAUnit(node);
    }

    public void inASetup(ASetup node)
    {
        defaultIn(node);
    }

    public void outASetup(ASetup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetup(ASetup node)
    {
        inASetup(node);
        {
            List<PDirective> copy = new ArrayList<PDirective>(node.getDirective());
            for(PDirective e : copy)
            {
                e.apply(this);
            }
        }
        outASetup(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PProgramSection> copy = new ArrayList<PProgramSection>(node.getProgramSection());
            for(PProgramSection e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADirective(ADirective node)
    {
        defaultIn(node);
    }

    public void outADirective(ADirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirective(ADirective node)
    {
        inADirective(node);
        if(node.getDirectivePrefix() != null)
        {
            node.getDirectivePrefix().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADirective(node);
    }

    public void inAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        inAFunctionDefinitionProgramSection(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionProgramSection(node);
    }

    public void inABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        defaultIn(node);
    }

    public void outABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        inABasicSectionProgramSection(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outABasicSectionProgramSection(node);
    }

    public void inAScopedSectionBasicSection(AScopedSectionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSectionBasicSection(AScopedSectionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSectionBasicSection(AScopedSectionBasicSection node)
    {
        inAScopedSectionBasicSection(node);
        if(node.getScopedSection() != null)
        {
            node.getScopedSection().apply(this);
        }
        outAScopedSectionBasicSection(node);
    }

    public void inAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        inAConstantDefinitionBasicSection(node);
        if(node.getConstantDefinition() != null)
        {
            node.getConstantDefinition().apply(this);
        }
        outAConstantDefinitionBasicSection(node);
    }

    public void inAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        inAVariableDeclarationBasicSection(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationBasicSection(node);
    }

    public void inAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        inAExpressionStatementBasicSection(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementBasicSection(node);
    }

    public void inAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        inAConditionalSectionBasicSection(node);
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAConditionalSectionBasicSection(node);
    }

    public void inAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        inAIterativeSectionBasicSection(node);
        if(node.getIterativeSection() != null)
        {
            node.getIterativeSection().apply(this);
        }
        outAIterativeSectionBasicSection(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAScopedSection(AScopedSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSection(AScopedSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSection(AScopedSection node)
    {
        inAScopedSection(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAScopedSection(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outAConstantDefinition(node);
    }

    public void inAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        inAExcludingInitializationVariableDeclaration(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outAExcludingInitializationVariableDeclaration(node);
    }

    public void inAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        inAIncludingInitializationVariableDeclaration(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outAIncludingInitializationVariableDeclaration(node);
    }

    public void inABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicExpressionStatement(ABasicExpressionStatement node)
    {
        inABasicExpressionStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outABasicExpressionStatement(node);
    }

    public void inAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        inAAssignmentExpressionStatement(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        if(node.getAssignmentOp() != null)
        {
            node.getAssignmentOp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignmentExpressionStatement(node);
    }

    public void inAConditionalSection(AConditionalSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSection(AConditionalSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSection(AConditionalSection node)
    {
        inAConditionalSection(node);
        if(node.getConditionalBranchKeyword() != null)
        {
            node.getConditionalBranchKeyword().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getElseSection() != null)
        {
            node.getElseSection().apply(this);
        }
        outAConditionalSection(node);
    }

    public void inAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        inAExcludingBranchElseSection(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAExcludingBranchElseSection(node);
    }

    public void inAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        inAIncludingBranchElseSection(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAIncludingBranchElseSection(node);
    }

    public void inALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultIn(node);
    }

    public void outALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopIterativeSection(ALoopIterativeSection node)
    {
        inALoopIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outALoopIterativeSection(node);
    }

    public void inAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        inAConditionalIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAConditionalIterativeSection(node);
    }

    public void inADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        inADoConditionalIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADoConditionalIterativeSection(node);
    }

    public void inAScopeContents(AScopeContents node)
    {
        defaultIn(node);
    }

    public void outAScopeContents(AScopeContents node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopeContents(AScopeContents node)
    {
        inAScopeContents(node);
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        outAScopeContents(node);
    }

    public void inAExitStopStatement(AExitStopStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStopStatement(AExitStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitStopStatement(AExitStopStatement node)
    {
        inAExitStopStatement(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAExitStopStatement(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAReturnStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAContinueStopStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outABreakStopStatement(node);
    }

    public void inADead0DeadSection(ADead0DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead0DeadSection(ADead0DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead0DeadSection(ADead0DeadSection node)
    {
        inADead0DeadSection(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outADead0DeadSection(node);
    }

    public void inADead1DeadSection(ADead1DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead1DeadSection(ADead1DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead1DeadSection(ADead1DeadSection node)
    {
        inADead1DeadSection(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead1DeadSection(node);
    }

    public void inADead2DeadSection(ADead2DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead2DeadSection(ADead2DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead2DeadSection(ADead2DeadSection node)
    {
        inADead2DeadSection(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead2DeadSection(node);
    }

    public void inADead3DeadSection(ADead3DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead3DeadSection(ADead3DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead3DeadSection(ADead3DeadSection node)
    {
        inADead3DeadSection(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead3DeadSection(node);
    }

    public void inADead4DeadSection(ADead4DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead4DeadSection(ADead4DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead4DeadSection(ADead4DeadSection node)
    {
        inADead4DeadSection(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead4DeadSection(node);
    }

    public void inADead5DeadSection(ADead5DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead5DeadSection(ADead5DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead5DeadSection(ADead5DeadSection node)
    {
        inADead5DeadSection(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead5DeadSection(node);
    }

    public void inADead6DeadSection(ADead6DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead6DeadSection(ADead6DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead6DeadSection(ADead6DeadSection node)
    {
        inADead6DeadSection(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TSemicolon> copy = new ArrayList<TSemicolon>(node.getSemicolon());
            for(TSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        outADead6DeadSection(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        {
            List<TAnd> copy = new ArrayList<TAnd>(node.getAnd());
            for(TAnd e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRawType() != null)
        {
            node.getRawType().apply(this);
        }
        outAType(node);
    }

    public void inABasicRawType(ABasicRawType node)
    {
        defaultIn(node);
    }

    public void outABasicRawType(ABasicRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicRawType(ABasicRawType node)
    {
        inABasicRawType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outABasicRawType(node);
    }

    public void inAArrayRawType(AArrayRawType node)
    {
        defaultIn(node);
    }

    public void outAArrayRawType(AArrayRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRawType(AArrayRawType node)
    {
        inAArrayRawType(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRawType(node);
    }

    public void inAFunctionRawType(AFunctionRawType node)
    {
        defaultIn(node);
    }

    public void outAFunctionRawType(AFunctionRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionRawType(AFunctionRawType node)
    {
        inAFunctionRawType(node);
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outAFunctionRawType(node);
    }

    public void inATypeList(ATypeList node)
    {
        defaultIn(node);
    }

    public void outATypeList(ATypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeList(ATypeList node)
    {
        inATypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PTypeListTail> copy = new ArrayList<PTypeListTail>(node.getTypeListTail());
            for(PTypeListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATypeList(node);
    }

    public void inATypeListTail(ATypeListTail node)
    {
        defaultIn(node);
    }

    public void outATypeListTail(ATypeListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeListTail(ATypeListTail node)
    {
        inATypeListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeListTail(node);
    }

    public void inAReturnType(AReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType(AReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        inAReturnType(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAReturnType(node);
    }

    public void inAVariableDeclarator(AVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarator(AVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarator(AVariableDeclarator node)
    {
        inAVariableDeclarator(node);
        {
            List<TVariableModifier> copy = new ArrayList<TVariableModifier>(node.getVariableModifier());
            for(TVariableModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        outAVariableDeclarator(node);
    }

    public void inATypeAnnotation(ATypeAnnotation node)
    {
        defaultIn(node);
    }

    public void outATypeAnnotation(ATypeAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAnnotation(ATypeAnnotation node)
    {
        inATypeAnnotation(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeAnnotation(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        if(node.getParameterDeclarator() != null)
        {
            node.getParameterDeclarator().apply(this);
        }
        {
            List<PParameterListTail> copy = new ArrayList<PParameterListTail>(node.getParameterListTail());
            for(PParameterListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParameterList(node);
    }

    public void inAParameterListTail(AParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAParameterListTail(AParameterListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        inAParameterListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameterDeclarator() != null)
        {
            node.getParameterDeclarator().apply(this);
        }
        outAParameterListTail(node);
    }

    public void inAParameterDeclarator(AParameterDeclarator node)
    {
        defaultIn(node);
    }

    public void outAParameterDeclarator(AParameterDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterDeclarator(AParameterDeclarator node)
    {
        inAParameterDeclarator(node);
        {
            List<TVariableModifier> copy = new ArrayList<TVariableModifier>(node.getVariableModifier());
            for(TVariableModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        outAParameterDeclarator(node);
    }

    public void inANameIdentifier(ANameIdentifier node)
    {
        defaultIn(node);
    }

    public void outANameIdentifier(ANameIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameIdentifier(ANameIdentifier node)
    {
        inANameIdentifier(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameIdentifier(node);
    }

    public void inADiscardIdentifier(ADiscardIdentifier node)
    {
        defaultIn(node);
    }

    public void outADiscardIdentifier(ADiscardIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiscardIdentifier(ADiscardIdentifier node)
    {
        inADiscardIdentifier(node);
        if(node.getDiscard() != null)
        {
            node.getDiscard().apply(this);
        }
        outADiscardIdentifier(node);
    }

    public void inAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        inAIterativeSectionLabel(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAIterativeSectionLabel(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAExpression(node);
    }

    public void inAConstantExpression(AConstantExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantExpression(AConstantExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpression(AConstantExpression node)
    {
        inAConstantExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAConstantExpression(node);
    }

    public void inAAssignmentExpression(AAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpression(AAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpression(AAssignmentExpression node)
    {
        inAAssignmentExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAAssignmentExpression(node);
    }

    public void inAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        inAPrioritizedExpression0(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAPrioritizedExpression0(node);
    }

    public void inABinaryExpression0(ABinaryExpression0 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression0(ABinaryExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression0(ABinaryExpression0 node)
    {
        inABinaryExpression0(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outABinaryExpression0(node);
    }

    public void inAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        inAPrioritizedExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAPrioritizedExpression1(node);
    }

    public void inABinaryExpression1(ABinaryExpression1 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression1(ABinaryExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression1(ABinaryExpression1 node)
    {
        inABinaryExpression1(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outABinaryExpression1(node);
    }

    public void inAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        inAPrioritizedExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAPrioritizedExpression2(node);
    }

    public void inABinaryExpression2(ABinaryExpression2 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression2(ABinaryExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression2(ABinaryExpression2 node)
    {
        inABinaryExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outABinaryExpression2(node);
    }

    public void inAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        inAPrioritizedExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAPrioritizedExpression3(node);
    }

    public void inABinaryExpression3(ABinaryExpression3 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression3(ABinaryExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression3(ABinaryExpression3 node)
    {
        inABinaryExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outABinaryExpression3(node);
    }

    public void inAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        inAPrioritizedExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAPrioritizedExpression4(node);
    }

    public void inABinaryExpression4(ABinaryExpression4 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression4(ABinaryExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression4(ABinaryExpression4 node)
    {
        inABinaryExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outABinaryExpression4(node);
    }

    public void inAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        inAPrioritizedExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAPrioritizedExpression5(node);
    }

    public void inABinaryExpression5(ABinaryExpression5 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression5(ABinaryExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression5(ABinaryExpression5 node)
    {
        inABinaryExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outABinaryExpression5(node);
    }

    public void inAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        inAPrioritizedExpression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outAPrioritizedExpression6(node);
    }

    public void inAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpression6(AUnaryExpression6 node)
    {
        inAUnaryExpression6(node);
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAUnaryExpression6(node);
    }

    public void inADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultIn(node);
    }

    public void outADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceExpression6(ADereferenceExpression6 node)
    {
        inADereferenceExpression6(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outADereferenceExpression6(node);
    }

    public void inAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultIn(node);
    }

    public void outAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfExpression6(AAddressOfExpression6 node)
    {
        inAAddressOfExpression6(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAAddressOfExpression6(node);
    }

    public void inAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        inAPrioritizedExpression7(node);
        if(node.getExpression8() != null)
        {
            node.getExpression8().apply(this);
        }
        outAPrioritizedExpression7(node);
    }

    public void inAArrayListExpression7(AArrayListExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayListExpression7(AArrayListExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayListExpression7(AArrayListExpression7 node)
    {
        inAArrayListExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayListExpression7(node);
    }

    public void inAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        inAArrayRepeatExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRepeatExpression7(node);
    }

    public void inAIndexExpression7(AIndexExpression7 node)
    {
        defaultIn(node);
    }

    public void outAIndexExpression7(AIndexExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexExpression7(AIndexExpression7 node)
    {
        inAIndexExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAIndexExpression7(node);
    }

    public void inAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression7(AFunctionExpression7 node)
    {
        inAFunctionExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunctionExpression7(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PExpressionListTail> copy = new ArrayList<PExpressionListTail>(node.getExpressionListTail());
            for(PExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionList(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inAValueExpression8(AValueExpression8 node)
    {
        defaultIn(node);
    }

    public void outAValueExpression8(AValueExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExpression8(AValueExpression8 node)
    {
        inAValueExpression8(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression8(node);
    }

    public void inAVariableExpression8(AVariableExpression8 node)
    {
        defaultIn(node);
    }

    public void outAVariableExpression8(AVariableExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExpression8(AVariableExpression8 node)
    {
        inAVariableExpression8(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVariableExpression8(node);
    }

    public void inAParenthesesExpression8(AParenthesesExpression8 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression8(AParenthesesExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression8(AParenthesesExpression8 node)
    {
        inAParenthesesExpression8(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesesExpression8(node);
    }

    public void inABoolValue(ABoolValue node)
    {
        defaultIn(node);
    }

    public void outABoolValue(ABoolValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValue(ABoolValue node)
    {
        inABoolValue(node);
        if(node.getBoolValue() != null)
        {
            node.getBoolValue().apply(this);
        }
        outABoolValue(node);
    }

    public void inAIntValue(AIntValue node)
    {
        defaultIn(node);
    }

    public void outAIntValue(AIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValue(AIntValue node)
    {
        inAIntValue(node);
        if(node.getIntValue() != null)
        {
            node.getIntValue().apply(this);
        }
        outAIntValue(node);
    }

    public void inANatValue(ANatValue node)
    {
        defaultIn(node);
    }

    public void outANatValue(ANatValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatValue(ANatValue node)
    {
        inANatValue(node);
        if(node.getNatValue() != null)
        {
            node.getNatValue().apply(this);
        }
        outANatValue(node);
    }

    public void inACharValue(ACharValue node)
    {
        defaultIn(node);
    }

    public void outACharValue(ACharValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValue(ACharValue node)
    {
        inACharValue(node);
        if(node.getCharValue() != null)
        {
            node.getCharValue().apply(this);
        }
        outACharValue(node);
    }

    public void inANullValue(ANullValue node)
    {
        defaultIn(node);
    }

    public void outANullValue(ANullValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullValue(ANullValue node)
    {
        inANullValue(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullValue(node);
    }

    public void inASizeofValue(ASizeofValue node)
    {
        defaultIn(node);
    }

    public void outASizeofValue(ASizeofValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeofValue(ASizeofValue node)
    {
        inASizeofValue(node);
        if(node.getSizeof() != null)
        {
            node.getSizeof().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASizeofValue(node);
    }

    public void inAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        inAEqualsAssignmentOp(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsAssignmentOp(node);
    }

    public void inAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignmentOp(APlusAssignmentOp node)
    {
        inAPlusAssignmentOp(node);
        if(node.getPlusEquals() != null)
        {
            node.getPlusEquals().apply(this);
        }
        outAPlusAssignmentOp(node);
    }

    public void inAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAssignmentOp(AAndAssignmentOp node)
    {
        inAAndAssignmentOp(node);
        if(node.getAndEquals() != null)
        {
            node.getAndEquals().apply(this);
        }
        outAAndAssignmentOp(node);
    }

    public void inAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAssignmentOp(AOrAssignmentOp node)
    {
        inAOrAssignmentOp(node);
        if(node.getOrEquals() != null)
        {
            node.getOrEquals().apply(this);
        }
        outAOrAssignmentOp(node);
    }

    public void inAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAssignmentOp(AXorAssignmentOp node)
    {
        inAXorAssignmentOp(node);
        if(node.getXorEquals() != null)
        {
            node.getXorEquals().apply(this);
        }
        outAXorAssignmentOp(node);
    }

    public void inAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        inAMinusAssignmentOp(node);
        if(node.getMinusEquals() != null)
        {
            node.getMinusEquals().apply(this);
        }
        outAMinusAssignmentOp(node);
    }

    public void inALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        inALeftShiftAssignmentOp(node);
        if(node.getLeftShiftEquals() != null)
        {
            node.getLeftShiftEquals().apply(this);
        }
        outALeftShiftAssignmentOp(node);
    }

    public void inARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        inARightShiftAssignmentOp(node);
        if(node.getRightShiftEquals() != null)
        {
            node.getRightShiftEquals().apply(this);
        }
        outARightShiftAssignmentOp(node);
    }

    public void inALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        inALeftRotateAssignmentOp(node);
        if(node.getLeftRotateEquals() != null)
        {
            node.getLeftRotateEquals().apply(this);
        }
        outALeftRotateAssignmentOp(node);
    }

    public void inARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        inARightRotateAssignmentOp(node);
        if(node.getRightRotateEquals() != null)
        {
            node.getRightRotateEquals().apply(this);
        }
        outARightRotateAssignmentOp(node);
    }

    public void inAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        inAMultiplyAssignmentOp(node);
        if(node.getMultiplyEquals() != null)
        {
            node.getMultiplyEquals().apply(this);
        }
        outAMultiplyAssignmentOp(node);
    }

    public void inADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideAssignmentOp(ADivideAssignmentOp node)
    {
        inADivideAssignmentOp(node);
        if(node.getDivideEquals() != null)
        {
            node.getDivideEquals().apply(this);
        }
        outADivideAssignmentOp(node);
    }

    public void inARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        inARemainderAssignmentOp(node);
        if(node.getRemainderEquals() != null)
        {
            node.getRemainderEquals().apply(this);
        }
        outARemainderAssignmentOp(node);
    }

    public void inALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        inALogicalAndLogicalBinaryOp(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outALogicalAndLogicalBinaryOp(node);
    }

    public void inALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        inALogicalOrLogicalBinaryOp(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outALogicalOrLogicalBinaryOp(node);
    }

    public void inAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        inAEqualToEqualityBinaryOp(node);
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        outAEqualToEqualityBinaryOp(node);
    }

    public void inANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        inANotEqualToEqualityBinaryOp(node);
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        outANotEqualToEqualityBinaryOp(node);
    }

    public void inALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        inALessThanComparativeBinaryOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanComparativeBinaryOp(node);
    }

    public void inALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        inALessOrEqualComparativeBinaryOp(node);
        if(node.getLessOrEqual() != null)
        {
            node.getLessOrEqual().apply(this);
        }
        outALessOrEqualComparativeBinaryOp(node);
    }

    public void inAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        inAMoreThanComparativeBinaryOp(node);
        if(node.getMoreThan() != null)
        {
            node.getMoreThan().apply(this);
        }
        outAMoreThanComparativeBinaryOp(node);
    }

    public void inAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        inAMoreOrEqualComparativeBinaryOp(node);
        if(node.getMoreOrEqual() != null)
        {
            node.getMoreOrEqual().apply(this);
        }
        outAMoreOrEqualComparativeBinaryOp(node);
    }

    public void inAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        inAPlusAdditiveBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAdditiveBinaryOp(node);
    }

    public void inAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        inAAndAdditiveBinaryOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndAdditiveBinaryOp(node);
    }

    public void inAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        inAOrAdditiveBinaryOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrAdditiveBinaryOp(node);
    }

    public void inAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        inAXorAdditiveBinaryOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorAdditiveBinaryOp(node);
    }

    public void inAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        inAMinusAdditiveBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAdditiveBinaryOp(node);
    }

    public void inALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        inALeftShiftShiftBinaryOp(node);
        if(node.getLeftShift() != null)
        {
            node.getLeftShift().apply(this);
        }
        outALeftShiftShiftBinaryOp(node);
    }

    public void inARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        inARightShiftShiftBinaryOp(node);
        if(node.getRightShift() != null)
        {
            node.getRightShift().apply(this);
        }
        outARightShiftShiftBinaryOp(node);
    }

    public void inALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        inALeftRotateShiftBinaryOp(node);
        if(node.getLeftRotate() != null)
        {
            node.getLeftRotate().apply(this);
        }
        outALeftRotateShiftBinaryOp(node);
    }

    public void inARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        inARightRotateShiftBinaryOp(node);
        if(node.getRightRotate() != null)
        {
            node.getRightRotate().apply(this);
        }
        outARightRotateShiftBinaryOp(node);
    }

    public void inAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        inAMultiplyMultiplicativeBinaryOp(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outAMultiplyMultiplicativeBinaryOp(node);
    }

    public void inADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        inADivideMultiplicativeBinaryOp(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADivideMultiplicativeBinaryOp(node);
    }

    public void inARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        inARemainderMultiplicativeBinaryOp(node);
        if(node.getRemainder() != null)
        {
            node.getRemainder().apply(this);
        }
        outARemainderMultiplicativeBinaryOp(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOp(node);
    }
}
