/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUnit(AUnit node)
    {
        defaultIn(node);
    }

    public void outAUnit(AUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        inAUnit(node);
        if(node.getSetup() != null)
        {
            node.getSetup().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAUnit(node);
    }

    public void inASetup(ASetup node)
    {
        defaultIn(node);
    }

    public void outASetup(ASetup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetup(ASetup node)
    {
        inASetup(node);
        {
            List<PDirective> copy = new ArrayList<PDirective>(node.getDirective());
            for(PDirective e : copy)
            {
                e.apply(this);
            }
        }
        outASetup(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PStaticSection> copy = new ArrayList<PStaticSection>(node.getStaticSection());
            for(PStaticSection e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADirective(ADirective node)
    {
        defaultIn(node);
    }

    public void outADirective(ADirective node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirective(ADirective node)
    {
        inADirective(node);
        if(node.getDirectivePrefix() != null)
        {
            node.getDirectivePrefix().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADirective(node);
    }

    public void inAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        inAFunctionDefinitionStaticSection(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionStaticSection(node);
    }

    public void inATypealiasDefinitionStaticSection(ATypealiasDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outATypealiasDefinitionStaticSection(ATypealiasDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypealiasDefinitionStaticSection(ATypealiasDefinitionStaticSection node)
    {
        inATypealiasDefinitionStaticSection(node);
        if(node.getTypealiasDefinition() != null)
        {
            node.getTypealiasDefinition().apply(this);
        }
        outATypealiasDefinitionStaticSection(node);
    }

    public void inAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        inAStructDefinitionStaticSection(node);
        if(node.getStructDefinition() != null)
        {
            node.getStructDefinition().apply(this);
        }
        outAStructDefinitionStaticSection(node);
    }

    public void inAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        inAConstantDefinitionStaticSection(node);
        if(node.getConstantDefinition() != null)
        {
            node.getConstantDefinition().apply(this);
        }
        outAConstantDefinitionStaticSection(node);
    }

    public void inAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        inAVariableDeclarationStaticSection(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationStaticSection(node);
    }

    public void inAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        inAEmptySectionStaticSection(node);
        if(node.getEmptySection() != null)
        {
            node.getEmptySection().apply(this);
        }
        outAEmptySectionStaticSection(node);
    }

    public void inAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        inAStaticSectionRuntimeSection(node);
        if(node.getStaticSection() != null)
        {
            node.getStaticSection().apply(this);
        }
        outAStaticSectionRuntimeSection(node);
    }

    public void inAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        inAScopedSectionRuntimeSection(node);
        if(node.getScopedSection() != null)
        {
            node.getScopedSection().apply(this);
        }
        outAScopedSectionRuntimeSection(node);
    }

    public void inAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        inAExpressionStatementRuntimeSection(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementRuntimeSection(node);
    }

    public void inAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        inAConditionalSectionRuntimeSection(node);
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAConditionalSectionRuntimeSection(node);
    }

    public void inAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        inAIterativeSectionRuntimeSection(node);
        if(node.getIterativeSection() != null)
        {
            node.getIterativeSection().apply(this);
        }
        outAIterativeSectionRuntimeSection(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDeclaratorList() != null)
        {
            node.getDeclaratorList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inATypealiasDefinition(ATypealiasDefinition node)
    {
        defaultIn(node);
    }

    public void outATypealiasDefinition(ATypealiasDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypealiasDefinition(ATypealiasDefinition node)
    {
        inATypealiasDefinition(node);
        if(node.getTypealias() != null)
        {
            node.getTypealias().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypealiasDefinition(node);
    }

    public void inAStructDefinition(AStructDefinition node)
    {
        defaultIn(node);
    }

    public void outAStructDefinition(AStructDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructDefinition(AStructDefinition node)
    {
        inAStructDefinition(node);
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getDeclaratorList() != null)
        {
            node.getDeclaratorList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAStructDefinition(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAConstantDefinition(node);
    }

    public void inAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        inAExcludingInitializationVariableDeclaration(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExcludingInitializationVariableDeclaration(node);
    }

    public void inAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        inAIncludingInitializationVariableDeclaration(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIncludingInitializationVariableDeclaration(node);
    }

    public void inAEmptySection(AEmptySection node)
    {
        defaultIn(node);
    }

    public void outAEmptySection(AEmptySection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySection(AEmptySection node)
    {
        inAEmptySection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAEmptySection(node);
    }

    public void inAScopedSection(AScopedSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSection(AScopedSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSection(AScopedSection node)
    {
        inAScopedSection(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAScopedSection(node);
    }

    public void inABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicExpressionStatement(ABasicExpressionStatement node)
    {
        inABasicExpressionStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outABasicExpressionStatement(node);
    }

    public void inAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        inAAssignmentExpressionStatement(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        if(node.getAssignmentOp() != null)
        {
            node.getAssignmentOp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentExpressionStatement(node);
    }

    public void inAConditionalSection(AConditionalSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSection(AConditionalSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSection(AConditionalSection node)
    {
        inAConditionalSection(node);
        if(node.getConditionalBranchKeyword() != null)
        {
            node.getConditionalBranchKeyword().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getElseSection() != null)
        {
            node.getElseSection().apply(this);
        }
        outAConditionalSection(node);
    }

    public void inAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        inAExcludingBranchElseSection(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAExcludingBranchElseSection(node);
    }

    public void inAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        inAIncludingBranchElseSection(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAIncludingBranchElseSection(node);
    }

    public void inALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultIn(node);
    }

    public void outALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopIterativeSection(ALoopIterativeSection node)
    {
        inALoopIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outALoopIterativeSection(node);
    }

    public void inAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        inAConditionalIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAConditionalIterativeSection(node);
    }

    public void inADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        inADoConditionalIterativeSection(node);
        if(node.getIterativeSectionLabel() != null)
        {
            node.getIterativeSectionLabel().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getScopeContents() != null)
        {
            node.getScopeContents().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADoConditionalIterativeSection(node);
    }

    public void inAScopeContents(AScopeContents node)
    {
        defaultIn(node);
    }

    public void outAScopeContents(AScopeContents node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopeContents(AScopeContents node)
    {
        inAScopeContents(node);
        {
            List<PRuntimeSection> copy = new ArrayList<PRuntimeSection>(node.getRuntimeSection());
            for(PRuntimeSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        outAScopeContents(node);
    }

    public void inAExitStopStatement(AExitStopStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStopStatement(AExitStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitStopStatement(AExitStopStatement node)
    {
        inAExitStopStatement(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAExitStopStatement(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAReturnStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAContinueStopStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outABreakStopStatement(node);
    }

    public void inADead0DeadSection(ADead0DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead0DeadSection(ADead0DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead0DeadSection(ADead0DeadSection node)
    {
        inADead0DeadSection(node);
        if(node.getRuntimeSection() != null)
        {
            node.getRuntimeSection().apply(this);
        }
        outADead0DeadSection(node);
    }

    public void inADead1DeadSection(ADead1DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead1DeadSection(ADead1DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead1DeadSection(ADead1DeadSection node)
    {
        inADead1DeadSection(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADead1DeadSection(node);
    }

    public void inADead2DeadSection(ADead2DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead2DeadSection(ADead2DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead2DeadSection(ADead2DeadSection node)
    {
        inADead2DeadSection(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADead2DeadSection(node);
    }

    public void inADead3DeadSection(ADead3DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead3DeadSection(ADead3DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead3DeadSection(ADead3DeadSection node)
    {
        inADead3DeadSection(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADead3DeadSection(node);
    }

    public void inADead4DeadSection(ADead4DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead4DeadSection(ADead4DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead4DeadSection(ADead4DeadSection node)
    {
        inADead4DeadSection(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADead4DeadSection(node);
    }

    public void inARawType(ARawType node)
    {
        defaultIn(node);
    }

    public void outARawType(ARawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARawType(ARawType node)
    {
        inARawType(node);
        if(node.getRawType() != null)
        {
            node.getRawType().apply(this);
        }
        outARawType(node);
    }

    public void inAAddressOfType(AAddressOfType node)
    {
        defaultIn(node);
    }

    public void outAAddressOfType(AAddressOfType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfType(AAddressOfType node)
    {
        inAAddressOfType(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAAddressOfType(node);
    }

    public void inADoubleAddressOfType(ADoubleAddressOfType node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfType(ADoubleAddressOfType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfType(ADoubleAddressOfType node)
    {
        inADoubleAddressOfType(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADoubleAddressOfType(node);
    }

    public void inANominalRawType(ANominalRawType node)
    {
        defaultIn(node);
    }

    public void outANominalRawType(ANominalRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANominalRawType(ANominalRawType node)
    {
        inANominalRawType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANominalRawType(node);
    }

    public void inAArrayRawType(AArrayRawType node)
    {
        defaultIn(node);
    }

    public void outAArrayRawType(AArrayRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRawType(AArrayRawType node)
    {
        inAArrayRawType(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRawType(node);
    }

    public void inATupleRawType(ATupleRawType node)
    {
        defaultIn(node);
    }

    public void outATupleRawType(ATupleRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleRawType(ATupleRawType node)
    {
        inATupleRawType(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTupleTypeList() != null)
        {
            node.getTupleTypeList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATupleRawType(node);
    }

    public void inAFunctionRawType(AFunctionRawType node)
    {
        defaultIn(node);
    }

    public void outAFunctionRawType(AFunctionRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionRawType(AFunctionRawType node)
    {
        inAFunctionRawType(node);
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outAFunctionRawType(node);
    }

    public void inATupleTypeList(ATupleTypeList node)
    {
        defaultIn(node);
    }

    public void outATupleTypeList(ATupleTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleTypeList(ATupleTypeList node)
    {
        inATupleTypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        outATupleTypeList(node);
    }

    public void inATypeList(ATypeList node)
    {
        defaultIn(node);
    }

    public void outATypeList(ATypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeList(ATypeList node)
    {
        inATypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PTypeListTail> copy = new ArrayList<PTypeListTail>(node.getTypeListTail());
            for(PTypeListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATypeList(node);
    }

    public void inATypeListTail(ATypeListTail node)
    {
        defaultIn(node);
    }

    public void outATypeListTail(ATypeListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeListTail(ATypeListTail node)
    {
        inATypeListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeListTail(node);
    }

    public void inAReturnType(AReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType(AReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        inAReturnType(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAReturnType(node);
    }

    public void inATypeAnnotation(ATypeAnnotation node)
    {
        defaultIn(node);
    }

    public void outATypeAnnotation(ATypeAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAnnotation(ATypeAnnotation node)
    {
        inATypeAnnotation(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeAnnotation(node);
    }

    public void inADeclarator(ADeclarator node)
    {
        defaultIn(node);
    }

    public void outADeclarator(ADeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarator(ADeclarator node)
    {
        inADeclarator(node);
        {
            List<PVariableModifier> copy = new ArrayList<PVariableModifier>(node.getVariableModifier());
            for(PVariableModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        outADeclarator(node);
    }

    public void inAStaticVariableModifier(AStaticVariableModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticVariableModifier(AStaticVariableModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticVariableModifier(AStaticVariableModifier node)
    {
        inAStaticVariableModifier(node);
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        outAStaticVariableModifier(node);
    }

    public void inAMutVariableModifier(AMutVariableModifier node)
    {
        defaultIn(node);
    }

    public void outAMutVariableModifier(AMutVariableModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMutVariableModifier(AMutVariableModifier node)
    {
        inAMutVariableModifier(node);
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        outAMutVariableModifier(node);
    }

    public void inADeclaratorList(ADeclaratorList node)
    {
        defaultIn(node);
    }

    public void outADeclaratorList(ADeclaratorList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorList(ADeclaratorList node)
    {
        inADeclaratorList(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        {
            List<PDeclaratorListTail> copy = new ArrayList<PDeclaratorListTail>(node.getDeclaratorListTail());
            for(PDeclaratorListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outADeclaratorList(node);
    }

    public void inADeclaratorListTail(ADeclaratorListTail node)
    {
        defaultIn(node);
    }

    public void outADeclaratorListTail(ADeclaratorListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorListTail(ADeclaratorListTail node)
    {
        inADeclaratorListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        outADeclaratorListTail(node);
    }

    public void inAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionLabel(AIterativeSectionLabel node)
    {
        inAIterativeSectionLabel(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAIterativeSectionLabel(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAExpression(node);
    }

    public void inAConstantExpression(AConstantExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantExpression(AConstantExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpression(AConstantExpression node)
    {
        inAConstantExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAConstantExpression(node);
    }

    public void inAAssignmentExpression(AAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpression(AAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpression(AAssignmentExpression node)
    {
        inAAssignmentExpression(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAAssignmentExpression(node);
    }

    public void inAConditionalExpression(AConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionalExpression(AConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalExpression(AConditionalExpression node)
    {
        inAConditionalExpression(node);
        if(node.getConditionalExpression0() != null)
        {
            node.getConditionalExpression0().apply(this);
        }
        outAConditionalExpression(node);
    }

    public void inAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        inAPrioritizedExpression0(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAPrioritizedExpression0(node);
    }

    public void inABinaryExpression0(ABinaryExpression0 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression0(ABinaryExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression0(ABinaryExpression0 node)
    {
        inABinaryExpression0(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outABinaryExpression0(node);
    }

    public void inAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        inAPrioritizedExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAPrioritizedExpression1(node);
    }

    public void inABinaryExpression1(ABinaryExpression1 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression1(ABinaryExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression1(ABinaryExpression1 node)
    {
        inABinaryExpression1(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outABinaryExpression1(node);
    }

    public void inAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        inAPrioritizedExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAPrioritizedExpression2(node);
    }

    public void inABinaryExpression2(ABinaryExpression2 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression2(ABinaryExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression2(ABinaryExpression2 node)
    {
        inABinaryExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outABinaryExpression2(node);
    }

    public void inAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        inAPrioritizedExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAPrioritizedExpression3(node);
    }

    public void inABinaryExpression3(ABinaryExpression3 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression3(ABinaryExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression3(ABinaryExpression3 node)
    {
        inABinaryExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outABinaryExpression3(node);
    }

    public void inAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        inAPrioritizedExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAPrioritizedExpression4(node);
    }

    public void inABinaryExpression4(ABinaryExpression4 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression4(ABinaryExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression4(ABinaryExpression4 node)
    {
        inABinaryExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outABinaryExpression4(node);
    }

    public void inAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        inAPrioritizedExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAPrioritizedExpression5(node);
    }

    public void inABinaryExpression5(ABinaryExpression5 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression5(ABinaryExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression5(ABinaryExpression5 node)
    {
        inABinaryExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outABinaryExpression5(node);
    }

    public void inAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        inAPrioritizedExpression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outAPrioritizedExpression6(node);
    }

    public void inAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpression6(AUnaryExpression6 node)
    {
        inAUnaryExpression6(node);
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAUnaryExpression6(node);
    }

    public void inADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultIn(node);
    }

    public void outADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceExpression6(ADereferenceExpression6 node)
    {
        inADereferenceExpression6(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outADereferenceExpression6(node);
    }

    public void inAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultIn(node);
    }

    public void outAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfExpression6(AAddressOfExpression6 node)
    {
        inAAddressOfExpression6(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAAddressOfExpression6(node);
    }

    public void inADoubleAddressOfExpression6(ADoubleAddressOfExpression6 node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfExpression6(ADoubleAddressOfExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfExpression6(ADoubleAddressOfExpression6 node)
    {
        inADoubleAddressOfExpression6(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outADoubleAddressOfExpression6(node);
    }

    public void inAParenthesesExpression7(AParenthesesExpression7 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression7(AParenthesesExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression7(AParenthesesExpression7 node)
    {
        inAParenthesesExpression7(node);
        if(node.getParenthesesExpression() != null)
        {
            node.getParenthesesExpression().apply(this);
        }
        outAParenthesesExpression7(node);
    }

    public void inASimpleExpression7(ASimpleExpression7 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression7(ASimpleExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpression7(ASimpleExpression7 node)
    {
        inASimpleExpression7(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleExpression7(node);
    }

    public void inAArrayListExpression7(AArrayListExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayListExpression7(AArrayListExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayListExpression7(AArrayListExpression7 node)
    {
        inAArrayListExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayListExpression7(node);
    }

    public void inAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRepeatExpression7(AArrayRepeatExpression7 node)
    {
        inAArrayRepeatExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRepeatExpression7(node);
    }

    public void inAIndexExpression7(AIndexExpression7 node)
    {
        defaultIn(node);
    }

    public void outAIndexExpression7(AIndexExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexExpression7(AIndexExpression7 node)
    {
        inAIndexExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAIndexExpression7(node);
    }

    public void inATupleExpression7(ATupleExpression7 node)
    {
        defaultIn(node);
    }

    public void outATupleExpression7(ATupleExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleExpression7(ATupleExpression7 node)
    {
        inATupleExpression7(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTupleExpressionList() != null)
        {
            node.getTupleExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATupleExpression7(node);
    }

    public void inAStructExpression7(AStructExpression7 node)
    {
        defaultIn(node);
    }

    public void outAStructExpression7(AStructExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructExpression7(AStructExpression7 node)
    {
        inAStructExpression7(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAStructExpression7(node);
    }

    public void inAMemberExpression7(AMemberExpression7 node)
    {
        defaultIn(node);
    }

    public void outAMemberExpression7(AMemberExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberExpression7(AMemberExpression7 node)
    {
        inAMemberExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAMemberExpression7(node);
    }

    public void inAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression7(AFunctionExpression7 node)
    {
        inAFunctionExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunctionExpression7(node);
    }

    public void inAParenthesesExpression(AParenthesesExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression(AParenthesesExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression(AParenthesesExpression node)
    {
        inAParenthesesExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesesExpression(node);
    }

    public void inAValueSimpleExpression(AValueSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAValueSimpleExpression(AValueSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueSimpleExpression(AValueSimpleExpression node)
    {
        inAValueSimpleExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueSimpleExpression(node);
    }

    public void inAVariableSimpleExpression(AVariableSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAVariableSimpleExpression(AVariableSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableSimpleExpression(AVariableSimpleExpression node)
    {
        inAVariableSimpleExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVariableSimpleExpression(node);
    }

    public void inATupleExpressionList(ATupleExpressionList node)
    {
        defaultIn(node);
    }

    public void outATupleExpressionList(ATupleExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleExpressionList(ATupleExpressionList node)
    {
        inATupleExpressionList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        outATupleExpressionList(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PExpressionListTail> copy = new ArrayList<PExpressionListTail>(node.getExpressionListTail());
            for(PExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionList(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inABoolValue(ABoolValue node)
    {
        defaultIn(node);
    }

    public void outABoolValue(ABoolValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValue(ABoolValue node)
    {
        inABoolValue(node);
        if(node.getBoolValue() != null)
        {
            node.getBoolValue().apply(this);
        }
        outABoolValue(node);
    }

    public void inAIntValue(AIntValue node)
    {
        defaultIn(node);
    }

    public void outAIntValue(AIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValue(AIntValue node)
    {
        inAIntValue(node);
        if(node.getIntValue() != null)
        {
            node.getIntValue().apply(this);
        }
        outAIntValue(node);
    }

    public void inANatValue(ANatValue node)
    {
        defaultIn(node);
    }

    public void outANatValue(ANatValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatValue(ANatValue node)
    {
        inANatValue(node);
        if(node.getNatValue() != null)
        {
            node.getNatValue().apply(this);
        }
        outANatValue(node);
    }

    public void inACharValue(ACharValue node)
    {
        defaultIn(node);
    }

    public void outACharValue(ACharValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValue(ACharValue node)
    {
        inACharValue(node);
        if(node.getCharValue() != null)
        {
            node.getCharValue().apply(this);
        }
        outACharValue(node);
    }

    public void inASizeofValue(ASizeofValue node)
    {
        defaultIn(node);
    }

    public void outASizeofValue(ASizeofValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeofValue(ASizeofValue node)
    {
        inASizeofValue(node);
        if(node.getSizeof() != null)
        {
            node.getSizeof().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASizeofValue(node);
    }

    public void inAPrioritizedConditionalExpression0(APrioritizedConditionalExpression0 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression0(APrioritizedConditionalExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression0(APrioritizedConditionalExpression0 node)
    {
        inAPrioritizedConditionalExpression0(node);
        if(node.getConditionalExpression1() != null)
        {
            node.getConditionalExpression1().apply(this);
        }
        outAPrioritizedConditionalExpression0(node);
    }

    public void inABinaryConditionalExpression0(ABinaryConditionalExpression0 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression0(ABinaryConditionalExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression0(ABinaryConditionalExpression0 node)
    {
        inABinaryConditionalExpression0(node);
        if(node.getConditionalExpression0() != null)
        {
            node.getConditionalExpression0().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getConditionalExpression1() != null)
        {
            node.getConditionalExpression1().apply(this);
        }
        outABinaryConditionalExpression0(node);
    }

    public void inAPrioritizedConditionalExpression1(APrioritizedConditionalExpression1 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression1(APrioritizedConditionalExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression1(APrioritizedConditionalExpression1 node)
    {
        inAPrioritizedConditionalExpression1(node);
        if(node.getConditionalExpression2() != null)
        {
            node.getConditionalExpression2().apply(this);
        }
        outAPrioritizedConditionalExpression1(node);
    }

    public void inABinaryConditionalExpression1(ABinaryConditionalExpression1 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression1(ABinaryConditionalExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression1(ABinaryConditionalExpression1 node)
    {
        inABinaryConditionalExpression1(node);
        if(node.getConditionalExpression1() != null)
        {
            node.getConditionalExpression1().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getConditionalExpression2() != null)
        {
            node.getConditionalExpression2().apply(this);
        }
        outABinaryConditionalExpression1(node);
    }

    public void inAPrioritizedConditionalExpression2(APrioritizedConditionalExpression2 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression2(APrioritizedConditionalExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression2(APrioritizedConditionalExpression2 node)
    {
        inAPrioritizedConditionalExpression2(node);
        if(node.getConditionalExpression3() != null)
        {
            node.getConditionalExpression3().apply(this);
        }
        outAPrioritizedConditionalExpression2(node);
    }

    public void inABinaryConditionalExpression2(ABinaryConditionalExpression2 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression2(ABinaryConditionalExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression2(ABinaryConditionalExpression2 node)
    {
        inABinaryConditionalExpression2(node);
        if(node.getConditionalExpression2() != null)
        {
            node.getConditionalExpression2().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getConditionalExpression3() != null)
        {
            node.getConditionalExpression3().apply(this);
        }
        outABinaryConditionalExpression2(node);
    }

    public void inAPrioritizedConditionalExpression3(APrioritizedConditionalExpression3 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression3(APrioritizedConditionalExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression3(APrioritizedConditionalExpression3 node)
    {
        inAPrioritizedConditionalExpression3(node);
        if(node.getConditionalExpression4() != null)
        {
            node.getConditionalExpression4().apply(this);
        }
        outAPrioritizedConditionalExpression3(node);
    }

    public void inABinaryConditionalExpression3(ABinaryConditionalExpression3 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression3(ABinaryConditionalExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression3(ABinaryConditionalExpression3 node)
    {
        inABinaryConditionalExpression3(node);
        if(node.getConditionalExpression3() != null)
        {
            node.getConditionalExpression3().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getConditionalExpression4() != null)
        {
            node.getConditionalExpression4().apply(this);
        }
        outABinaryConditionalExpression3(node);
    }

    public void inAPrioritizedConditionalExpression4(APrioritizedConditionalExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression4(APrioritizedConditionalExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression4(APrioritizedConditionalExpression4 node)
    {
        inAPrioritizedConditionalExpression4(node);
        if(node.getConditionalExpression5() != null)
        {
            node.getConditionalExpression5().apply(this);
        }
        outAPrioritizedConditionalExpression4(node);
    }

    public void inABinaryConditionalExpression4(ABinaryConditionalExpression4 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression4(ABinaryConditionalExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression4(ABinaryConditionalExpression4 node)
    {
        inABinaryConditionalExpression4(node);
        if(node.getConditionalExpression4() != null)
        {
            node.getConditionalExpression4().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getConditionalExpression5() != null)
        {
            node.getConditionalExpression5().apply(this);
        }
        outABinaryConditionalExpression4(node);
    }

    public void inAPrioritizedConditionalExpression5(APrioritizedConditionalExpression5 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression5(APrioritizedConditionalExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression5(APrioritizedConditionalExpression5 node)
    {
        inAPrioritizedConditionalExpression5(node);
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outAPrioritizedConditionalExpression5(node);
    }

    public void inABinaryConditionalExpression5(ABinaryConditionalExpression5 node)
    {
        defaultIn(node);
    }

    public void outABinaryConditionalExpression5(ABinaryConditionalExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryConditionalExpression5(ABinaryConditionalExpression5 node)
    {
        inABinaryConditionalExpression5(node);
        if(node.getConditionalExpression5() != null)
        {
            node.getConditionalExpression5().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outABinaryConditionalExpression5(node);
    }

    public void inAPrioritizedConditionalExpression6(APrioritizedConditionalExpression6 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedConditionalExpression6(APrioritizedConditionalExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedConditionalExpression6(APrioritizedConditionalExpression6 node)
    {
        inAPrioritizedConditionalExpression6(node);
        if(node.getConditionalExpression7() != null)
        {
            node.getConditionalExpression7().apply(this);
        }
        outAPrioritizedConditionalExpression6(node);
    }

    public void inAUnaryConditionalExpression6(AUnaryConditionalExpression6 node)
    {
        defaultIn(node);
    }

    public void outAUnaryConditionalExpression6(AUnaryConditionalExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryConditionalExpression6(AUnaryConditionalExpression6 node)
    {
        inAUnaryConditionalExpression6(node);
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outAUnaryConditionalExpression6(node);
    }

    public void inADereferenceConditionalExpression6(ADereferenceConditionalExpression6 node)
    {
        defaultIn(node);
    }

    public void outADereferenceConditionalExpression6(ADereferenceConditionalExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceConditionalExpression6(ADereferenceConditionalExpression6 node)
    {
        inADereferenceConditionalExpression6(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outADereferenceConditionalExpression6(node);
    }

    public void inAAddressOfConditionalExpression6(AAddressOfConditionalExpression6 node)
    {
        defaultIn(node);
    }

    public void outAAddressOfConditionalExpression6(AAddressOfConditionalExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfConditionalExpression6(AAddressOfConditionalExpression6 node)
    {
        inAAddressOfConditionalExpression6(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outAAddressOfConditionalExpression6(node);
    }

    public void inADoubleAddressOfConditionalExpression6(ADoubleAddressOfConditionalExpression6 node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfConditionalExpression6(ADoubleAddressOfConditionalExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfConditionalExpression6(ADoubleAddressOfConditionalExpression6 node)
    {
        inADoubleAddressOfConditionalExpression6(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getConditionalExpression6() != null)
        {
            node.getConditionalExpression6().apply(this);
        }
        outADoubleAddressOfConditionalExpression6(node);
    }

    public void inAParenthesesConditionalExpression7(AParenthesesConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesConditionalExpression7(AParenthesesConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesConditionalExpression7(AParenthesesConditionalExpression7 node)
    {
        inAParenthesesConditionalExpression7(node);
        if(node.getParenthesesExpression() != null)
        {
            node.getParenthesesExpression().apply(this);
        }
        outAParenthesesConditionalExpression7(node);
    }

    public void inASimpleConditionalExpression7(ASimpleConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outASimpleConditionalExpression7(ASimpleConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditionalExpression7(ASimpleConditionalExpression7 node)
    {
        inASimpleConditionalExpression7(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleConditionalExpression7(node);
    }

    public void inAArrayListConditionalExpression7(AArrayListConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayListConditionalExpression7(AArrayListConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayListConditionalExpression7(AArrayListConditionalExpression7 node)
    {
        inAArrayListConditionalExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayListConditionalExpression7(node);
    }

    public void inAArrayRepeatConditionalExpression7(AArrayRepeatConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAArrayRepeatConditionalExpression7(AArrayRepeatConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRepeatConditionalExpression7(AArrayRepeatConditionalExpression7 node)
    {
        inAArrayRepeatConditionalExpression7(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRepeatConditionalExpression7(node);
    }

    public void inAIndexConditionalExpression7(AIndexConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAIndexConditionalExpression7(AIndexConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexConditionalExpression7(AIndexConditionalExpression7 node)
    {
        inAIndexConditionalExpression7(node);
        if(node.getConditionalExpression7() != null)
        {
            node.getConditionalExpression7().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAIndexConditionalExpression7(node);
    }

    public void inATupleConditionalExpression7(ATupleConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outATupleConditionalExpression7(ATupleConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleConditionalExpression7(ATupleConditionalExpression7 node)
    {
        inATupleConditionalExpression7(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTupleExpressionList() != null)
        {
            node.getTupleExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATupleConditionalExpression7(node);
    }

    public void inAMemberConditionalExpression7(AMemberConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAMemberConditionalExpression7(AMemberConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberConditionalExpression7(AMemberConditionalExpression7 node)
    {
        inAMemberConditionalExpression7(node);
        if(node.getConditionalExpression7() != null)
        {
            node.getConditionalExpression7().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAMemberConditionalExpression7(node);
    }

    public void inAFunctionConditionalExpression7(AFunctionConditionalExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFunctionConditionalExpression7(AFunctionConditionalExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionConditionalExpression7(AFunctionConditionalExpression7 node)
    {
        inAFunctionConditionalExpression7(node);
        if(node.getConditionalExpression7() != null)
        {
            node.getConditionalExpression7().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunctionConditionalExpression7(node);
    }

    public void inAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        inAEqualsAssignmentOp(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsAssignmentOp(node);
    }

    public void inAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignmentOp(APlusAssignmentOp node)
    {
        inAPlusAssignmentOp(node);
        if(node.getPlusEquals() != null)
        {
            node.getPlusEquals().apply(this);
        }
        outAPlusAssignmentOp(node);
    }

    public void inAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAssignmentOp(AAndAssignmentOp node)
    {
        inAAndAssignmentOp(node);
        if(node.getAndEquals() != null)
        {
            node.getAndEquals().apply(this);
        }
        outAAndAssignmentOp(node);
    }

    public void inAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAssignmentOp(AOrAssignmentOp node)
    {
        inAOrAssignmentOp(node);
        if(node.getOrEquals() != null)
        {
            node.getOrEquals().apply(this);
        }
        outAOrAssignmentOp(node);
    }

    public void inAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAssignmentOp(AXorAssignmentOp node)
    {
        inAXorAssignmentOp(node);
        if(node.getXorEquals() != null)
        {
            node.getXorEquals().apply(this);
        }
        outAXorAssignmentOp(node);
    }

    public void inAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        inAMinusAssignmentOp(node);
        if(node.getMinusEquals() != null)
        {
            node.getMinusEquals().apply(this);
        }
        outAMinusAssignmentOp(node);
    }

    public void inAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        inAMultiplyAssignmentOp(node);
        if(node.getMultiplyEquals() != null)
        {
            node.getMultiplyEquals().apply(this);
        }
        outAMultiplyAssignmentOp(node);
    }

    public void inADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideAssignmentOp(ADivideAssignmentOp node)
    {
        inADivideAssignmentOp(node);
        if(node.getDivideEquals() != null)
        {
            node.getDivideEquals().apply(this);
        }
        outADivideAssignmentOp(node);
    }

    public void inARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        inARemainderAssignmentOp(node);
        if(node.getRemainderEquals() != null)
        {
            node.getRemainderEquals().apply(this);
        }
        outARemainderAssignmentOp(node);
    }

    public void inALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        inALeftShiftAssignmentOp(node);
        if(node.getLeftShiftEquals() != null)
        {
            node.getLeftShiftEquals().apply(this);
        }
        outALeftShiftAssignmentOp(node);
    }

    public void inARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        inARightShiftAssignmentOp(node);
        if(node.getRightShiftEquals() != null)
        {
            node.getRightShiftEquals().apply(this);
        }
        outARightShiftAssignmentOp(node);
    }

    public void inALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        inALeftRotateAssignmentOp(node);
        if(node.getLeftRotateEquals() != null)
        {
            node.getLeftRotateEquals().apply(this);
        }
        outALeftRotateAssignmentOp(node);
    }

    public void inARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        inARightRotateAssignmentOp(node);
        if(node.getRightRotateEquals() != null)
        {
            node.getRightRotateEquals().apply(this);
        }
        outARightRotateAssignmentOp(node);
    }

    public void inALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        inALogicalAndLogicalBinaryOp(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outALogicalAndLogicalBinaryOp(node);
    }

    public void inALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        inALogicalOrLogicalBinaryOp(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outALogicalOrLogicalBinaryOp(node);
    }

    public void inAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        inAEqualToEqualityBinaryOp(node);
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        outAEqualToEqualityBinaryOp(node);
    }

    public void inANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        inANotEqualToEqualityBinaryOp(node);
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        outANotEqualToEqualityBinaryOp(node);
    }

    public void inALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        inALessThanComparativeBinaryOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanComparativeBinaryOp(node);
    }

    public void inALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        inALessOrEqualComparativeBinaryOp(node);
        if(node.getLessOrEqual() != null)
        {
            node.getLessOrEqual().apply(this);
        }
        outALessOrEqualComparativeBinaryOp(node);
    }

    public void inAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        inAMoreThanComparativeBinaryOp(node);
        if(node.getMoreThan() != null)
        {
            node.getMoreThan().apply(this);
        }
        outAMoreThanComparativeBinaryOp(node);
    }

    public void inAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        inAMoreOrEqualComparativeBinaryOp(node);
        if(node.getMoreOrEqual() != null)
        {
            node.getMoreOrEqual().apply(this);
        }
        outAMoreOrEqualComparativeBinaryOp(node);
    }

    public void inAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        inAPlusAdditiveBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAdditiveBinaryOp(node);
    }

    public void inAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        inAAndAdditiveBinaryOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndAdditiveBinaryOp(node);
    }

    public void inAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        inAOrAdditiveBinaryOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrAdditiveBinaryOp(node);
    }

    public void inAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        inAXorAdditiveBinaryOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorAdditiveBinaryOp(node);
    }

    public void inAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        inAMinusAdditiveBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAdditiveBinaryOp(node);
    }

    public void inAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        inAMultiplyMultiplicativeBinaryOp(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outAMultiplyMultiplicativeBinaryOp(node);
    }

    public void inADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        inADivideMultiplicativeBinaryOp(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADivideMultiplicativeBinaryOp(node);
    }

    public void inARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        inARemainderMultiplicativeBinaryOp(node);
        if(node.getRemainder() != null)
        {
            node.getRemainder().apply(this);
        }
        outARemainderMultiplicativeBinaryOp(node);
    }

    public void inALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        inALeftShiftShiftBinaryOp(node);
        if(node.getLeftShift() != null)
        {
            node.getLeftShift().apply(this);
        }
        outALeftShiftShiftBinaryOp(node);
    }

    public void inARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        inARightShiftShiftBinaryOp(node);
        if(node.getRightShift() != null)
        {
            node.getRightShift().apply(this);
        }
        outARightShiftShiftBinaryOp(node);
    }

    public void inALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        inALeftRotateShiftBinaryOp(node);
        if(node.getLeftRotate() != null)
        {
            node.getLeftRotate().apply(this);
        }
        outALeftRotateShiftBinaryOp(node);
    }

    public void inARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        inARightRotateShiftBinaryOp(node);
        if(node.getRightRotate() != null)
        {
            node.getRightRotate().apply(this);
        }
        outARightRotateShiftBinaryOp(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOp(node);
    }
}
