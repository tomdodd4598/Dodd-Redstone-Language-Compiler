/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUnit(AUnit node)
    {
        defaultIn(node);
    }

    public void outAUnit(AUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        inAUnit(node);
        if(node.getSetup() != null)
        {
            node.getSetup().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAUnit(node);
    }

    public void inASetup(ASetup node)
    {
        defaultIn(node);
    }

    public void outASetup(ASetup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetup(ASetup node)
    {
        inASetup(node);
        {
            List<PSetupSection> copy = new ArrayList<PSetupSection>(node.getSetupSection());
            for(PSetupSection e : copy)
            {
                e.apply(this);
            }
        }
        outASetup(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PProgramSection> copy = new ArrayList<PProgramSection>(node.getProgramSection());
            for(PProgramSection e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADirectiveFunctionSetupSection(ADirectiveFunctionSetupSection node)
    {
        defaultIn(node);
    }

    public void outADirectiveFunctionSetupSection(ADirectiveFunctionSetupSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectiveFunctionSetupSection(ADirectiveFunctionSetupSection node)
    {
        inADirectiveFunctionSetupSection(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getDirectiveEnd() != null)
        {
            node.getDirectiveEnd().apply(this);
        }
        outADirectiveFunctionSetupSection(node);
    }

    public void inADirectiveEnd(ADirectiveEnd node)
    {
        defaultIn(node);
    }

    public void outADirectiveEnd(ADirectiveEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectiveEnd(ADirectiveEnd node)
    {
        inADirectiveEnd(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outADirectiveEnd(node);
    }

    public void inAFunctionDeclarationProgramSection(AFunctionDeclarationProgramSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarationProgramSection(AFunctionDeclarationProgramSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclarationProgramSection(AFunctionDeclarationProgramSection node)
    {
        inAFunctionDeclarationProgramSection(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFunctionDeclarationProgramSection(node);
    }

    public void inAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinitionProgramSection(AFunctionDefinitionProgramSection node)
    {
        inAFunctionDefinitionProgramSection(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionProgramSection(node);
    }

    public void inABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        defaultIn(node);
    }

    public void outABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicSectionProgramSection(ABasicSectionProgramSection node)
    {
        inABasicSectionProgramSection(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outABasicSectionProgramSection(node);
    }

    public void inAEmptyStatementBasicSection(AEmptyStatementBasicSection node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatementBasicSection(AEmptyStatementBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatementBasicSection(AEmptyStatementBasicSection node)
    {
        inAEmptyStatementBasicSection(node);
        if(node.getEmptyStatement() != null)
        {
            node.getEmptyStatement().apply(this);
        }
        outAEmptyStatementBasicSection(node);
    }

    public void inAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        inAVariableDeclarationBasicSection(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationBasicSection(node);
    }

    public void inAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementBasicSection(AExpressionStatementBasicSection node)
    {
        inAExpressionStatementBasicSection(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementBasicSection(node);
    }

    public void inAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSectionBasicSection(AConditionalSectionBasicSection node)
    {
        inAConditionalSectionBasicSection(node);
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAConditionalSectionBasicSection(node);
    }

    public void inAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionBasicSection(AIterativeSectionBasicSection node)
    {
        inAIterativeSectionBasicSection(node);
        if(node.getIterativeSection() != null)
        {
            node.getIterativeSection().apply(this);
        }
        outAIterativeSectionBasicSection(node);
    }

    public void inAGotoStatementBasicSection(AGotoStatementBasicSection node)
    {
        defaultIn(node);
    }

    public void outAGotoStatementBasicSection(AGotoStatementBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoStatementBasicSection(AGotoStatementBasicSection node)
    {
        inAGotoStatementBasicSection(node);
        if(node.getGotoStatement() != null)
        {
            node.getGotoStatement().apply(this);
        }
        outAGotoStatementBasicSection(node);
    }

    public void inASectionLabelBasicSection(ASectionLabelBasicSection node)
    {
        defaultIn(node);
    }

    public void outASectionLabelBasicSection(ASectionLabelBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASectionLabelBasicSection(ASectionLabelBasicSection node)
    {
        inASectionLabelBasicSection(node);
        if(node.getSectionLabel() != null)
        {
            node.getSectionLabel().apply(this);
        }
        outASectionLabelBasicSection(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getParParameterList() != null)
        {
            node.getParParameterList().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        {
            List<TModifier> copy = new ArrayList<TModifier>(node.getModifier());
            for(TModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getParParameterList() != null)
        {
            node.getParParameterList().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAEmptyStatement(AEmptyStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatement(AEmptyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        inAEmptyStatement(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAEmptyStatement(node);
    }

    public void inAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        inAExcludingInitializationVariableDeclaration(node);
        {
            List<TModifier> copy = new ArrayList<TModifier>(node.getModifier());
            for(TModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAExcludingInitializationVariableDeclaration(node);
    }

    public void inAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        inAIncludingInitializationVariableDeclaration(node);
        {
            List<TModifier> copy = new ArrayList<TModifier>(node.getModifier());
            for(TModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getInitializationExpression() != null)
        {
            node.getInitializationExpression().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAIncludingInitializationVariableDeclaration(node);
    }

    public void inABasicInitializationExpression(ABasicInitializationExpression node)
    {
        defaultIn(node);
    }

    public void outABasicInitializationExpression(ABasicInitializationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicInitializationExpression(ABasicInitializationExpression node)
    {
        inABasicInitializationExpression(node);
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        outABasicInitializationExpression(node);
    }

    public void inAArrayInitializationExpression(AArrayInitializationExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayInitializationExpression(AArrayInitializationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitializationExpression(AArrayInitializationExpression node)
    {
        inAArrayInitializationExpression(node);
        if(node.getBracketExpressionList() != null)
        {
            node.getBracketExpressionList().apply(this);
        }
        outAArrayInitializationExpression(node);
    }

    public void inAArrayFillInitializationExpression(AArrayFillInitializationExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayFillInitializationExpression(AArrayFillInitializationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayFillInitializationExpression(AArrayFillInitializationExpression node)
    {
        inAArrayFillInitializationExpression(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getArrayTypeTail() != null)
        {
            node.getArrayTypeTail().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayFillInitializationExpression(node);
    }

    public void inABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outABasicExpressionStatement(ABasicExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicExpressionStatement(ABasicExpressionStatement node)
    {
        inABasicExpressionStatement(node);
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outABasicExpressionStatement(node);
    }

    public void inAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpressionStatement(AAssignmentExpressionStatement node)
    {
        inAAssignmentExpressionStatement(node);
        if(node.getExpressionLvalue() != null)
        {
            node.getExpressionLvalue().apply(this);
        }
        if(node.getAssignmentOp() != null)
        {
            node.getAssignmentOp().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAAssignmentExpressionStatement(node);
    }

    public void inAConditionalSection(AConditionalSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSection(AConditionalSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSection(AConditionalSection node)
    {
        inAConditionalSection(node);
        if(node.getConditionalStartSection() != null)
        {
            node.getConditionalStartSection().apply(this);
        }
        {
            List<PConditionalMiddleSection> copy = new ArrayList<PConditionalMiddleSection>(node.getConditionalMiddleSection());
            for(PConditionalMiddleSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElseSection() != null)
        {
            node.getElseSection().apply(this);
        }
        outAConditionalSection(node);
    }

    public void inAConditionalStartSection(AConditionalStartSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalStartSection(AConditionalStartSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalStartSection(AConditionalStartSection node)
    {
        inAConditionalStartSection(node);
        if(node.getConditionalStartSectionKeyword() != null)
        {
            node.getConditionalStartSectionKeyword().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAConditionalStartSection(node);
    }

    public void inAConditionalMiddleSection(AConditionalMiddleSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalMiddleSection(AConditionalMiddleSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalMiddleSection(AConditionalMiddleSection node)
    {
        inAConditionalMiddleSection(node);
        if(node.getConditionalMiddleSectionKeyword() != null)
        {
            node.getConditionalMiddleSectionKeyword().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAConditionalMiddleSection(node);
    }

    public void inAElseSection(AElseSection node)
    {
        defaultIn(node);
    }

    public void outAElseSection(AElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseSection(AElseSection node)
    {
        inAElseSection(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAElseSection(node);
    }

    public void inALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultIn(node);
    }

    public void outALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopIterativeSection(ALoopIterativeSection node)
    {
        inALoopIterativeSection(node);
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outALoopIterativeSection(node);
    }

    public void inAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        inAConditionalIterativeSection(node);
        if(node.getConditionalIterativeSectionKeyword() != null)
        {
            node.getConditionalIterativeSectionKeyword().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAConditionalIterativeSection(node);
    }

    public void inADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        inADoConditionalIterativeSection(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getConditionalIterativeSectionKeyword() != null)
        {
            node.getConditionalIterativeSectionKeyword().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADoConditionalIterativeSection(node);
    }

    public void inAGotoStatement(AGotoStatement node)
    {
        defaultIn(node);
    }

    public void outAGotoStatement(AGotoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoStatement(AGotoStatement node)
    {
        inAGotoStatement(node);
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAGotoStatement(node);
    }

    public void inASectionLabel(ASectionLabel node)
    {
        defaultIn(node);
    }

    public void outASectionLabel(ASectionLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASectionLabel(ASectionLabel node)
    {
        inASectionLabel(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outASectionLabel(node);
    }

    public void inAExitStopStatement(AExitStopStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStopStatement(AExitStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitStopStatement(AExitStopStatement node)
    {
        inAExitStopStatement(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAExitStopStatement(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAReturnStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAContinueStopStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outABreakStopStatement(node);
    }

    public void inAExitExpressionStopStatement(AExitExpressionStopStatement node)
    {
        defaultIn(node);
    }

    public void outAExitExpressionStopStatement(AExitExpressionStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitExpressionStopStatement(AExitExpressionStopStatement node)
    {
        inAExitExpressionStopStatement(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAExitExpressionStopStatement(node);
    }

    public void inAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        inAReturnExpressionStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        outAReturnExpressionStopStatement(node);
    }

    public void inADead0DeadSection(ADead0DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead0DeadSection(ADead0DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead0DeadSection(ADead0DeadSection node)
    {
        inADead0DeadSection(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outADead0DeadSection(node);
    }

    public void inADead1DeadSection(ADead1DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead1DeadSection(ADead1DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead1DeadSection(ADead1DeadSection node)
    {
        inADead1DeadSection(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead1DeadSection(node);
    }

    public void inADead2DeadSection(ADead2DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead2DeadSection(ADead2DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead2DeadSection(ADead2DeadSection node)
    {
        inADead2DeadSection(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead2DeadSection(node);
    }

    public void inADead3DeadSection(ADead3DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead3DeadSection(ADead3DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead3DeadSection(ADead3DeadSection node)
    {
        inADead3DeadSection(node);
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead3DeadSection(node);
    }

    public void inADead4DeadSection(ADead4DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead4DeadSection(ADead4DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead4DeadSection(ADead4DeadSection node)
    {
        inADead4DeadSection(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead4DeadSection(node);
    }

    public void inADead5DeadSection(ADead5DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead5DeadSection(ADead5DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead5DeadSection(ADead5DeadSection node)
    {
        inADead5DeadSection(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead5DeadSection(node);
    }

    public void inADead6DeadSection(ADead6DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead6DeadSection(ADead6DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead6DeadSection(ADead6DeadSection node)
    {
        inADead6DeadSection(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outADead6DeadSection(node);
    }

    public void inASemicolonSeparator(ASemicolonSeparator node)
    {
        defaultIn(node);
    }

    public void outASemicolonSeparator(ASemicolonSeparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonSeparator(ASemicolonSeparator node)
    {
        inASemicolonSeparator(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonSeparator(node);
    }

    public void inAEolSeparator(AEolSeparator node)
    {
        defaultIn(node);
    }

    public void outAEolSeparator(AEolSeparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEolSeparator(AEolSeparator node)
    {
        inAEolSeparator(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAEolSeparator(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        {
            List<TAnd> copy = new ArrayList<TAnd>(node.getAnd());
            for(TAnd e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRawType() != null)
        {
            node.getRawType().apply(this);
        }
        outAType(node);
    }

    public void inABasicRawType(ABasicRawType node)
    {
        defaultIn(node);
    }

    public void outABasicRawType(ABasicRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicRawType(ABasicRawType node)
    {
        inABasicRawType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outABasicRawType(node);
    }

    public void inAArrayRawType(AArrayRawType node)
    {
        defaultIn(node);
    }

    public void outAArrayRawType(AArrayRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRawType(AArrayRawType node)
    {
        inAArrayRawType(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getArrayTypeTail() != null)
        {
            node.getArrayTypeTail().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayRawType(node);
    }

    public void inAFunctionRawType(AFunctionRawType node)
    {
        defaultIn(node);
    }

    public void outAFunctionRawType(AFunctionRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionRawType(AFunctionRawType node)
    {
        inAFunctionRawType(node);
        if(node.getParParameterList() != null)
        {
            node.getParParameterList().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outAFunctionRawType(node);
    }

    public void inAArrayTypeTail(AArrayTypeTail node)
    {
        defaultIn(node);
    }

    public void outAArrayTypeTail(AArrayTypeTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypeTail(AArrayTypeTail node)
    {
        inAArrayTypeTail(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        outAArrayTypeTail(node);
    }

    public void inAReturnType(AReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType(AReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        inAReturnType(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAReturnType(node);
    }

    public void inAParParameterList(AParParameterList node)
    {
        defaultIn(node);
    }

    public void outAParParameterList(AParParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParParameterList(AParParameterList node)
    {
        inAParParameterList(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParParameterList(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        {
            List<TModifier> copy = new ArrayList<TModifier>(node.getModifier());
            for(TModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PParameterListTail> copy = new ArrayList<PParameterListTail>(node.getParameterListTail());
            for(PParameterListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParameterList(node);
    }

    public void inAParameterListTail(AParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAParameterListTail(AParameterListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        inAParameterListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<TModifier> copy = new ArrayList<TModifier>(node.getModifier());
            for(TModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParameterListTail(node);
    }

    public void inAExcludingNameParameter(AExcludingNameParameter node)
    {
        defaultIn(node);
    }

    public void outAExcludingNameParameter(AExcludingNameParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingNameParameter(AExcludingNameParameter node)
    {
        inAExcludingNameParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAExcludingNameParameter(node);
    }

    public void inAIncludingNameParameter(AIncludingNameParameter node)
    {
        defaultIn(node);
    }

    public void outAIncludingNameParameter(AIncludingNameParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingNameParameter(AIncludingNameParameter node)
    {
        inAIncludingNameParameter(node);
        {
            List<TMultiply> copy = new ArrayList<TMultiply>(node.getMultiply());
            for(TMultiply e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAIncludingNameParameter(node);
    }

    public void inADeclarator(ADeclarator node)
    {
        defaultIn(node);
    }

    public void outADeclarator(ADeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarator(ADeclarator node)
    {
        inADeclarator(node);
        {
            List<TMultiply> copy = new ArrayList<TMultiply>(node.getMultiply());
            for(TMultiply e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADeclarator(node);
    }

    public void inAExpressionLvalue(AExpressionLvalue node)
    {
        defaultIn(node);
    }

    public void outAExpressionLvalue(AExpressionLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionLvalue(AExpressionLvalue node)
    {
        inAExpressionLvalue(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAExpressionLvalue(node);
    }

    public void inAExpressionRvalue(AExpressionRvalue node)
    {
        defaultIn(node);
    }

    public void outAExpressionRvalue(AExpressionRvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionRvalue(AExpressionRvalue node)
    {
        inAExpressionRvalue(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        outAExpressionRvalue(node);
    }

    public void inAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression0(APrioritizedExpression0 node)
    {
        inAPrioritizedExpression0(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAPrioritizedExpression0(node);
    }

    public void inABinaryExpression0(ABinaryExpression0 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression0(ABinaryExpression0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression0(ABinaryExpression0 node)
    {
        inABinaryExpression0(node);
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outABinaryExpression0(node);
    }

    public void inAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression1(APrioritizedExpression1 node)
    {
        inAPrioritizedExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAPrioritizedExpression1(node);
    }

    public void inABinaryExpression1(ABinaryExpression1 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression1(ABinaryExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression1(ABinaryExpression1 node)
    {
        inABinaryExpression1(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outABinaryExpression1(node);
    }

    public void inAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression2(APrioritizedExpression2 node)
    {
        inAPrioritizedExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAPrioritizedExpression2(node);
    }

    public void inABinaryExpression2(ABinaryExpression2 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression2(ABinaryExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression2(ABinaryExpression2 node)
    {
        inABinaryExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outABinaryExpression2(node);
    }

    public void inAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression3(APrioritizedExpression3 node)
    {
        inAPrioritizedExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAPrioritizedExpression3(node);
    }

    public void inABinaryExpression3(ABinaryExpression3 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression3(ABinaryExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression3(ABinaryExpression3 node)
    {
        inABinaryExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outABinaryExpression3(node);
    }

    public void inAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression4(APrioritizedExpression4 node)
    {
        inAPrioritizedExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAPrioritizedExpression4(node);
    }

    public void inABinaryExpression4(ABinaryExpression4 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression4(ABinaryExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression4(ABinaryExpression4 node)
    {
        inABinaryExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outABinaryExpression4(node);
    }

    public void inAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression5(APrioritizedExpression5 node)
    {
        inAPrioritizedExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAPrioritizedExpression5(node);
    }

    public void inABinaryExpression5(ABinaryExpression5 node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression5(ABinaryExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression5(ABinaryExpression5 node)
    {
        inABinaryExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outABinaryExpression5(node);
    }

    public void inAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression6(APrioritizedExpression6 node)
    {
        inAPrioritizedExpression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outAPrioritizedExpression6(node);
    }

    public void inAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression6(AUnaryExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpression6(AUnaryExpression6 node)
    {
        inAUnaryExpression6(node);
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAUnaryExpression6(node);
    }

    public void inADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultIn(node);
    }

    public void outADereferenceExpression6(ADereferenceExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceExpression6(ADereferenceExpression6 node)
    {
        inADereferenceExpression6(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outADereferenceExpression6(node);
    }

    public void inAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultIn(node);
    }

    public void outAAddressOfExpression6(AAddressOfExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfExpression6(AAddressOfExpression6 node)
    {
        inAAddressOfExpression6(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAddressOfExpression6(node);
    }

    public void inAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression7(APrioritizedExpression7 node)
    {
        inAPrioritizedExpression7(node);
        if(node.getExpression8() != null)
        {
            node.getExpression8().apply(this);
        }
        outAPrioritizedExpression7(node);
    }

    public void inAIndexExpression7(AIndexExpression7 node)
    {
        defaultIn(node);
    }

    public void outAIndexExpression7(AIndexExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexExpression7(AIndexExpression7 node)
    {
        inAIndexExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getBracketExpression() != null)
        {
            node.getBracketExpression().apply(this);
        }
        outAIndexExpression7(node);
    }

    public void inAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression7(AFunctionExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression7(AFunctionExpression7 node)
    {
        inAFunctionExpression7(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        if(node.getParExpressionList() != null)
        {
            node.getParExpressionList().apply(this);
        }
        outAFunctionExpression7(node);
    }

    public void inABracketExpression(ABracketExpression node)
    {
        defaultIn(node);
    }

    public void outABracketExpression(ABracketExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracketExpression(ABracketExpression node)
    {
        inABracketExpression(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outABracketExpression(node);
    }

    public void inABracketExpressionList(ABracketExpressionList node)
    {
        defaultIn(node);
    }

    public void outABracketExpressionList(ABracketExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracketExpressionList(ABracketExpressionList node)
    {
        inABracketExpressionList(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outABracketExpressionList(node);
    }

    public void inAParExpressionList(AParExpressionList node)
    {
        defaultIn(node);
    }

    public void outAParExpressionList(AParExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpressionList(AParExpressionList node)
    {
        inAParExpressionList(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParExpressionList(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        {
            List<PExpressionListTail> copy = new ArrayList<PExpressionListTail>(node.getExpressionListTail());
            for(PExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionList(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpressionRvalue() != null)
        {
            node.getExpressionRvalue().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inAValueExpression8(AValueExpression8 node)
    {
        defaultIn(node);
    }

    public void outAValueExpression8(AValueExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExpression8(AValueExpression8 node)
    {
        inAValueExpression8(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression8(node);
    }

    public void inAVariableExpression8(AVariableExpression8 node)
    {
        defaultIn(node);
    }

    public void outAVariableExpression8(AVariableExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExpression8(AVariableExpression8 node)
    {
        inAVariableExpression8(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVariableExpression8(node);
    }

    public void inAParenthesesExpression8(AParenthesesExpression8 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression8(AParenthesesExpression8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression8(AParenthesesExpression8 node)
    {
        inAParenthesesExpression8(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression0() != null)
        {
            node.getExpression0().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesesExpression8(node);
    }

    public void inAIntValue(AIntValue node)
    {
        defaultIn(node);
    }

    public void outAIntValue(AIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValue(AIntValue node)
    {
        inAIntValue(node);
        if(node.getIntValue() != null)
        {
            node.getIntValue().apply(this);
        }
        outAIntValue(node);
    }

    public void inACharValue(ACharValue node)
    {
        defaultIn(node);
    }

    public void outACharValue(ACharValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValue(ACharValue node)
    {
        inACharValue(node);
        if(node.getCharValue() != null)
        {
            node.getCharValue().apply(this);
        }
        outACharValue(node);
    }

    public void inASizeofBasicTypeValue(ASizeofBasicTypeValue node)
    {
        defaultIn(node);
    }

    public void outASizeofBasicTypeValue(ASizeofBasicTypeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeofBasicTypeValue(ASizeofBasicTypeValue node)
    {
        inASizeofBasicTypeValue(node);
        if(node.getSizeof() != null)
        {
            node.getSizeof().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<TAnd> copy = new ArrayList<TAnd>(node.getAnd());
            for(TAnd e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASizeofBasicTypeValue(node);
    }

    public void inASizeofFunctionTypeValue(ASizeofFunctionTypeValue node)
    {
        defaultIn(node);
    }

    public void outASizeofFunctionTypeValue(ASizeofFunctionTypeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeofFunctionTypeValue(ASizeofFunctionTypeValue node)
    {
        inASizeofFunctionTypeValue(node);
        if(node.getSizeof() != null)
        {
            node.getSizeof().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<TAnd> copy = new ArrayList<TAnd>(node.getAnd());
            for(TAnd e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASizeofFunctionTypeValue(node);
    }

    public void inAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        inAEqualsAssignmentOp(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsAssignmentOp(node);
    }

    public void inALogicalAndAssignmentOp(ALogicalAndAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndAssignmentOp(ALogicalAndAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndAssignmentOp(ALogicalAndAssignmentOp node)
    {
        inALogicalAndAssignmentOp(node);
        if(node.getLogicalAndEquals() != null)
        {
            node.getLogicalAndEquals().apply(this);
        }
        outALogicalAndAssignmentOp(node);
    }

    public void inALogicalOrAssignmentOp(ALogicalOrAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrAssignmentOp(ALogicalOrAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrAssignmentOp(ALogicalOrAssignmentOp node)
    {
        inALogicalOrAssignmentOp(node);
        if(node.getLogicalOrEquals() != null)
        {
            node.getLogicalOrEquals().apply(this);
        }
        outALogicalOrAssignmentOp(node);
    }

    public void inALogicalXorAssignmentOp(ALogicalXorAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALogicalXorAssignmentOp(ALogicalXorAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalXorAssignmentOp(ALogicalXorAssignmentOp node)
    {
        inALogicalXorAssignmentOp(node);
        if(node.getLogicalXorEquals() != null)
        {
            node.getLogicalXorEquals().apply(this);
        }
        outALogicalXorAssignmentOp(node);
    }

    public void inAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignmentOp(APlusAssignmentOp node)
    {
        inAPlusAssignmentOp(node);
        if(node.getPlusEquals() != null)
        {
            node.getPlusEquals().apply(this);
        }
        outAPlusAssignmentOp(node);
    }

    public void inAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAssignmentOp(AAndAssignmentOp node)
    {
        inAAndAssignmentOp(node);
        if(node.getAndEquals() != null)
        {
            node.getAndEquals().apply(this);
        }
        outAAndAssignmentOp(node);
    }

    public void inAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAssignmentOp(AOrAssignmentOp node)
    {
        inAOrAssignmentOp(node);
        if(node.getOrEquals() != null)
        {
            node.getOrEquals().apply(this);
        }
        outAOrAssignmentOp(node);
    }

    public void inAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAssignmentOp(AXorAssignmentOp node)
    {
        inAXorAssignmentOp(node);
        if(node.getXorEquals() != null)
        {
            node.getXorEquals().apply(this);
        }
        outAXorAssignmentOp(node);
    }

    public void inAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        inAMinusAssignmentOp(node);
        if(node.getMinusEquals() != null)
        {
            node.getMinusEquals().apply(this);
        }
        outAMinusAssignmentOp(node);
    }

    public void inAArithmeticLeftShiftAssignmentOp(AArithmeticLeftShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAArithmeticLeftShiftAssignmentOp(AArithmeticLeftShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticLeftShiftAssignmentOp(AArithmeticLeftShiftAssignmentOp node)
    {
        inAArithmeticLeftShiftAssignmentOp(node);
        if(node.getArithmeticLeftShiftEquals() != null)
        {
            node.getArithmeticLeftShiftEquals().apply(this);
        }
        outAArithmeticLeftShiftAssignmentOp(node);
    }

    public void inAArithmeticRightShiftAssignmentOp(AArithmeticRightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAArithmeticRightShiftAssignmentOp(AArithmeticRightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticRightShiftAssignmentOp(AArithmeticRightShiftAssignmentOp node)
    {
        inAArithmeticRightShiftAssignmentOp(node);
        if(node.getArithmeticRightShiftEquals() != null)
        {
            node.getArithmeticRightShiftEquals().apply(this);
        }
        outAArithmeticRightShiftAssignmentOp(node);
    }

    public void inALogicalRightShiftAssignmentOp(ALogicalRightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALogicalRightShiftAssignmentOp(ALogicalRightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalRightShiftAssignmentOp(ALogicalRightShiftAssignmentOp node)
    {
        inALogicalRightShiftAssignmentOp(node);
        if(node.getLogicalRightShiftEquals() != null)
        {
            node.getLogicalRightShiftEquals().apply(this);
        }
        outALogicalRightShiftAssignmentOp(node);
    }

    public void inACircularLeftShiftAssignmentOp(ACircularLeftShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outACircularLeftShiftAssignmentOp(ACircularLeftShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACircularLeftShiftAssignmentOp(ACircularLeftShiftAssignmentOp node)
    {
        inACircularLeftShiftAssignmentOp(node);
        if(node.getCircularLeftShiftEquals() != null)
        {
            node.getCircularLeftShiftEquals().apply(this);
        }
        outACircularLeftShiftAssignmentOp(node);
    }

    public void inACircularRightShiftAssignmentOp(ACircularRightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outACircularRightShiftAssignmentOp(ACircularRightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACircularRightShiftAssignmentOp(ACircularRightShiftAssignmentOp node)
    {
        inACircularRightShiftAssignmentOp(node);
        if(node.getCircularRightShiftEquals() != null)
        {
            node.getCircularRightShiftEquals().apply(this);
        }
        outACircularRightShiftAssignmentOp(node);
    }

    public void inAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        inAMultiplyAssignmentOp(node);
        if(node.getMultiplyEquals() != null)
        {
            node.getMultiplyEquals().apply(this);
        }
        outAMultiplyAssignmentOp(node);
    }

    public void inADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideAssignmentOp(ADivideAssignmentOp node)
    {
        inADivideAssignmentOp(node);
        if(node.getDivideEquals() != null)
        {
            node.getDivideEquals().apply(this);
        }
        outADivideAssignmentOp(node);
    }

    public void inARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        inARemainderAssignmentOp(node);
        if(node.getRemainderEquals() != null)
        {
            node.getRemainderEquals().apply(this);
        }
        outARemainderAssignmentOp(node);
    }

    public void inALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        inALogicalAndLogicalBinaryOp(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outALogicalAndLogicalBinaryOp(node);
    }

    public void inALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        inALogicalOrLogicalBinaryOp(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outALogicalOrLogicalBinaryOp(node);
    }

    public void inALogicalXorLogicalBinaryOp(ALogicalXorLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalXorLogicalBinaryOp(ALogicalXorLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalXorLogicalBinaryOp(ALogicalXorLogicalBinaryOp node)
    {
        inALogicalXorLogicalBinaryOp(node);
        if(node.getLogicalXor() != null)
        {
            node.getLogicalXor().apply(this);
        }
        outALogicalXorLogicalBinaryOp(node);
    }

    public void inAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        inAEqualToEqualityBinaryOp(node);
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        outAEqualToEqualityBinaryOp(node);
    }

    public void inANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        inANotEqualToEqualityBinaryOp(node);
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        outANotEqualToEqualityBinaryOp(node);
    }

    public void inALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        inALessThanComparativeBinaryOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanComparativeBinaryOp(node);
    }

    public void inALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        inALessOrEqualComparativeBinaryOp(node);
        if(node.getLessOrEqual() != null)
        {
            node.getLessOrEqual().apply(this);
        }
        outALessOrEqualComparativeBinaryOp(node);
    }

    public void inAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        inAMoreThanComparativeBinaryOp(node);
        if(node.getMoreThan() != null)
        {
            node.getMoreThan().apply(this);
        }
        outAMoreThanComparativeBinaryOp(node);
    }

    public void inAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        inAMoreOrEqualComparativeBinaryOp(node);
        if(node.getMoreOrEqual() != null)
        {
            node.getMoreOrEqual().apply(this);
        }
        outAMoreOrEqualComparativeBinaryOp(node);
    }

    public void inAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        inAPlusAdditiveBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAdditiveBinaryOp(node);
    }

    public void inAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        inAAndAdditiveBinaryOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndAdditiveBinaryOp(node);
    }

    public void inAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        inAOrAdditiveBinaryOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrAdditiveBinaryOp(node);
    }

    public void inAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        inAXorAdditiveBinaryOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorAdditiveBinaryOp(node);
    }

    public void inAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        inAMinusAdditiveBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAdditiveBinaryOp(node);
    }

    public void inAArithmeticLeftShiftShiftBinaryOp(AArithmeticLeftShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAArithmeticLeftShiftShiftBinaryOp(AArithmeticLeftShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticLeftShiftShiftBinaryOp(AArithmeticLeftShiftShiftBinaryOp node)
    {
        inAArithmeticLeftShiftShiftBinaryOp(node);
        if(node.getArithmeticLeftShift() != null)
        {
            node.getArithmeticLeftShift().apply(this);
        }
        outAArithmeticLeftShiftShiftBinaryOp(node);
    }

    public void inAArithmeticRightShiftShiftBinaryOp(AArithmeticRightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAArithmeticRightShiftShiftBinaryOp(AArithmeticRightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticRightShiftShiftBinaryOp(AArithmeticRightShiftShiftBinaryOp node)
    {
        inAArithmeticRightShiftShiftBinaryOp(node);
        if(node.getArithmeticRightShift() != null)
        {
            node.getArithmeticRightShift().apply(this);
        }
        outAArithmeticRightShiftShiftBinaryOp(node);
    }

    public void inALogicalRightShiftShiftBinaryOp(ALogicalRightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalRightShiftShiftBinaryOp(ALogicalRightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalRightShiftShiftBinaryOp(ALogicalRightShiftShiftBinaryOp node)
    {
        inALogicalRightShiftShiftBinaryOp(node);
        if(node.getLogicalRightShift() != null)
        {
            node.getLogicalRightShift().apply(this);
        }
        outALogicalRightShiftShiftBinaryOp(node);
    }

    public void inACircularLeftShiftShiftBinaryOp(ACircularLeftShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outACircularLeftShiftShiftBinaryOp(ACircularLeftShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACircularLeftShiftShiftBinaryOp(ACircularLeftShiftShiftBinaryOp node)
    {
        inACircularLeftShiftShiftBinaryOp(node);
        if(node.getCircularLeftShift() != null)
        {
            node.getCircularLeftShift().apply(this);
        }
        outACircularLeftShiftShiftBinaryOp(node);
    }

    public void inACircularRightShiftShiftBinaryOp(ACircularRightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outACircularRightShiftShiftBinaryOp(ACircularRightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACircularRightShiftShiftBinaryOp(ACircularRightShiftShiftBinaryOp node)
    {
        inACircularRightShiftShiftBinaryOp(node);
        if(node.getCircularRightShift() != null)
        {
            node.getCircularRightShift().apply(this);
        }
        outACircularRightShiftShiftBinaryOp(node);
    }

    public void inAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        inAMultiplyMultiplicativeBinaryOp(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outAMultiplyMultiplicativeBinaryOp(node);
    }

    public void inADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        inADivideMultiplicativeBinaryOp(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADivideMultiplicativeBinaryOp(node);
    }

    public void inARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        inARemainderMultiplicativeBinaryOp(node);
        if(node.getRemainder() != null)
        {
            node.getRemainder().apply(this);
        }
        outARemainderMultiplicativeBinaryOp(node);
    }

    public void inAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusUnaryOp(APlusUnaryOp node)
    {
        inAPlusUnaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnaryOp(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inAComplementUnaryOp(AComplementUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAComplementUnaryOp(AComplementUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplementUnaryOp(AComplementUnaryOp node)
    {
        inAComplementUnaryOp(node);
        if(node.getComplement() != null)
        {
            node.getComplement().apply(this);
        }
        outAComplementUnaryOp(node);
    }

    public void inAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        inAToBoolUnaryOp(node);
        if(node.getToBool() != null)
        {
            node.getToBool().apply(this);
        }
        outAToBoolUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOp(node);
    }
}
