/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPModule().apply(this);
        outStart(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            List<PStaticSection> copy = new ArrayList<PStaticSection>(node.getStaticSection());
            Collections.reverse(copy);
            for(PStaticSection e : copy)
            {
                e.apply(this);
            }
        }
        outAModule(node);
    }

    public void inAModuleDeclarationStaticSection(AModuleDeclarationStaticSection node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclarationStaticSection(AModuleDeclarationStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleDeclarationStaticSection(AModuleDeclarationStaticSection node)
    {
        inAModuleDeclarationStaticSection(node);
        if(node.getModuleDeclaration() != null)
        {
            node.getModuleDeclaration().apply(this);
        }
        outAModuleDeclarationStaticSection(node);
    }

    public void inAModuleDefinitionStaticSection(AModuleDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAModuleDefinitionStaticSection(AModuleDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleDefinitionStaticSection(AModuleDefinitionStaticSection node)
    {
        inAModuleDefinitionStaticSection(node);
        if(node.getModuleDefinition() != null)
        {
            node.getModuleDefinition().apply(this);
        }
        outAModuleDefinitionStaticSection(node);
    }

    public void inAUseDeclarationStaticSection(AUseDeclarationStaticSection node)
    {
        defaultIn(node);
    }

    public void outAUseDeclarationStaticSection(AUseDeclarationStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseDeclarationStaticSection(AUseDeclarationStaticSection node)
    {
        inAUseDeclarationStaticSection(node);
        if(node.getUseDeclaration() != null)
        {
            node.getUseDeclaration().apply(this);
        }
        outAUseDeclarationStaticSection(node);
    }

    public void inAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinitionStaticSection(AFunctionDefinitionStaticSection node)
    {
        inAFunctionDefinitionStaticSection(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionStaticSection(node);
    }

    public void inATypeAliasDefinitionStaticSection(ATypeAliasDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outATypeAliasDefinitionStaticSection(ATypeAliasDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAliasDefinitionStaticSection(ATypeAliasDefinitionStaticSection node)
    {
        inATypeAliasDefinitionStaticSection(node);
        if(node.getTypeAliasDefinition() != null)
        {
            node.getTypeAliasDefinition().apply(this);
        }
        outATypeAliasDefinitionStaticSection(node);
    }

    public void inAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructDefinitionStaticSection(AStructDefinitionStaticSection node)
    {
        inAStructDefinitionStaticSection(node);
        if(node.getStructDefinition() != null)
        {
            node.getStructDefinition().apply(this);
        }
        outAStructDefinitionStaticSection(node);
    }

    public void inAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinitionStaticSection(AConstantDefinitionStaticSection node)
    {
        inAConstantDefinitionStaticSection(node);
        if(node.getConstantDefinition() != null)
        {
            node.getConstantDefinition().apply(this);
        }
        outAConstantDefinitionStaticSection(node);
    }

    public void inAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationStaticSection(AVariableDeclarationStaticSection node)
    {
        inAVariableDeclarationStaticSection(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationStaticSection(node);
    }

    public void inAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        defaultIn(node);
    }

    public void outAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySectionStaticSection(AEmptySectionStaticSection node)
    {
        inAEmptySectionStaticSection(node);
        if(node.getEmptySection() != null)
        {
            node.getEmptySection().apply(this);
        }
        outAEmptySectionStaticSection(node);
    }

    public void inAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticSectionRuntimeSection(AStaticSectionRuntimeSection node)
    {
        inAStaticSectionRuntimeSection(node);
        if(node.getStaticSection() != null)
        {
            node.getStaticSection().apply(this);
        }
        outAStaticSectionRuntimeSection(node);
    }

    public void inAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSectionRuntimeSection(AScopedSectionRuntimeSection node)
    {
        inAScopedSectionRuntimeSection(node);
        if(node.getScopedSection() != null)
        {
            node.getScopedSection().apply(this);
        }
        outAScopedSectionRuntimeSection(node);
    }

    public void inAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementRuntimeSection(AExpressionStatementRuntimeSection node)
    {
        inAExpressionStatementRuntimeSection(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementRuntimeSection(node);
    }

    public void inAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSectionRuntimeSection(AConditionalSectionRuntimeSection node)
    {
        inAConditionalSectionRuntimeSection(node);
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        outAConditionalSectionRuntimeSection(node);
    }

    public void inAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        defaultIn(node);
    }

    public void outAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeSectionRuntimeSection(AIterativeSectionRuntimeSection node)
    {
        inAIterativeSectionRuntimeSection(node);
        if(node.getIterativeSection() != null)
        {
            node.getIterativeSection().apply(this);
        }
        outAIterativeSectionRuntimeSection(node);
    }

    public void inAModuleDeclaration(AModuleDeclaration node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclaration(AModuleDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleDeclaration(AModuleDeclaration node)
    {
        inAModuleDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModuleDeclaration(node);
    }

    public void inAModuleDefinition(AModuleDefinition node)
    {
        defaultIn(node);
    }

    public void outAModuleDefinition(AModuleDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleDefinition(AModuleDefinition node)
    {
        inAModuleDefinition(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModuleDefinition(node);
    }

    public void inAUseDeclaration(AUseDeclaration node)
    {
        defaultIn(node);
    }

    public void outAUseDeclaration(AUseDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseDeclaration(AUseDeclaration node)
    {
        inAUseDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getUseTree() != null)
        {
            node.getUseTree().apply(this);
        }
        if(node.getUse() != null)
        {
            node.getUse().apply(this);
        }
        outAUseDeclaration(node);
    }

    public void inANestedUseTree(ANestedUseTree node)
    {
        defaultIn(node);
    }

    public void outANestedUseTree(ANestedUseTree node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedUseTree(ANestedUseTree node)
    {
        inANestedUseTree(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getUseTreeList() != null)
        {
            node.getUseTreeList().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PPathPrefix> copy = new ArrayList<PPathPrefix>(node.getPathPrefix());
            Collections.reverse(copy);
            for(PPathPrefix e : copy)
            {
                e.apply(this);
            }
        }
        outANestedUseTree(node);
    }

    public void inAWildcardUseTree(AWildcardUseTree node)
    {
        defaultIn(node);
    }

    public void outAWildcardUseTree(AWildcardUseTree node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardUseTree(AWildcardUseTree node)
    {
        inAWildcardUseTree(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        {
            List<PPathPrefix> copy = new ArrayList<PPathPrefix>(node.getPathPrefix());
            Collections.reverse(copy);
            for(PPathPrefix e : copy)
            {
                e.apply(this);
            }
        }
        outAWildcardUseTree(node);
    }

    public void inALeafUseTree(ALeafUseTree node)
    {
        defaultIn(node);
    }

    public void outALeafUseTree(ALeafUseTree node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeafUseTree(ALeafUseTree node)
    {
        inALeafUseTree(node);
        if(node.getUseAlias() != null)
        {
            node.getUseAlias().apply(this);
        }
        if(node.getPathSegment() != null)
        {
            node.getPathSegment().apply(this);
        }
        {
            List<PPathPrefix> copy = new ArrayList<PPathPrefix>(node.getPathPrefix());
            Collections.reverse(copy);
            for(PPathPrefix e : copy)
            {
                e.apply(this);
            }
        }
        outALeafUseTree(node);
    }

    public void inAPathPrefix(APathPrefix node)
    {
        defaultIn(node);
    }

    public void outAPathPrefix(APathPrefix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathPrefix(APathPrefix node)
    {
        inAPathPrefix(node);
        if(node.getPathSeparator() != null)
        {
            node.getPathSeparator().apply(this);
        }
        if(node.getPathSegment() != null)
        {
            node.getPathSegment().apply(this);
        }
        outAPathPrefix(node);
    }

    public void inAUseTreeList(AUseTreeList node)
    {
        defaultIn(node);
    }

    public void outAUseTreeList(AUseTreeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseTreeList(AUseTreeList node)
    {
        inAUseTreeList(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PUseTreeListTail> copy = new ArrayList<PUseTreeListTail>(node.getUseTreeListTail());
            Collections.reverse(copy);
            for(PUseTreeListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUseTree() != null)
        {
            node.getUseTree().apply(this);
        }
        outAUseTreeList(node);
    }

    public void inAUseTreeListTail(AUseTreeListTail node)
    {
        defaultIn(node);
    }

    public void outAUseTreeListTail(AUseTreeListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseTreeListTail(AUseTreeListTail node)
    {
        inAUseTreeListTail(node);
        if(node.getUseTree() != null)
        {
            node.getUseTree().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAUseTreeListTail(node);
    }

    public void inAUseAlias(AUseAlias node)
    {
        defaultIn(node);
    }

    public void outAUseAlias(AUseAlias node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUseAlias(AUseAlias node)
    {
        inAUseAlias(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        outAUseAlias(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getDeclaratorList() != null)
        {
            node.getDeclaratorList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inATypeAliasDefinition(ATypeAliasDefinition node)
    {
        defaultIn(node);
    }

    public void outATypeAliasDefinition(ATypeAliasDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAliasDefinition(ATypeAliasDefinition node)
    {
        inATypeAliasDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAlias() != null)
        {
            node.getAlias().apply(this);
        }
        outATypeAliasDefinition(node);
    }

    public void inAStructDefinition(AStructDefinition node)
    {
        defaultIn(node);
    }

    public void outAStructDefinition(AStructDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructDefinition(AStructDefinition node)
    {
        inAStructDefinition(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getDeclaratorList() != null)
        {
            node.getDeclaratorList().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAStructDefinition(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstantDefinition(node);
    }

    public void inAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingInitializationVariableDeclaration(AExcludingInitializationVariableDeclaration node)
    {
        inAExcludingInitializationVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        outAExcludingInitializationVariableDeclaration(node);
    }

    public void inAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingInitializationVariableDeclaration(AIncludingInitializationVariableDeclaration node)
    {
        inAIncludingInitializationVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        outAIncludingInitializationVariableDeclaration(node);
    }

    public void inAEmptySection(AEmptySection node)
    {
        defaultIn(node);
    }

    public void outAEmptySection(AEmptySection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySection(AEmptySection node)
    {
        inAEmptySection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAEmptySection(node);
    }

    public void inAScopedSection(AScopedSection node)
    {
        defaultIn(node);
    }

    public void outAScopedSection(AScopedSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedSection(AScopedSection node)
    {
        inAScopedSection(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outAScopedSection(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inAConditionalSection(AConditionalSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalSection(AConditionalSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalSection(AConditionalSection node)
    {
        inAConditionalSection(node);
        if(node.getElseSection() != null)
        {
            node.getElseSection().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getBraceExpression() != null)
        {
            node.getBraceExpression().apply(this);
        }
        if(node.getConditionalBranchKeyword() != null)
        {
            node.getConditionalBranchKeyword().apply(this);
        }
        outAConditionalSection(node);
    }

    public void inAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludingBranchElseSection(AExcludingBranchElseSection node)
    {
        inAExcludingBranchElseSection(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAExcludingBranchElseSection(node);
    }

    public void inAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultIn(node);
    }

    public void outAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludingBranchElseSection(AIncludingBranchElseSection node)
    {
        inAIncludingBranchElseSection(node);
        if(node.getConditionalSection() != null)
        {
            node.getConditionalSection().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIncludingBranchElseSection(node);
    }

    public void inALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultIn(node);
    }

    public void outALoopIterativeSection(ALoopIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopIterativeSection(ALoopIterativeSection node)
    {
        inALoopIterativeSection(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outALoopIterativeSection(node);
    }

    public void inAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIterativeSection(AConditionalIterativeSection node)
    {
        inAConditionalIterativeSection(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getBraceExpression() != null)
        {
            node.getBraceExpression().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAConditionalIterativeSection(node);
    }

    public void inADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultIn(node);
    }

    public void outADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoConditionalIterativeSection(ADoConditionalIterativeSection node)
    {
        inADoConditionalIterativeSection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getConditionalIterativeKeyword() != null)
        {
            node.getConditionalIterativeKeyword().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outADoConditionalIterativeSection(node);
    }

    public void inAScopedBody(AScopedBody node)
    {
        defaultIn(node);
    }

    public void outAScopedBody(AScopedBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScopedBody(AScopedBody node)
    {
        inAScopedBody(node);
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PRuntimeSection> copy = new ArrayList<PRuntimeSection>(node.getRuntimeSection());
            Collections.reverse(copy);
            for(PRuntimeSection e : copy)
            {
                e.apply(this);
            }
        }
        outAScopedBody(node);
    }

    public void inAExitStopStatement(AExitStopStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStopStatement(AExitStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitStopStatement(AExitStopStatement node)
    {
        inAExitStopStatement(node);
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            Collections.reverse(copy);
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        outAExitStopStatement(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            Collections.reverse(copy);
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            Collections.reverse(copy);
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outAContinueStopStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        {
            List<PDeadSection> copy = new ArrayList<PDeadSection>(node.getDeadSection());
            Collections.reverse(copy);
            for(PDeadSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStopStatement(node);
    }

    public void inADead0DeadSection(ADead0DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead0DeadSection(ADead0DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead0DeadSection(ADead0DeadSection node)
    {
        inADead0DeadSection(node);
        if(node.getRuntimeSection() != null)
        {
            node.getRuntimeSection().apply(this);
        }
        outADead0DeadSection(node);
    }

    public void inADead1DeadSection(ADead1DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead1DeadSection(ADead1DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead1DeadSection(ADead1DeadSection node)
    {
        inADead1DeadSection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        outADead1DeadSection(node);
    }

    public void inADead2DeadSection(ADead2DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead2DeadSection(ADead2DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead2DeadSection(ADead2DeadSection node)
    {
        inADead2DeadSection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead2DeadSection(node);
    }

    public void inADead3DeadSection(ADead3DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead3DeadSection(ADead3DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead3DeadSection(ADead3DeadSection node)
    {
        inADead3DeadSection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outADead3DeadSection(node);
    }

    public void inADead4DeadSection(ADead4DeadSection node)
    {
        defaultIn(node);
    }

    public void outADead4DeadSection(ADead4DeadSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead4DeadSection(ADead4DeadSection node)
    {
        inADead4DeadSection(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outADead4DeadSection(node);
    }

    public void inARawType(ARawType node)
    {
        defaultIn(node);
    }

    public void outARawType(ARawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARawType(ARawType node)
    {
        inARawType(node);
        if(node.getRawType() != null)
        {
            node.getRawType().apply(this);
        }
        outARawType(node);
    }

    public void inAAddressOfType(AAddressOfType node)
    {
        defaultIn(node);
    }

    public void outAAddressOfType(AAddressOfType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfType(AAddressOfType node)
    {
        inAAddressOfType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAddressOfType(node);
    }

    public void inADoubleAddressOfType(ADoubleAddressOfType node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfType(ADoubleAddressOfType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfType(ADoubleAddressOfType node)
    {
        inADoubleAddressOfType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outADoubleAddressOfType(node);
    }

    public void inANominalRawType(ANominalRawType node)
    {
        defaultIn(node);
    }

    public void outANominalRawType(ANominalRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANominalRawType(ANominalRawType node)
    {
        inANominalRawType(node);
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outANominalRawType(node);
    }

    public void inAArrayRawType(AArrayRawType node)
    {
        defaultIn(node);
    }

    public void outAArrayRawType(AArrayRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRawType(AArrayRawType node)
    {
        inAArrayRawType(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayRawType(node);
    }

    public void inATupleRawType(ATupleRawType node)
    {
        defaultIn(node);
    }

    public void outATupleRawType(ATupleRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleRawType(ATupleRawType node)
    {
        inATupleRawType(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTupleTypeList() != null)
        {
            node.getTupleTypeList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outATupleRawType(node);
    }

    public void inAFunctionRawType(AFunctionRawType node)
    {
        defaultIn(node);
    }

    public void outAFunctionRawType(AFunctionRawType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionRawType(AFunctionRawType node)
    {
        inAFunctionRawType(node);
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFn() != null)
        {
            node.getFn().apply(this);
        }
        outAFunctionRawType(node);
    }

    public void inATupleTypeList(ATupleTypeList node)
    {
        defaultIn(node);
    }

    public void outATupleTypeList(ATupleTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleTypeList(ATupleTypeList node)
    {
        inATupleTypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PTupleTypeListHead> copy = new ArrayList<PTupleTypeListHead>(node.getTupleTypeListHead());
            Collections.reverse(copy);
            for(PTupleTypeListHead e : copy)
            {
                e.apply(this);
            }
        }
        outATupleTypeList(node);
    }

    public void inATupleTypeListHead(ATupleTypeListHead node)
    {
        defaultIn(node);
    }

    public void outATupleTypeListHead(ATupleTypeListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleTypeListHead(ATupleTypeListHead node)
    {
        inATupleTypeListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATupleTypeListHead(node);
    }

    public void inATypeList(ATypeList node)
    {
        defaultIn(node);
    }

    public void outATypeList(ATypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeList(ATypeList node)
    {
        inATypeList(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PTypeListTail> copy = new ArrayList<PTypeListTail>(node.getTypeListTail());
            Collections.reverse(copy);
            for(PTypeListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeList(node);
    }

    public void inATypeListTail(ATypeListTail node)
    {
        defaultIn(node);
    }

    public void outATypeListTail(ATypeListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeListTail(ATypeListTail node)
    {
        inATypeListTail(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATypeListTail(node);
    }

    public void inAReturnType(AReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType(AReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        inAReturnType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        outAReturnType(node);
    }

    public void inATypeAnnotation(ATypeAnnotation node)
    {
        defaultIn(node);
    }

    public void outATypeAnnotation(ATypeAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAnnotation(ATypeAnnotation node)
    {
        inATypeAnnotation(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outATypeAnnotation(node);
    }

    public void inAPath(APath node)
    {
        defaultIn(node);
    }

    public void outAPath(APath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPath(APath node)
    {
        inAPath(node);
        {
            List<PPathTail> copy = new ArrayList<PPathTail>(node.getPathTail());
            Collections.reverse(copy);
            for(PPathTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPathSegment() != null)
        {
            node.getPathSegment().apply(this);
        }
        outAPath(node);
    }

    public void inAPathTail(APathTail node)
    {
        defaultIn(node);
    }

    public void outAPathTail(APathTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathTail(APathTail node)
    {
        inAPathTail(node);
        if(node.getPathSegment() != null)
        {
            node.getPathSegment().apply(this);
        }
        if(node.getPathSeparator() != null)
        {
            node.getPathSeparator().apply(this);
        }
        outAPathTail(node);
    }

    public void inARootPathSegment(ARootPathSegment node)
    {
        defaultIn(node);
    }

    public void outARootPathSegment(ARootPathSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARootPathSegment(ARootPathSegment node)
    {
        inARootPathSegment(node);
        if(node.getRoot() != null)
        {
            node.getRoot().apply(this);
        }
        outARootPathSegment(node);
    }

    public void inASuperPathSegment(ASuperPathSegment node)
    {
        defaultIn(node);
    }

    public void outASuperPathSegment(ASuperPathSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperPathSegment(ASuperPathSegment node)
    {
        inASuperPathSegment(node);
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        outASuperPathSegment(node);
    }

    public void inASelfPathSegment(ASelfPathSegment node)
    {
        defaultIn(node);
    }

    public void outASelfPathSegment(ASelfPathSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfPathSegment(ASelfPathSegment node)
    {
        inASelfPathSegment(node);
        if(node.getSelf() != null)
        {
            node.getSelf().apply(this);
        }
        outASelfPathSegment(node);
    }

    public void inANamePathSegment(ANamePathSegment node)
    {
        defaultIn(node);
    }

    public void outANamePathSegment(ANamePathSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePathSegment(ANamePathSegment node)
    {
        inANamePathSegment(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePathSegment(node);
    }

    public void inADeclarator(ADeclarator node)
    {
        defaultIn(node);
    }

    public void outADeclarator(ADeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarator(ADeclarator node)
    {
        inADeclarator(node);
        if(node.getTypeAnnotation() != null)
        {
            node.getTypeAnnotation().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PVariableModifier> copy = new ArrayList<PVariableModifier>(node.getVariableModifier());
            Collections.reverse(copy);
            for(PVariableModifier e : copy)
            {
                e.apply(this);
            }
        }
        outADeclarator(node);
    }

    public void inAStaticVariableModifier(AStaticVariableModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticVariableModifier(AStaticVariableModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticVariableModifier(AStaticVariableModifier node)
    {
        inAStaticVariableModifier(node);
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        outAStaticVariableModifier(node);
    }

    public void inAMutVariableModifier(AMutVariableModifier node)
    {
        defaultIn(node);
    }

    public void outAMutVariableModifier(AMutVariableModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMutVariableModifier(AMutVariableModifier node)
    {
        inAMutVariableModifier(node);
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        outAMutVariableModifier(node);
    }

    public void inADeclaratorList(ADeclaratorList node)
    {
        defaultIn(node);
    }

    public void outADeclaratorList(ADeclaratorList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorList(ADeclaratorList node)
    {
        inADeclaratorList(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PDeclaratorListTail> copy = new ArrayList<PDeclaratorListTail>(node.getDeclaratorListTail());
            Collections.reverse(copy);
            for(PDeclaratorListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        outADeclaratorList(node);
    }

    public void inADeclaratorListTail(ADeclaratorListTail node)
    {
        defaultIn(node);
    }

    public void outADeclaratorListTail(ADeclaratorListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorListTail(ADeclaratorListTail node)
    {
        inADeclaratorListTail(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outADeclaratorListTail(node);
    }

    public void inALabel(ALabel node)
    {
        defaultIn(node);
    }

    public void outALabel(ALabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        inALabel(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outALabel(node);
    }

    public void inAPrioritizedExpression(APrioritizedExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression(APrioritizedExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression(APrioritizedExpression node)
    {
        inAPrioritizedExpression(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        outAPrioritizedExpression(node);
    }

    public void inAClosureExpression(AClosureExpression node)
    {
        defaultIn(node);
    }

    public void outAClosureExpression(AClosureExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureExpression(AClosureExpression node)
    {
        inAClosureExpression(node);
        if(node.getClosureBody() != null)
        {
            node.getClosureBody().apply(this);
        }
        if(node.getClosureDeclaratorList() != null)
        {
            node.getClosureDeclaratorList().apply(this);
        }
        outAClosureExpression(node);
    }

    public void inAStandardClosureDeclaratorList(AStandardClosureDeclaratorList node)
    {
        defaultIn(node);
    }

    public void outAStandardClosureDeclaratorList(AStandardClosureDeclaratorList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStandardClosureDeclaratorList(AStandardClosureDeclaratorList node)
    {
        inAStandardClosureDeclaratorList(node);
        if(node.getROr() != null)
        {
            node.getROr().apply(this);
        }
        if(node.getDeclaratorList() != null)
        {
            node.getDeclaratorList().apply(this);
        }
        if(node.getLOr() != null)
        {
            node.getLOr().apply(this);
        }
        outAStandardClosureDeclaratorList(node);
    }

    public void inALogicalOrClosureDeclaratorList(ALogicalOrClosureDeclaratorList node)
    {
        defaultIn(node);
    }

    public void outALogicalOrClosureDeclaratorList(ALogicalOrClosureDeclaratorList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrClosureDeclaratorList(ALogicalOrClosureDeclaratorList node)
    {
        inALogicalOrClosureDeclaratorList(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outALogicalOrClosureDeclaratorList(node);
    }

    public void inAExpressionClosureBody(AExpressionClosureBody node)
    {
        defaultIn(node);
    }

    public void outAExpressionClosureBody(AExpressionClosureBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionClosureBody(AExpressionClosureBody node)
    {
        inAExpressionClosureBody(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionClosureBody(node);
    }

    public void inABlockClosureBody(ABlockClosureBody node)
    {
        defaultIn(node);
    }

    public void outABlockClosureBody(ABlockClosureBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockClosureBody(ABlockClosureBody node)
    {
        inABlockClosureBody(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getScopedBody() != null)
        {
            node.getScopedBody().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outABlockClosureBody(node);
    }

    public void inAPrioritizedAssignmentExpression(APrioritizedAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedAssignmentExpression(APrioritizedAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedAssignmentExpression(APrioritizedAssignmentExpression node)
    {
        inAPrioritizedAssignmentExpression(node);
        if(node.getTernaryExpression() != null)
        {
            node.getTernaryExpression().apply(this);
        }
        outAPrioritizedAssignmentExpression(node);
    }

    public void inAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        inAAssignmentAssignmentExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssignmentOp() != null)
        {
            node.getAssignmentOp().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAAssignmentAssignmentExpression(node);
    }

    public void inAPrioritizedTernaryExpression(APrioritizedTernaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedTernaryExpression(APrioritizedTernaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedTernaryExpression(APrioritizedTernaryExpression node)
    {
        inAPrioritizedTernaryExpression(node);
        if(node.getLogicalExpression() != null)
        {
            node.getLogicalExpression().apply(this);
        }
        outAPrioritizedTernaryExpression(node);
    }

    public void inATernaryTernaryExpression(ATernaryTernaryExpression node)
    {
        defaultIn(node);
    }

    public void outATernaryTernaryExpression(ATernaryTernaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernaryTernaryExpression(ATernaryTernaryExpression node)
    {
        inATernaryTernaryExpression(node);
        if(node.getTernaryExpression() != null)
        {
            node.getTernaryExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQuestionMark() != null)
        {
            node.getQuestionMark().apply(this);
        }
        if(node.getLogicalExpression() != null)
        {
            node.getLogicalExpression().apply(this);
        }
        outATernaryTernaryExpression(node);
    }

    public void inAPrioritizedLogicalExpression(APrioritizedLogicalExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedLogicalExpression(APrioritizedLogicalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedLogicalExpression(APrioritizedLogicalExpression node)
    {
        inAPrioritizedLogicalExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outAPrioritizedLogicalExpression(node);
    }

    public void inABinaryLogicalExpression(ABinaryLogicalExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryLogicalExpression(ABinaryLogicalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryLogicalExpression(ABinaryLogicalExpression node)
    {
        inABinaryLogicalExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getLogicalExpression() != null)
        {
            node.getLogicalExpression().apply(this);
        }
        outABinaryLogicalExpression(node);
    }

    public void inAPrioritizedEqualityExpression(APrioritizedEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedEqualityExpression(APrioritizedEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedEqualityExpression(APrioritizedEqualityExpression node)
    {
        inAPrioritizedEqualityExpression(node);
        if(node.getComparativeExpression() != null)
        {
            node.getComparativeExpression().apply(this);
        }
        outAPrioritizedEqualityExpression(node);
    }

    public void inABinaryEqualityExpression(ABinaryEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryEqualityExpression(ABinaryEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryEqualityExpression(ABinaryEqualityExpression node)
    {
        inABinaryEqualityExpression(node);
        if(node.getComparativeExpression() != null)
        {
            node.getComparativeExpression().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outABinaryEqualityExpression(node);
    }

    public void inAPrioritizedComparativeExpression(APrioritizedComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedComparativeExpression(APrioritizedComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedComparativeExpression(APrioritizedComparativeExpression node)
    {
        inAPrioritizedComparativeExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAPrioritizedComparativeExpression(node);
    }

    public void inABinaryComparativeExpression(ABinaryComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryComparativeExpression(ABinaryComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryComparativeExpression(ABinaryComparativeExpression node)
    {
        inABinaryComparativeExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getComparativeExpression() != null)
        {
            node.getComparativeExpression().apply(this);
        }
        outABinaryComparativeExpression(node);
    }

    public void inAPrioritizedAdditiveExpression(APrioritizedAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedAdditiveExpression(APrioritizedAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedAdditiveExpression(APrioritizedAdditiveExpression node)
    {
        inAPrioritizedAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPrioritizedAdditiveExpression(node);
    }

    public void inABinaryAdditiveExpression(ABinaryAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryAdditiveExpression(ABinaryAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryAdditiveExpression(ABinaryAdditiveExpression node)
    {
        inABinaryAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outABinaryAdditiveExpression(node);
    }

    public void inAPrioritizedMultiplicativeExpression(APrioritizedMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedMultiplicativeExpression(APrioritizedMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedMultiplicativeExpression(APrioritizedMultiplicativeExpression node)
    {
        inAPrioritizedMultiplicativeExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAPrioritizedMultiplicativeExpression(node);
    }

    public void inABinaryMultiplicativeExpression(ABinaryMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryMultiplicativeExpression(ABinaryMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryMultiplicativeExpression(ABinaryMultiplicativeExpression node)
    {
        inABinaryMultiplicativeExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outABinaryMultiplicativeExpression(node);
    }

    public void inAPrioritizedShiftExpression(APrioritizedShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedShiftExpression(APrioritizedShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedShiftExpression(APrioritizedShiftExpression node)
    {
        inAPrioritizedShiftExpression(node);
        if(node.getCastExpression() != null)
        {
            node.getCastExpression().apply(this);
        }
        outAPrioritizedShiftExpression(node);
    }

    public void inABinaryShiftExpression(ABinaryShiftExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryShiftExpression(ABinaryShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryShiftExpression(ABinaryShiftExpression node)
    {
        inABinaryShiftExpression(node);
        if(node.getCastExpression() != null)
        {
            node.getCastExpression().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outABinaryShiftExpression(node);
    }

    public void inAPrioritizedCastExpression(APrioritizedCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedCastExpression(APrioritizedCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedCastExpression(APrioritizedCastExpression node)
    {
        inAPrioritizedCastExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAPrioritizedCastExpression(node);
    }

    public void inACastCastExpression(ACastCastExpression node)
    {
        defaultIn(node);
    }

    public void outACastCastExpression(ACastCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastCastExpression(ACastCastExpression node)
    {
        inACastCastExpression(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outACastCastExpression(node);
    }

    public void inAPrioritizedUnaryExpression(APrioritizedUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedUnaryExpression(APrioritizedUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedUnaryExpression(APrioritizedUnaryExpression node)
    {
        inAPrioritizedUnaryExpression(node);
        if(node.getSuffixExpression() != null)
        {
            node.getSuffixExpression().apply(this);
        }
        outAPrioritizedUnaryExpression(node);
    }

    public void inAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        inAUnaryUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        outAUnaryUnaryExpression(node);
    }

    public void inADereferenceUnaryExpression(ADereferenceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outADereferenceUnaryExpression(ADereferenceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceUnaryExpression(ADereferenceUnaryExpression node)
    {
        inADereferenceUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outADereferenceUnaryExpression(node);
    }

    public void inAAddressOfUnaryExpression(AAddressOfUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAAddressOfUnaryExpression(AAddressOfUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfUnaryExpression(AAddressOfUnaryExpression node)
    {
        inAAddressOfUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAddressOfUnaryExpression(node);
    }

    public void inADoubleAddressOfUnaryExpression(ADoubleAddressOfUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfUnaryExpression(ADoubleAddressOfUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfUnaryExpression(ADoubleAddressOfUnaryExpression node)
    {
        inADoubleAddressOfUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outADoubleAddressOfUnaryExpression(node);
    }

    public void inAPrioritizedSuffixExpression(APrioritizedSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedSuffixExpression(APrioritizedSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedSuffixExpression(APrioritizedSuffixExpression node)
    {
        inAPrioritizedSuffixExpression(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outAPrioritizedSuffixExpression(node);
    }

    public void inAIndexSuffixExpression(AIndexSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAIndexSuffixExpression(AIndexSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexSuffixExpression(AIndexSuffixExpression node)
    {
        inAIndexSuffixExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getSuffixExpression() != null)
        {
            node.getSuffixExpression().apply(this);
        }
        outAIndexSuffixExpression(node);
    }

    public void inAMemberSuffixExpression(AMemberSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAMemberSuffixExpression(AMemberSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberSuffixExpression(AMemberSuffixExpression node)
    {
        inAMemberSuffixExpression(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getSuffixExpression() != null)
        {
            node.getSuffixExpression().apply(this);
        }
        outAMemberSuffixExpression(node);
    }

    public void inAMethodSuffixExpression(AMethodSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodSuffixExpression(AMethodSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodSuffixExpression(AMethodSuffixExpression node)
    {
        inAMethodSuffixExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getSuffixExpression() != null)
        {
            node.getSuffixExpression().apply(this);
        }
        outAMethodSuffixExpression(node);
    }

    public void inAPrioritizedCallExpression(APrioritizedCallExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedCallExpression(APrioritizedCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedCallExpression(APrioritizedCallExpression node)
    {
        inAPrioritizedCallExpression(node);
        if(node.getCompoundExpression() != null)
        {
            node.getCompoundExpression().apply(this);
        }
        outAPrioritizedCallExpression(node);
    }

    public void inACallCallExpression(ACallCallExpression node)
    {
        defaultIn(node);
    }

    public void outACallCallExpression(ACallCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallCallExpression(ACallCallExpression node)
    {
        inACallCallExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outACallCallExpression(node);
    }

    public void inAParenthesesCompoundExpression(AParenthesesCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesCompoundExpression(AParenthesesCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesCompoundExpression(AParenthesesCompoundExpression node)
    {
        inAParenthesesCompoundExpression(node);
        if(node.getParenthesesExpression() != null)
        {
            node.getParenthesesExpression().apply(this);
        }
        outAParenthesesCompoundExpression(node);
    }

    public void inAPrimaryCompoundExpression(APrimaryCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryCompoundExpression(APrimaryCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryCompoundExpression(APrimaryCompoundExpression node)
    {
        inAPrimaryCompoundExpression(node);
        if(node.getPrimaryExpression() != null)
        {
            node.getPrimaryExpression().apply(this);
        }
        outAPrimaryCompoundExpression(node);
    }

    public void inAArrayListCompoundExpression(AArrayListCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayListCompoundExpression(AArrayListCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayListCompoundExpression(AArrayListCompoundExpression node)
    {
        inAArrayListCompoundExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayListCompoundExpression(node);
    }

    public void inAArrayRepeatCompoundExpression(AArrayRepeatCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayRepeatCompoundExpression(AArrayRepeatCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRepeatCompoundExpression(AArrayRepeatCompoundExpression node)
    {
        inAArrayRepeatCompoundExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayRepeatCompoundExpression(node);
    }

    public void inATupleCompoundExpression(ATupleCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outATupleCompoundExpression(ATupleCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleCompoundExpression(ATupleCompoundExpression node)
    {
        inATupleCompoundExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTupleExpressionList() != null)
        {
            node.getTupleExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outATupleCompoundExpression(node);
    }

    public void inAStructCompoundExpression(AStructCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAStructCompoundExpression(AStructCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructCompoundExpression(AStructCompoundExpression node)
    {
        inAStructCompoundExpression(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStructExpressionList() != null)
        {
            node.getStructExpressionList().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outAStructCompoundExpression(node);
    }

    public void inAParenthesesExpression(AParenthesesExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression(AParenthesesExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression(AParenthesesExpression node)
    {
        inAParenthesesExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenthesesExpression(node);
    }

    public void inAScalarPrimaryExpression(AScalarPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAScalarPrimaryExpression(AScalarPrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScalarPrimaryExpression(AScalarPrimaryExpression node)
    {
        inAScalarPrimaryExpression(node);
        if(node.getScalar() != null)
        {
            node.getScalar().apply(this);
        }
        outAScalarPrimaryExpression(node);
    }

    public void inAPathPrimaryExpression(APathPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPathPrimaryExpression(APathPrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathPrimaryExpression(APathPrimaryExpression node)
    {
        inAPathPrimaryExpression(node);
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outAPathPrimaryExpression(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PExpressionListTail> copy = new ArrayList<PExpressionListTail>(node.getExpressionListTail());
            Collections.reverse(copy);
            for(PExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionList(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inATupleExpressionList(ATupleExpressionList node)
    {
        defaultIn(node);
    }

    public void outATupleExpressionList(ATupleExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleExpressionList(ATupleExpressionList node)
    {
        inATupleExpressionList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PTupleExpressionListHead> copy = new ArrayList<PTupleExpressionListHead>(node.getTupleExpressionListHead());
            Collections.reverse(copy);
            for(PTupleExpressionListHead e : copy)
            {
                e.apply(this);
            }
        }
        outATupleExpressionList(node);
    }

    public void inATupleExpressionListHead(ATupleExpressionListHead node)
    {
        defaultIn(node);
    }

    public void outATupleExpressionListHead(ATupleExpressionListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleExpressionListHead(ATupleExpressionListHead node)
    {
        inATupleExpressionListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATupleExpressionListHead(node);
    }

    public void inABasicStructExpressionList(ABasicStructExpressionList node)
    {
        defaultIn(node);
    }

    public void outABasicStructExpressionList(ABasicStructExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicStructExpressionList(ABasicStructExpressionList node)
    {
        inABasicStructExpressionList(node);
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        outABasicStructExpressionList(node);
    }

    public void inALabelledStructExpressionList(ALabelledStructExpressionList node)
    {
        defaultIn(node);
    }

    public void outALabelledStructExpressionList(ALabelledStructExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelledStructExpressionList(ALabelledStructExpressionList node)
    {
        inALabelledStructExpressionList(node);
        if(node.getLabelledExpressionList() != null)
        {
            node.getLabelledExpressionList().apply(this);
        }
        outALabelledStructExpressionList(node);
    }

    public void inALabelledExpressionList(ALabelledExpressionList node)
    {
        defaultIn(node);
    }

    public void outALabelledExpressionList(ALabelledExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelledExpressionList(ALabelledExpressionList node)
    {
        inALabelledExpressionList(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PLabelledExpressionListTail> copy = new ArrayList<PLabelledExpressionListTail>(node.getLabelledExpressionListTail());
            Collections.reverse(copy);
            for(PLabelledExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLabelledExpression() != null)
        {
            node.getLabelledExpression().apply(this);
        }
        outALabelledExpressionList(node);
    }

    public void inALabelledExpressionListTail(ALabelledExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outALabelledExpressionListTail(ALabelledExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelledExpressionListTail(ALabelledExpressionListTail node)
    {
        inALabelledExpressionListTail(node);
        if(node.getLabelledExpression() != null)
        {
            node.getLabelledExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outALabelledExpressionListTail(node);
    }

    public void inALabelledExpression(ALabelledExpression node)
    {
        defaultIn(node);
    }

    public void outALabelledExpression(ALabelledExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelledExpression(ALabelledExpression node)
    {
        inALabelledExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outALabelledExpression(node);
    }

    public void inANameMember(ANameMember node)
    {
        defaultIn(node);
    }

    public void outANameMember(ANameMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameMember(ANameMember node)
    {
        inANameMember(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameMember(node);
    }

    public void inAWordMember(AWordMember node)
    {
        defaultIn(node);
    }

    public void outAWordMember(AWordMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWordMember(AWordMember node)
    {
        inAWordMember(node);
        if(node.getWordValue() != null)
        {
            node.getWordValue().apply(this);
        }
        outAWordMember(node);
    }

    public void inANullScalar(ANullScalar node)
    {
        defaultIn(node);
    }

    public void outANullScalar(ANullScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullScalar(ANullScalar node)
    {
        inANullScalar(node);
        if(node.getNullValue() != null)
        {
            node.getNullValue().apply(this);
        }
        outANullScalar(node);
    }

    public void inABoolScalar(ABoolScalar node)
    {
        defaultIn(node);
    }

    public void outABoolScalar(ABoolScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolScalar(ABoolScalar node)
    {
        inABoolScalar(node);
        if(node.getBoolValue() != null)
        {
            node.getBoolValue().apply(this);
        }
        outABoolScalar(node);
    }

    public void inAIntScalar(AIntScalar node)
    {
        defaultIn(node);
    }

    public void outAIntScalar(AIntScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntScalar(AIntScalar node)
    {
        inAIntScalar(node);
        if(node.getIntValue() != null)
        {
            node.getIntValue().apply(this);
        }
        outAIntScalar(node);
    }

    public void inANatScalar(ANatScalar node)
    {
        defaultIn(node);
    }

    public void outANatScalar(ANatScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatScalar(ANatScalar node)
    {
        inANatScalar(node);
        if(node.getNatValue() != null)
        {
            node.getNatValue().apply(this);
        }
        outANatScalar(node);
    }

    public void inAWordScalar(AWordScalar node)
    {
        defaultIn(node);
    }

    public void outAWordScalar(AWordScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWordScalar(AWordScalar node)
    {
        inAWordScalar(node);
        if(node.getWordValue() != null)
        {
            node.getWordValue().apply(this);
        }
        outAWordScalar(node);
    }

    public void inACharScalar(ACharScalar node)
    {
        defaultIn(node);
    }

    public void outACharScalar(ACharScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharScalar(ACharScalar node)
    {
        inACharScalar(node);
        if(node.getCharValue() != null)
        {
            node.getCharValue().apply(this);
        }
        outACharScalar(node);
    }

    public void inAStringScalar(AStringScalar node)
    {
        defaultIn(node);
    }

    public void outAStringScalar(AStringScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringScalar(AStringScalar node)
    {
        inAStringScalar(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringScalar(node);
    }

    public void inASizeofScalar(ASizeofScalar node)
    {
        defaultIn(node);
    }

    public void outASizeofScalar(ASizeofScalar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeofScalar(ASizeofScalar node)
    {
        inASizeofScalar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSizeof() != null)
        {
            node.getSizeof().apply(this);
        }
        outASizeofScalar(node);
    }

    public void inAPrioritizedBraceExpression(APrioritizedBraceExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceExpression(APrioritizedBraceExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceExpression(APrioritizedBraceExpression node)
    {
        inAPrioritizedBraceExpression(node);
        if(node.getBraceAssignmentExpression() != null)
        {
            node.getBraceAssignmentExpression().apply(this);
        }
        outAPrioritizedBraceExpression(node);
    }

    public void inAClosureBraceExpression(AClosureBraceExpression node)
    {
        defaultIn(node);
    }

    public void outAClosureBraceExpression(AClosureBraceExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureBraceExpression(AClosureBraceExpression node)
    {
        inAClosureBraceExpression(node);
        if(node.getBraceExpression() != null)
        {
            node.getBraceExpression().apply(this);
        }
        if(node.getClosureDeclaratorList() != null)
        {
            node.getClosureDeclaratorList().apply(this);
        }
        outAClosureBraceExpression(node);
    }

    public void inAPrioritizedBraceAssignmentExpression(APrioritizedBraceAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceAssignmentExpression(APrioritizedBraceAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceAssignmentExpression(APrioritizedBraceAssignmentExpression node)
    {
        inAPrioritizedBraceAssignmentExpression(node);
        if(node.getBraceTernaryExpression() != null)
        {
            node.getBraceTernaryExpression().apply(this);
        }
        outAPrioritizedBraceAssignmentExpression(node);
    }

    public void inAAssignmentBraceAssignmentExpression(AAssignmentBraceAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentBraceAssignmentExpression(AAssignmentBraceAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentBraceAssignmentExpression(AAssignmentBraceAssignmentExpression node)
    {
        inAAssignmentBraceAssignmentExpression(node);
        if(node.getBraceExpression() != null)
        {
            node.getBraceExpression().apply(this);
        }
        if(node.getAssignmentOp() != null)
        {
            node.getAssignmentOp().apply(this);
        }
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        outAAssignmentBraceAssignmentExpression(node);
    }

    public void inAPrioritizedBraceTernaryExpression(APrioritizedBraceTernaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceTernaryExpression(APrioritizedBraceTernaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceTernaryExpression(APrioritizedBraceTernaryExpression node)
    {
        inAPrioritizedBraceTernaryExpression(node);
        if(node.getBraceLogicalExpression() != null)
        {
            node.getBraceLogicalExpression().apply(this);
        }
        outAPrioritizedBraceTernaryExpression(node);
    }

    public void inATernaryBraceTernaryExpression(ATernaryBraceTernaryExpression node)
    {
        defaultIn(node);
    }

    public void outATernaryBraceTernaryExpression(ATernaryBraceTernaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernaryBraceTernaryExpression(ATernaryBraceTernaryExpression node)
    {
        inATernaryBraceTernaryExpression(node);
        if(node.getBraceTernaryExpression() != null)
        {
            node.getBraceTernaryExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQuestionMark() != null)
        {
            node.getQuestionMark().apply(this);
        }
        if(node.getBraceLogicalExpression() != null)
        {
            node.getBraceLogicalExpression().apply(this);
        }
        outATernaryBraceTernaryExpression(node);
    }

    public void inAPrioritizedBraceLogicalExpression(APrioritizedBraceLogicalExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceLogicalExpression(APrioritizedBraceLogicalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceLogicalExpression(APrioritizedBraceLogicalExpression node)
    {
        inAPrioritizedBraceLogicalExpression(node);
        if(node.getBraceEqualityExpression() != null)
        {
            node.getBraceEqualityExpression().apply(this);
        }
        outAPrioritizedBraceLogicalExpression(node);
    }

    public void inABinaryBraceLogicalExpression(ABinaryBraceLogicalExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceLogicalExpression(ABinaryBraceLogicalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceLogicalExpression(ABinaryBraceLogicalExpression node)
    {
        inABinaryBraceLogicalExpression(node);
        if(node.getBraceEqualityExpression() != null)
        {
            node.getBraceEqualityExpression().apply(this);
        }
        if(node.getLogicalBinaryOp() != null)
        {
            node.getLogicalBinaryOp().apply(this);
        }
        if(node.getBraceLogicalExpression() != null)
        {
            node.getBraceLogicalExpression().apply(this);
        }
        outABinaryBraceLogicalExpression(node);
    }

    public void inAPrioritizedBraceEqualityExpression(APrioritizedBraceEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceEqualityExpression(APrioritizedBraceEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceEqualityExpression(APrioritizedBraceEqualityExpression node)
    {
        inAPrioritizedBraceEqualityExpression(node);
        if(node.getBraceComparativeExpression() != null)
        {
            node.getBraceComparativeExpression().apply(this);
        }
        outAPrioritizedBraceEqualityExpression(node);
    }

    public void inABinaryBraceEqualityExpression(ABinaryBraceEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceEqualityExpression(ABinaryBraceEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceEqualityExpression(ABinaryBraceEqualityExpression node)
    {
        inABinaryBraceEqualityExpression(node);
        if(node.getBraceComparativeExpression() != null)
        {
            node.getBraceComparativeExpression().apply(this);
        }
        if(node.getEqualityBinaryOp() != null)
        {
            node.getEqualityBinaryOp().apply(this);
        }
        if(node.getBraceEqualityExpression() != null)
        {
            node.getBraceEqualityExpression().apply(this);
        }
        outABinaryBraceEqualityExpression(node);
    }

    public void inAPrioritizedBraceComparativeExpression(APrioritizedBraceComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceComparativeExpression(APrioritizedBraceComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceComparativeExpression(APrioritizedBraceComparativeExpression node)
    {
        inAPrioritizedBraceComparativeExpression(node);
        if(node.getBraceAdditiveExpression() != null)
        {
            node.getBraceAdditiveExpression().apply(this);
        }
        outAPrioritizedBraceComparativeExpression(node);
    }

    public void inABinaryBraceComparativeExpression(ABinaryBraceComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceComparativeExpression(ABinaryBraceComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceComparativeExpression(ABinaryBraceComparativeExpression node)
    {
        inABinaryBraceComparativeExpression(node);
        if(node.getBraceAdditiveExpression() != null)
        {
            node.getBraceAdditiveExpression().apply(this);
        }
        if(node.getComparativeBinaryOp() != null)
        {
            node.getComparativeBinaryOp().apply(this);
        }
        if(node.getBraceComparativeExpression() != null)
        {
            node.getBraceComparativeExpression().apply(this);
        }
        outABinaryBraceComparativeExpression(node);
    }

    public void inAPrioritizedBraceAdditiveExpression(APrioritizedBraceAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceAdditiveExpression(APrioritizedBraceAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceAdditiveExpression(APrioritizedBraceAdditiveExpression node)
    {
        inAPrioritizedBraceAdditiveExpression(node);
        if(node.getBraceMultiplicativeExpression() != null)
        {
            node.getBraceMultiplicativeExpression().apply(this);
        }
        outAPrioritizedBraceAdditiveExpression(node);
    }

    public void inABinaryBraceAdditiveExpression(ABinaryBraceAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceAdditiveExpression(ABinaryBraceAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceAdditiveExpression(ABinaryBraceAdditiveExpression node)
    {
        inABinaryBraceAdditiveExpression(node);
        if(node.getBraceMultiplicativeExpression() != null)
        {
            node.getBraceMultiplicativeExpression().apply(this);
        }
        if(node.getAdditiveBinaryOp() != null)
        {
            node.getAdditiveBinaryOp().apply(this);
        }
        if(node.getBraceAdditiveExpression() != null)
        {
            node.getBraceAdditiveExpression().apply(this);
        }
        outABinaryBraceAdditiveExpression(node);
    }

    public void inAPrioritizedBraceMultiplicativeExpression(APrioritizedBraceMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceMultiplicativeExpression(APrioritizedBraceMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceMultiplicativeExpression(APrioritizedBraceMultiplicativeExpression node)
    {
        inAPrioritizedBraceMultiplicativeExpression(node);
        if(node.getBraceShiftExpression() != null)
        {
            node.getBraceShiftExpression().apply(this);
        }
        outAPrioritizedBraceMultiplicativeExpression(node);
    }

    public void inABinaryBraceMultiplicativeExpression(ABinaryBraceMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceMultiplicativeExpression(ABinaryBraceMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceMultiplicativeExpression(ABinaryBraceMultiplicativeExpression node)
    {
        inABinaryBraceMultiplicativeExpression(node);
        if(node.getBraceShiftExpression() != null)
        {
            node.getBraceShiftExpression().apply(this);
        }
        if(node.getMultiplicativeBinaryOp() != null)
        {
            node.getMultiplicativeBinaryOp().apply(this);
        }
        if(node.getBraceMultiplicativeExpression() != null)
        {
            node.getBraceMultiplicativeExpression().apply(this);
        }
        outABinaryBraceMultiplicativeExpression(node);
    }

    public void inAPrioritizedBraceShiftExpression(APrioritizedBraceShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceShiftExpression(APrioritizedBraceShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceShiftExpression(APrioritizedBraceShiftExpression node)
    {
        inAPrioritizedBraceShiftExpression(node);
        if(node.getBraceCastExpression() != null)
        {
            node.getBraceCastExpression().apply(this);
        }
        outAPrioritizedBraceShiftExpression(node);
    }

    public void inABinaryBraceShiftExpression(ABinaryBraceShiftExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryBraceShiftExpression(ABinaryBraceShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBraceShiftExpression(ABinaryBraceShiftExpression node)
    {
        inABinaryBraceShiftExpression(node);
        if(node.getBraceCastExpression() != null)
        {
            node.getBraceCastExpression().apply(this);
        }
        if(node.getShiftBinaryOp() != null)
        {
            node.getShiftBinaryOp().apply(this);
        }
        if(node.getBraceShiftExpression() != null)
        {
            node.getBraceShiftExpression().apply(this);
        }
        outABinaryBraceShiftExpression(node);
    }

    public void inAPrioritizedBraceCastExpression(APrioritizedBraceCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceCastExpression(APrioritizedBraceCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceCastExpression(APrioritizedBraceCastExpression node)
    {
        inAPrioritizedBraceCastExpression(node);
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        outAPrioritizedBraceCastExpression(node);
    }

    public void inACastBraceCastExpression(ACastBraceCastExpression node)
    {
        defaultIn(node);
    }

    public void outACastBraceCastExpression(ACastBraceCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastBraceCastExpression(ACastBraceCastExpression node)
    {
        inACastBraceCastExpression(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        outACastBraceCastExpression(node);
    }

    public void inAPrioritizedBraceUnaryExpression(APrioritizedBraceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceUnaryExpression(APrioritizedBraceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceUnaryExpression(APrioritizedBraceUnaryExpression node)
    {
        inAPrioritizedBraceUnaryExpression(node);
        if(node.getBraceSuffixExpression() != null)
        {
            node.getBraceSuffixExpression().apply(this);
        }
        outAPrioritizedBraceUnaryExpression(node);
    }

    public void inAUnaryBraceUnaryExpression(AUnaryBraceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryBraceUnaryExpression(AUnaryBraceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryBraceUnaryExpression(AUnaryBraceUnaryExpression node)
    {
        inAUnaryBraceUnaryExpression(node);
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        outAUnaryBraceUnaryExpression(node);
    }

    public void inADereferenceBraceUnaryExpression(ADereferenceBraceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outADereferenceBraceUnaryExpression(ADereferenceBraceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceBraceUnaryExpression(ADereferenceBraceUnaryExpression node)
    {
        inADereferenceBraceUnaryExpression(node);
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outADereferenceBraceUnaryExpression(node);
    }

    public void inAAddressOfBraceUnaryExpression(AAddressOfBraceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAAddressOfBraceUnaryExpression(AAddressOfBraceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfBraceUnaryExpression(AAddressOfBraceUnaryExpression node)
    {
        inAAddressOfBraceUnaryExpression(node);
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAddressOfBraceUnaryExpression(node);
    }

    public void inADoubleAddressOfBraceUnaryExpression(ADoubleAddressOfBraceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outADoubleAddressOfBraceUnaryExpression(ADoubleAddressOfBraceUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleAddressOfBraceUnaryExpression(ADoubleAddressOfBraceUnaryExpression node)
    {
        inADoubleAddressOfBraceUnaryExpression(node);
        if(node.getBraceUnaryExpression() != null)
        {
            node.getBraceUnaryExpression().apply(this);
        }
        if(node.getMut() != null)
        {
            node.getMut().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outADoubleAddressOfBraceUnaryExpression(node);
    }

    public void inAPrioritizedBraceSuffixExpression(APrioritizedBraceSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceSuffixExpression(APrioritizedBraceSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceSuffixExpression(APrioritizedBraceSuffixExpression node)
    {
        inAPrioritizedBraceSuffixExpression(node);
        if(node.getBraceCallExpression() != null)
        {
            node.getBraceCallExpression().apply(this);
        }
        outAPrioritizedBraceSuffixExpression(node);
    }

    public void inAIndexBraceSuffixExpression(AIndexBraceSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAIndexBraceSuffixExpression(AIndexBraceSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexBraceSuffixExpression(AIndexBraceSuffixExpression node)
    {
        inAIndexBraceSuffixExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getBraceSuffixExpression() != null)
        {
            node.getBraceSuffixExpression().apply(this);
        }
        outAIndexBraceSuffixExpression(node);
    }

    public void inAMemberBraceSuffixExpression(AMemberBraceSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAMemberBraceSuffixExpression(AMemberBraceSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberBraceSuffixExpression(AMemberBraceSuffixExpression node)
    {
        inAMemberBraceSuffixExpression(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getBraceSuffixExpression() != null)
        {
            node.getBraceSuffixExpression().apply(this);
        }
        outAMemberBraceSuffixExpression(node);
    }

    public void inAMethodBraceSuffixExpression(AMethodBraceSuffixExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodBraceSuffixExpression(AMethodBraceSuffixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodBraceSuffixExpression(AMethodBraceSuffixExpression node)
    {
        inAMethodBraceSuffixExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        if(node.getFullStop() != null)
        {
            node.getFullStop().apply(this);
        }
        if(node.getBraceSuffixExpression() != null)
        {
            node.getBraceSuffixExpression().apply(this);
        }
        outAMethodBraceSuffixExpression(node);
    }

    public void inAPrioritizedBraceCallExpression(APrioritizedBraceCallExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedBraceCallExpression(APrioritizedBraceCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedBraceCallExpression(APrioritizedBraceCallExpression node)
    {
        inAPrioritizedBraceCallExpression(node);
        if(node.getBraceCompoundExpression() != null)
        {
            node.getBraceCompoundExpression().apply(this);
        }
        outAPrioritizedBraceCallExpression(node);
    }

    public void inACallBraceCallExpression(ACallBraceCallExpression node)
    {
        defaultIn(node);
    }

    public void outACallBraceCallExpression(ACallBraceCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallBraceCallExpression(ACallBraceCallExpression node)
    {
        inACallBraceCallExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBraceCallExpression() != null)
        {
            node.getBraceCallExpression().apply(this);
        }
        outACallBraceCallExpression(node);
    }

    public void inAParenthesesBraceCompoundExpression(AParenthesesBraceCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesBraceCompoundExpression(AParenthesesBraceCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesBraceCompoundExpression(AParenthesesBraceCompoundExpression node)
    {
        inAParenthesesBraceCompoundExpression(node);
        if(node.getParenthesesExpression() != null)
        {
            node.getParenthesesExpression().apply(this);
        }
        outAParenthesesBraceCompoundExpression(node);
    }

    public void inAPrimaryBraceCompoundExpression(APrimaryBraceCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryBraceCompoundExpression(APrimaryBraceCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryBraceCompoundExpression(APrimaryBraceCompoundExpression node)
    {
        inAPrimaryBraceCompoundExpression(node);
        if(node.getPrimaryExpression() != null)
        {
            node.getPrimaryExpression().apply(this);
        }
        outAPrimaryBraceCompoundExpression(node);
    }

    public void inAArrayListBraceCompoundExpression(AArrayListBraceCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayListBraceCompoundExpression(AArrayListBraceCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayListBraceCompoundExpression(AArrayListBraceCompoundExpression node)
    {
        inAArrayListBraceCompoundExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayListBraceCompoundExpression(node);
    }

    public void inAArrayRepeatBraceCompoundExpression(AArrayRepeatBraceCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayRepeatBraceCompoundExpression(AArrayRepeatBraceCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRepeatBraceCompoundExpression(AArrayRepeatBraceCompoundExpression node)
    {
        inAArrayRepeatBraceCompoundExpression(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayRepeatBraceCompoundExpression(node);
    }

    public void inATupleBraceCompoundExpression(ATupleBraceCompoundExpression node)
    {
        defaultIn(node);
    }

    public void outATupleBraceCompoundExpression(ATupleBraceCompoundExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleBraceCompoundExpression(ATupleBraceCompoundExpression node)
    {
        inATupleBraceCompoundExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTupleExpressionList() != null)
        {
            node.getTupleExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outATupleBraceCompoundExpression(node);
    }

    public void inAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsAssignmentOp(AEqualsAssignmentOp node)
    {
        inAEqualsAssignmentOp(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsAssignmentOp(node);
    }

    public void inAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignmentOp(APlusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignmentOp(APlusAssignmentOp node)
    {
        inAPlusAssignmentOp(node);
        if(node.getPlusEquals() != null)
        {
            node.getPlusEquals().apply(this);
        }
        outAPlusAssignmentOp(node);
    }

    public void inAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAAndAssignmentOp(AAndAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAssignmentOp(AAndAssignmentOp node)
    {
        inAAndAssignmentOp(node);
        if(node.getAndEquals() != null)
        {
            node.getAndEquals().apply(this);
        }
        outAAndAssignmentOp(node);
    }

    public void inAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAOrAssignmentOp(AOrAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAssignmentOp(AOrAssignmentOp node)
    {
        inAOrAssignmentOp(node);
        if(node.getOrEquals() != null)
        {
            node.getOrEquals().apply(this);
        }
        outAOrAssignmentOp(node);
    }

    public void inAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAXorAssignmentOp(AXorAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAssignmentOp(AXorAssignmentOp node)
    {
        inAXorAssignmentOp(node);
        if(node.getXorEquals() != null)
        {
            node.getXorEquals().apply(this);
        }
        outAXorAssignmentOp(node);
    }

    public void inAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignmentOp(AMinusAssignmentOp node)
    {
        inAMinusAssignmentOp(node);
        if(node.getMinusEquals() != null)
        {
            node.getMinusEquals().apply(this);
        }
        outAMinusAssignmentOp(node);
    }

    public void inAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyAssignmentOp(AMultiplyAssignmentOp node)
    {
        inAMultiplyAssignmentOp(node);
        if(node.getMultiplyEquals() != null)
        {
            node.getMultiplyEquals().apply(this);
        }
        outAMultiplyAssignmentOp(node);
    }

    public void inADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outADivideAssignmentOp(ADivideAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideAssignmentOp(ADivideAssignmentOp node)
    {
        inADivideAssignmentOp(node);
        if(node.getDivideEquals() != null)
        {
            node.getDivideEquals().apply(this);
        }
        outADivideAssignmentOp(node);
    }

    public void inARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderAssignmentOp(ARemainderAssignmentOp node)
    {
        inARemainderAssignmentOp(node);
        if(node.getRemainderEquals() != null)
        {
            node.getRemainderEquals().apply(this);
        }
        outARemainderAssignmentOp(node);
    }

    public void inALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftAssignmentOp(ALeftShiftAssignmentOp node)
    {
        inALeftShiftAssignmentOp(node);
        if(node.getLeftShiftEquals() != null)
        {
            node.getLeftShiftEquals().apply(this);
        }
        outALeftShiftAssignmentOp(node);
    }

    public void inARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftAssignmentOp(ARightShiftAssignmentOp node)
    {
        inARightShiftAssignmentOp(node);
        if(node.getRightShiftEquals() != null)
        {
            node.getRightShiftEquals().apply(this);
        }
        outARightShiftAssignmentOp(node);
    }

    public void inALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateAssignmentOp(ALeftRotateAssignmentOp node)
    {
        inALeftRotateAssignmentOp(node);
        if(node.getLeftRotateEquals() != null)
        {
            node.getLeftRotateEquals().apply(this);
        }
        outALeftRotateAssignmentOp(node);
    }

    public void inARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateAssignmentOp(ARightRotateAssignmentOp node)
    {
        inARightRotateAssignmentOp(node);
        if(node.getRightRotateEquals() != null)
        {
            node.getRightRotateEquals().apply(this);
        }
        outARightRotateAssignmentOp(node);
    }

    public void inALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndLogicalBinaryOp(ALogicalAndLogicalBinaryOp node)
    {
        inALogicalAndLogicalBinaryOp(node);
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        outALogicalAndLogicalBinaryOp(node);
    }

    public void inALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrLogicalBinaryOp(ALogicalOrLogicalBinaryOp node)
    {
        inALogicalOrLogicalBinaryOp(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outALogicalOrLogicalBinaryOp(node);
    }

    public void inAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToEqualityBinaryOp(AEqualToEqualityBinaryOp node)
    {
        inAEqualToEqualityBinaryOp(node);
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        outAEqualToEqualityBinaryOp(node);
    }

    public void inANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToEqualityBinaryOp(ANotEqualToEqualityBinaryOp node)
    {
        inANotEqualToEqualityBinaryOp(node);
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        outANotEqualToEqualityBinaryOp(node);
    }

    public void inALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparativeBinaryOp(ALessThanComparativeBinaryOp node)
    {
        inALessThanComparativeBinaryOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanComparativeBinaryOp(node);
    }

    public void inALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualComparativeBinaryOp(ALessOrEqualComparativeBinaryOp node)
    {
        inALessOrEqualComparativeBinaryOp(node);
        if(node.getLessOrEqual() != null)
        {
            node.getLessOrEqual().apply(this);
        }
        outALessOrEqualComparativeBinaryOp(node);
    }

    public void inAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreThanComparativeBinaryOp(AMoreThanComparativeBinaryOp node)
    {
        inAMoreThanComparativeBinaryOp(node);
        if(node.getMoreThan() != null)
        {
            node.getMoreThan().apply(this);
        }
        outAMoreThanComparativeBinaryOp(node);
    }

    public void inAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreOrEqualComparativeBinaryOp(AMoreOrEqualComparativeBinaryOp node)
    {
        inAMoreOrEqualComparativeBinaryOp(node);
        if(node.getMoreOrEqual() != null)
        {
            node.getMoreOrEqual().apply(this);
        }
        outAMoreOrEqualComparativeBinaryOp(node);
    }

    public void inAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveBinaryOp(APlusAdditiveBinaryOp node)
    {
        inAPlusAdditiveBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAdditiveBinaryOp(node);
    }

    public void inAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAdditiveBinaryOp(AAndAdditiveBinaryOp node)
    {
        inAAndAdditiveBinaryOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndAdditiveBinaryOp(node);
    }

    public void inAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAdditiveBinaryOp(AOrAdditiveBinaryOp node)
    {
        inAOrAdditiveBinaryOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrAdditiveBinaryOp(node);
    }

    public void inAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorAdditiveBinaryOp(AXorAdditiveBinaryOp node)
    {
        inAXorAdditiveBinaryOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorAdditiveBinaryOp(node);
    }

    public void inAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveBinaryOp(AMinusAdditiveBinaryOp node)
    {
        inAMinusAdditiveBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAdditiveBinaryOp(node);
    }

    public void inAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeBinaryOp(AMultiplyMultiplicativeBinaryOp node)
    {
        inAMultiplyMultiplicativeBinaryOp(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outAMultiplyMultiplicativeBinaryOp(node);
    }

    public void inADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultiplicativeBinaryOp(ADivideMultiplicativeBinaryOp node)
    {
        inADivideMultiplicativeBinaryOp(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADivideMultiplicativeBinaryOp(node);
    }

    public void inARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemainderMultiplicativeBinaryOp(ARemainderMultiplicativeBinaryOp node)
    {
        inARemainderMultiplicativeBinaryOp(node);
        if(node.getRemainder() != null)
        {
            node.getRemainder().apply(this);
        }
        outARemainderMultiplicativeBinaryOp(node);
    }

    public void inALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftShiftBinaryOp(ALeftShiftShiftBinaryOp node)
    {
        inALeftShiftShiftBinaryOp(node);
        if(node.getLeftShift() != null)
        {
            node.getLeftShift().apply(this);
        }
        outALeftShiftShiftBinaryOp(node);
    }

    public void inARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftShiftBinaryOp(ARightShiftShiftBinaryOp node)
    {
        inARightShiftShiftBinaryOp(node);
        if(node.getRightShift() != null)
        {
            node.getRightShift().apply(this);
        }
        outARightShiftShiftBinaryOp(node);
    }

    public void inALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftRotateShiftBinaryOp(ALeftRotateShiftBinaryOp node)
    {
        inALeftRotateShiftBinaryOp(node);
        if(node.getLeftRotate() != null)
        {
            node.getLeftRotate().apply(this);
        }
        outALeftRotateShiftBinaryOp(node);
    }

    public void inARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightRotateShiftBinaryOp(ARightRotateShiftBinaryOp node)
    {
        inARightRotateShiftBinaryOp(node);
        if(node.getRightRotate() != null)
        {
            node.getRightRotate().apply(this);
        }
        outARightRotateShiftBinaryOp(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOp(node);
    }
}
