/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.analysis;

import java.util.*;
import drlc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPUnit().apply(this);
        outStart(node);
    }

    public void inAUnit(AUnit node)
    {
        defaultIn(node);
    }

    public void outAUnit(AUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnit(AUnit node)
    {
        inAUnit(node);
        {
            List<PGeneralSection> copy = new ArrayList<PGeneralSection>(node.getGeneralSection());
            Collections.reverse(copy);
            for(PGeneralSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSetupSection() != null)
        {
            node.getSetupSection().apply(this);
        }
        outAUnit(node);
    }

    public void inASetupSection(ASetupSection node)
    {
        defaultIn(node);
    }

    public void outASetupSection(ASetupSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetupSection(ASetupSection node)
    {
        inASetupSection(node);
        if(node.getInputDeclaration() != null)
        {
            node.getInputDeclaration().apply(this);
        }
        outASetupSection(node);
    }

    public void inAInputDeclaration(AInputDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInputDeclaration(AInputDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputDeclaration(AInputDeclaration node)
    {
        inAInputDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSetArgc() != null)
        {
            node.getSetArgc().apply(this);
        }
        outAInputDeclaration(node);
    }

    public void inAMethodDefinitionGeneralSection(AMethodDefinitionGeneralSection node)
    {
        defaultIn(node);
    }

    public void outAMethodDefinitionGeneralSection(AMethodDefinitionGeneralSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDefinitionGeneralSection(AMethodDefinitionGeneralSection node)
    {
        inAMethodDefinitionGeneralSection(node);
        if(node.getMethodDefinition() != null)
        {
            node.getMethodDefinition().apply(this);
        }
        outAMethodDefinitionGeneralSection(node);
    }

    public void inAFunctionDefinitionGeneralSection(AFunctionDefinitionGeneralSection node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionGeneralSection(AFunctionDefinitionGeneralSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinitionGeneralSection(AFunctionDefinitionGeneralSection node)
    {
        inAFunctionDefinitionGeneralSection(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionGeneralSection(node);
    }

    public void inABasicGeneralSection(ABasicGeneralSection node)
    {
        defaultIn(node);
    }

    public void outABasicGeneralSection(ABasicGeneralSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicGeneralSection(ABasicGeneralSection node)
    {
        inABasicGeneralSection(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outABasicGeneralSection(node);
    }

    public void inAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinitionBasicSection(AConstantDefinitionBasicSection node)
    {
        inAConstantDefinitionBasicSection(node);
        if(node.getConstantDefinition() != null)
        {
            node.getConstantDefinition().apply(this);
        }
        outAConstantDefinitionBasicSection(node);
    }

    public void inAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationBasicSection(AVariableDeclarationBasicSection node)
    {
        inAVariableDeclarationBasicSection(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationBasicSection(node);
    }

    public void inAVariableModificationBasicSection(AVariableModificationBasicSection node)
    {
        defaultIn(node);
    }

    public void outAVariableModificationBasicSection(AVariableModificationBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableModificationBasicSection(AVariableModificationBasicSection node)
    {
        inAVariableModificationBasicSection(node);
        if(node.getVariableModification() != null)
        {
            node.getVariableModification().apply(this);
        }
        outAVariableModificationBasicSection(node);
    }

    public void inAMethodCallBasicSection(AMethodCallBasicSection node)
    {
        defaultIn(node);
    }

    public void outAMethodCallBasicSection(AMethodCallBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallBasicSection(AMethodCallBasicSection node)
    {
        inAMethodCallBasicSection(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodCallBasicSection(node);
    }

    public void inAConditionalBasicSection(AConditionalBasicSection node)
    {
        defaultIn(node);
    }

    public void outAConditionalBasicSection(AConditionalBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalBasicSection(AConditionalBasicSection node)
    {
        inAConditionalBasicSection(node);
        if(node.getElseBlock() != null)
        {
            node.getElseBlock().apply(this);
        }
        {
            List<PElseIfBlock> copy = new ArrayList<PElseIfBlock>(node.getElseIfBlock());
            Collections.reverse(copy);
            for(PElseIfBlock e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIfBlock() != null)
        {
            node.getIfBlock().apply(this);
        }
        outAConditionalBasicSection(node);
    }

    public void inAIterativeBasicSection(AIterativeBasicSection node)
    {
        defaultIn(node);
    }

    public void outAIterativeBasicSection(AIterativeBasicSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeBasicSection(AIterativeBasicSection node)
    {
        inAIterativeBasicSection(node);
        if(node.getIterativeBlock() != null)
        {
            node.getIterativeBlock().apply(this);
        }
        outAIterativeBasicSection(node);
    }

    public void inAMethodDefinition(AMethodDefinition node)
    {
        defaultIn(node);
    }

    public void outAMethodDefinition(AMethodDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDefinition(AMethodDefinition node)
    {
        inAMethodDefinition(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAMethodDefinition(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstantDefinition(node);
    }

    public void inANoInitialisationVariableDeclaration(ANoInitialisationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outANoInitialisationVariableDeclaration(ANoInitialisationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoInitialisationVariableDeclaration(ANoInitialisationVariableDeclaration node)
    {
        inANoInitialisationVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getLvalueVariable() != null)
        {
            node.getLvalueVariable().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outANoInitialisationVariableDeclaration(node);
    }

    public void inAWithInitialisationVariableDeclaration(AWithInitialisationVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAWithInitialisationVariableDeclaration(AWithInitialisationVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithInitialisationVariableDeclaration(AWithInitialisationVariableDeclaration node)
    {
        inAWithInitialisationVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getLvalueVariable() != null)
        {
            node.getLvalueVariable().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAWithInitialisationVariableDeclaration(node);
    }

    public void inAVariableModification(AVariableModification node)
    {
        defaultIn(node);
    }

    public void outAVariableModification(AVariableModification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableModification(AVariableModification node)
    {
        inAVariableModification(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getLvalueVariable() != null)
        {
            node.getLvalueVariable().apply(this);
        }
        outAVariableModification(node);
    }

    public void inABuiltInOutMethodCall(ABuiltInOutMethodCall node)
    {
        defaultIn(node);
    }

    public void outABuiltInOutMethodCall(ABuiltInOutMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABuiltInOutMethodCall(ABuiltInOutMethodCall node)
    {
        inABuiltInOutMethodCall(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getOut() != null)
        {
            node.getOut().apply(this);
        }
        outABuiltInOutMethodCall(node);
    }

    public void inADefinedMethodCall(ADefinedMethodCall node)
    {
        defaultIn(node);
    }

    public void outADefinedMethodCall(ADefinedMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinedMethodCall(ADefinedMethodCall node)
    {
        inADefinedMethodCall(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outADefinedMethodCall(node);
    }

    public void inAIfBlock(AIfBlock node)
    {
        defaultIn(node);
    }

    public void outAIfBlock(AIfBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfBlock(AIfBlock node)
    {
        inAIfBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfBlock(node);
    }

    public void inAElseIfBlock(AElseIfBlock node)
    {
        defaultIn(node);
    }

    public void outAElseIfBlock(AElseIfBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfBlock(AElseIfBlock node)
    {
        inAElseIfBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseIfBlock(node);
    }

    public void inAElseBlock(AElseBlock node)
    {
        defaultIn(node);
    }

    public void outAElseBlock(AElseBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlock(AElseBlock node)
    {
        inAElseBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseBlock(node);
    }

    public void inAIterativeBlock(AIterativeBlock node)
    {
        defaultIn(node);
    }

    public void outAIterativeBlock(AIterativeBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterativeBlock(AIterativeBlock node)
    {
        inAIterativeBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            List<PBasicSection> copy = new ArrayList<PBasicSection>(node.getBasicSection());
            Collections.reverse(copy);
            for(PBasicSection e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterativeBlock(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        {
            List<PDeadCode> copy = new ArrayList<PDeadCode>(node.getDeadCode());
            Collections.reverse(copy);
            for(PDeadCode e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        {
            List<PDeadCode> copy = new ArrayList<PDeadCode>(node.getDeadCode());
            Collections.reverse(copy);
            for(PDeadCode e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outAContinueStopStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        {
            List<PDeadCode> copy = new ArrayList<PDeadCode>(node.getDeadCode());
            Collections.reverse(copy);
            for(PDeadCode e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStopStatement(node);
    }

    public void inAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExpressionStopStatement(AReturnExpressionStopStatement node)
    {
        inAReturnExpressionStopStatement(node);
        {
            List<PDeadCode> copy = new ArrayList<PDeadCode>(node.getDeadCode());
            Collections.reverse(copy);
            for(PDeadCode e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnExpressionStopStatement(node);
    }

    public void inADead1DeadCode(ADead1DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead1DeadCode(ADead1DeadCode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead1DeadCode(ADead1DeadCode node)
    {
        inADead1DeadCode(node);
        if(node.getBasicSection() != null)
        {
            node.getBasicSection().apply(this);
        }
        outADead1DeadCode(node);
    }

    public void inADead2DeadCode(ADead2DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead2DeadCode(ADead2DeadCode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead2DeadCode(ADead2DeadCode node)
    {
        inADead2DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead2DeadCode(node);
    }

    public void inADead3DeadCode(ADead3DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead3DeadCode(ADead3DeadCode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead3DeadCode(ADead3DeadCode node)
    {
        inADead3DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outADead3DeadCode(node);
    }

    public void inADead4DeadCode(ADead4DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead4DeadCode(ADead4DeadCode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead4DeadCode(ADead4DeadCode node)
    {
        inADead4DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outADead4DeadCode(node);
    }

    public void inADead5DeadCode(ADead5DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead5DeadCode(ADead5DeadCode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADead5DeadCode(ADead5DeadCode node)
    {
        inADead5DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead5DeadCode(node);
    }

    public void inAPrioritizedExpression(APrioritizedExpression node)
    {
        defaultIn(node);
    }

    public void outAPrioritizedExpression(APrioritizedExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioritizedExpression(APrioritizedExpression node)
    {
        inAPrioritizedExpression(node);
        if(node.getPrioritizedExpression() != null)
        {
            node.getPrioritizedExpression().apply(this);
        }
        outAPrioritizedExpression(node);
    }

    public void inABinaryExpression(ABinaryExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression(ABinaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpression(ABinaryExpression node)
    {
        inABinaryExpression(node);
        if(node.getPrioritizedExpression() != null)
        {
            node.getPrioritizedExpression().apply(this);
        }
        if(node.getBinaryOp() != null)
        {
            node.getBinaryOp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABinaryExpression(node);
    }

    public void inATermPrioritizedExpression(ATermPrioritizedExpression node)
    {
        defaultIn(node);
    }

    public void outATermPrioritizedExpression(ATermPrioritizedExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermPrioritizedExpression(ATermPrioritizedExpression node)
    {
        inATermPrioritizedExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermPrioritizedExpression(node);
    }

    public void inABinaryPrioritizedExpression(ABinaryPrioritizedExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryPrioritizedExpression(ABinaryPrioritizedExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryPrioritizedExpression(ABinaryPrioritizedExpression node)
    {
        inABinaryPrioritizedExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPrioritizedBinaryOp() != null)
        {
            node.getPrioritizedBinaryOp().apply(this);
        }
        if(node.getPrioritizedExpression() != null)
        {
            node.getPrioritizedExpression().apply(this);
        }
        outABinaryPrioritizedExpression(node);
    }

    public void inAValueTerm(AValueTerm node)
    {
        defaultIn(node);
    }

    public void outAValueTerm(AValueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueTerm(AValueTerm node)
    {
        inAValueTerm(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueTerm(node);
    }

    public void inAAddressOfTerm(AAddressOfTerm node)
    {
        defaultIn(node);
    }

    public void outAAddressOfTerm(AAddressOfTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressOfTerm(AAddressOfTerm node)
    {
        inAAddressOfTerm(node);
        if(node.getRvalueVariable() != null)
        {
            node.getRvalueVariable().apply(this);
        }
        if(node.getAddressOf() != null)
        {
            node.getAddressOf().apply(this);
        }
        outAAddressOfTerm(node);
    }

    public void inADereferenceTerm(ADereferenceTerm node)
    {
        defaultIn(node);
    }

    public void outADereferenceTerm(ADereferenceTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADereferenceTerm(ADereferenceTerm node)
    {
        inADereferenceTerm(node);
        if(node.getRvalueVariable() != null)
        {
            node.getRvalueVariable().apply(this);
        }
        {
            List<TDereference> copy = new ArrayList<TDereference>(node.getDereference());
            Collections.reverse(copy);
            for(TDereference e : copy)
            {
                e.apply(this);
            }
        }
        outADereferenceTerm(node);
    }

    public void inAUnaryTerm(AUnaryTerm node)
    {
        defaultIn(node);
    }

    public void outAUnaryTerm(AUnaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryTerm(AUnaryTerm node)
    {
        inAUnaryTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        outAUnaryTerm(node);
    }

    public void inAParExpressionTerm(AParExpressionTerm node)
    {
        defaultIn(node);
    }

    public void outAParExpressionTerm(AParExpressionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpressionTerm(AParExpressionTerm node)
    {
        inAParExpressionTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParExpressionTerm(node);
    }

    public void inAIntegerValue(AIntegerValue node)
    {
        defaultIn(node);
    }

    public void outAIntegerValue(AIntegerValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerValue(AIntegerValue node)
    {
        inAIntegerValue(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerValue(node);
    }

    public void inAVariableValue(AVariableValue node)
    {
        defaultIn(node);
    }

    public void outAVariableValue(AVariableValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableValue(AVariableValue node)
    {
        inAVariableValue(node);
        if(node.getRvalueVariable() != null)
        {
            node.getRvalueVariable().apply(this);
        }
        outAVariableValue(node);
    }

    public void inAFunctionValue(AFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAFunctionValue(AFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionValue(AFunctionValue node)
    {
        inAFunctionValue(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionValue(node);
    }

    public void inABuiltInArgcFunction(ABuiltInArgcFunction node)
    {
        defaultIn(node);
    }

    public void outABuiltInArgcFunction(ABuiltInArgcFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABuiltInArgcFunction(ABuiltInArgcFunction node)
    {
        inABuiltInArgcFunction(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgc() != null)
        {
            node.getArgc().apply(this);
        }
        outABuiltInArgcFunction(node);
    }

    public void inABuiltInArgvFunction(ABuiltInArgvFunction node)
    {
        defaultIn(node);
    }

    public void outABuiltInArgvFunction(ABuiltInArgvFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABuiltInArgvFunction(ABuiltInArgvFunction node)
    {
        inABuiltInArgvFunction(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgv() != null)
        {
            node.getArgv().apply(this);
        }
        outABuiltInArgvFunction(node);
    }

    public void inADefinedFunction(ADefinedFunction node)
    {
        defaultIn(node);
    }

    public void outADefinedFunction(ADefinedFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinedFunction(ADefinedFunction node)
    {
        inADefinedFunction(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outADefinedFunction(node);
    }

    public void inARvalueVariable(ARvalueVariable node)
    {
        defaultIn(node);
    }

    public void outARvalueVariable(ARvalueVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARvalueVariable(ARvalueVariable node)
    {
        inARvalueVariable(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outARvalueVariable(node);
    }

    public void inALvalueVariable(ALvalueVariable node)
    {
        defaultIn(node);
    }

    public void outALvalueVariable(ALvalueVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalueVariable(ALvalueVariable node)
    {
        inALvalueVariable(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<TDereference> copy = new ArrayList<TDereference>(node.getDereference());
            Collections.reverse(copy);
            for(TDereference e : copy)
            {
                e.apply(this);
            }
        }
        outALvalueVariable(node);
    }

    public void inAArgumentList(AArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentList(AArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        inAArgumentList(node);
        {
            List<PArgumentListTail> copy = new ArrayList<PArgumentListTail>(node.getArgumentListTail());
            Collections.reverse(copy);
            for(PArgumentListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgumentList(node);
    }

    public void inAArgumentListTail(AArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outAArgumentListTail(AArgumentListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentListTail(AArgumentListTail node)
    {
        inAArgumentListTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArgumentListTail(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        {
            List<PParameterListTail> copy = new ArrayList<PParameterListTail>(node.getParameterListTail());
            Collections.reverse(copy);
            for(PParameterListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLvalueVariable() != null)
        {
            node.getLvalueVariable().apply(this);
        }
        outAParameterList(node);
    }

    public void inAParameterListTail(AParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAParameterListTail(AParameterListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        inAParameterListTail(node);
        if(node.getLvalueVariable() != null)
        {
            node.getLvalueVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParameterListTail(node);
    }

    public void inAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusUnaryOp(APlusUnaryOp node)
    {
        inAPlusUnaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnaryOp(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inAComplementUnaryOp(AComplementUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAComplementUnaryOp(AComplementUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplementUnaryOp(AComplementUnaryOp node)
    {
        inAComplementUnaryOp(node);
        if(node.getComplement() != null)
        {
            node.getComplement().apply(this);
        }
        outAComplementUnaryOp(node);
    }

    public void inAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAToBoolUnaryOp(AToBoolUnaryOp node)
    {
        inAToBoolUnaryOp(node);
        if(node.getToBool() != null)
        {
            node.getToBool().apply(this);
        }
        outAToBoolUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOp(node);
    }

    public void inAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusBinaryOp(APlusBinaryOp node)
    {
        inAPlusBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusBinaryOp(node);
    }

    public void inAAndBinaryOp(AAndBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndBinaryOp(AAndBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBinaryOp(AAndBinaryOp node)
    {
        inAAndBinaryOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndBinaryOp(node);
    }

    public void inAOrBinaryOp(AOrBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrBinaryOp(AOrBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBinaryOp(AOrBinaryOp node)
    {
        inAOrBinaryOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrBinaryOp(node);
    }

    public void inAXorBinaryOp(AXorBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAXorBinaryOp(AXorBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorBinaryOp(AXorBinaryOp node)
    {
        inAXorBinaryOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorBinaryOp(node);
    }

    public void inAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusBinaryOp(AMinusBinaryOp node)
    {
        inAMinusBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusBinaryOp(node);
    }

    public void inALeftShiftPrioritizedBinaryOp(ALeftShiftPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeftShiftPrioritizedBinaryOp(ALeftShiftPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftShiftPrioritizedBinaryOp(ALeftShiftPrioritizedBinaryOp node)
    {
        inALeftShiftPrioritizedBinaryOp(node);
        if(node.getLeftShift() != null)
        {
            node.getLeftShift().apply(this);
        }
        outALeftShiftPrioritizedBinaryOp(node);
    }

    public void inARightShiftPrioritizedBinaryOp(ARightShiftPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARightShiftPrioritizedBinaryOp(ARightShiftPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightShiftPrioritizedBinaryOp(ARightShiftPrioritizedBinaryOp node)
    {
        inARightShiftPrioritizedBinaryOp(node);
        if(node.getRightShift() != null)
        {
            node.getRightShift().apply(this);
        }
        outARightShiftPrioritizedBinaryOp(node);
    }

    public void inAMultiplyPrioritizedBinaryOp(AMultiplyPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyPrioritizedBinaryOp(AMultiplyPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyPrioritizedBinaryOp(AMultiplyPrioritizedBinaryOp node)
    {
        inAMultiplyPrioritizedBinaryOp(node);
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        outAMultiplyPrioritizedBinaryOp(node);
    }

    public void inAEqualToPrioritizedBinaryOp(AEqualToPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqualToPrioritizedBinaryOp(AEqualToPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToPrioritizedBinaryOp(AEqualToPrioritizedBinaryOp node)
    {
        inAEqualToPrioritizedBinaryOp(node);
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        outAEqualToPrioritizedBinaryOp(node);
    }

    public void inADividePrioritizedBinaryOp(ADividePrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADividePrioritizedBinaryOp(ADividePrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADividePrioritizedBinaryOp(ADividePrioritizedBinaryOp node)
    {
        inADividePrioritizedBinaryOp(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADividePrioritizedBinaryOp(node);
    }

    public void inAModuloPrioritizedBinaryOp(AModuloPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAModuloPrioritizedBinaryOp(AModuloPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloPrioritizedBinaryOp(AModuloPrioritizedBinaryOp node)
    {
        inAModuloPrioritizedBinaryOp(node);
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        outAModuloPrioritizedBinaryOp(node);
    }

    public void inANotEqualToPrioritizedBinaryOp(ANotEqualToPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualToPrioritizedBinaryOp(ANotEqualToPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToPrioritizedBinaryOp(ANotEqualToPrioritizedBinaryOp node)
    {
        inANotEqualToPrioritizedBinaryOp(node);
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        outANotEqualToPrioritizedBinaryOp(node);
    }

    public void inALessThanPrioritizedBinaryOp(ALessThanPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessThanPrioritizedBinaryOp(ALessThanPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanPrioritizedBinaryOp(ALessThanPrioritizedBinaryOp node)
    {
        inALessThanPrioritizedBinaryOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanPrioritizedBinaryOp(node);
    }

    public void inALessOrEqualPrioritizedBinaryOp(ALessOrEqualPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualPrioritizedBinaryOp(ALessOrEqualPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualPrioritizedBinaryOp(ALessOrEqualPrioritizedBinaryOp node)
    {
        inALessOrEqualPrioritizedBinaryOp(node);
        if(node.getLessOrEqual() != null)
        {
            node.getLessOrEqual().apply(this);
        }
        outALessOrEqualPrioritizedBinaryOp(node);
    }

    public void inAMoreThanPrioritizedBinaryOp(AMoreThanPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreThanPrioritizedBinaryOp(AMoreThanPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreThanPrioritizedBinaryOp(AMoreThanPrioritizedBinaryOp node)
    {
        inAMoreThanPrioritizedBinaryOp(node);
        if(node.getMoreThan() != null)
        {
            node.getMoreThan().apply(this);
        }
        outAMoreThanPrioritizedBinaryOp(node);
    }

    public void inAMoreOrEqualPrioritizedBinaryOp(AMoreOrEqualPrioritizedBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMoreOrEqualPrioritizedBinaryOp(AMoreOrEqualPrioritizedBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreOrEqualPrioritizedBinaryOp(AMoreOrEqualPrioritizedBinaryOp node)
    {
        inAMoreOrEqualPrioritizedBinaryOp(node);
        if(node.getMoreOrEqual() != null)
        {
            node.getMoreOrEqual().apply(this);
        }
        outAMoreOrEqualPrioritizedBinaryOp(node);
    }
}
