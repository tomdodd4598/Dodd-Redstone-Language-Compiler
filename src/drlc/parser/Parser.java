/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.parser;

import drlc.lexer.*;
import drlc.node.*;
import drlc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PUnit node1 = (PUnit) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAunit1Unit */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAunit2Unit */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAsetupsection1SetupSection */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAsetupsection2SetupSection */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AInputSpecification */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AMethodDefinitionGeneralSection */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AFunctionDefinitionGeneralSection */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ABasicGeneralSection */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AConstantDefinitionBasicSection */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariableDeclarationBasicSection */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ALvalueModificationBasicSection */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AMethodCallBasicSection */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AAconditionalbasicsection1BasicSection */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce AAconditionalbasicsection2BasicSection */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAconditionalbasicsection3BasicSection */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce AAconditionalbasicsection4BasicSection */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AIterativeBasicSection */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AAmethoddefinition1MethodDefinition */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AAmethoddefinition2MethodDefinition */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AAmethoddefinition3MethodDefinition */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AAmethoddefinition4MethodDefinition */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce AAmethoddefinition5MethodDefinition */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AAmethoddefinition6MethodDefinition */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AAmethoddefinition7MethodDefinition */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AAmethoddefinition8MethodDefinition */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce AAfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce AAfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AAfunctiondefinition3FunctionDefinition */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce AAfunctiondefinition4FunctionDefinition */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AAfunctiondefinition5FunctionDefinition */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce AAfunctiondefinition6FunctionDefinition */
            {
                ArrayList<Object> list = new30();
                push(goTo(6), list, false);
            }
            break;
            case 31: /* reduce AAfunctiondefinition7FunctionDefinition */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list, false);
            }
            break;
            case 32: /* reduce AAfunctiondefinition8FunctionDefinition */
            {
                ArrayList<Object> list = new32();
                push(goTo(6), list, false);
            }
            break;
            case 33: /* reduce AConstantDefinition */
            {
                ArrayList<Object> list = new33();
                push(goTo(7), list, false);
            }
            break;
            case 34: /* reduce AIntegerNoInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AIntegerWithInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AArrayNoInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce AArrayWithImplicitInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new37();
                push(goTo(8), list, false);
            }
            break;
            case 38: /* reduce AArrayWithExplicitInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new38();
                push(goTo(8), list, false);
            }
            break;
            case 39: /* reduce AIntegerVariableLvalueModification */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list, false);
            }
            break;
            case 40: /* reduce AArrayElementLvalueModification */
            {
                ArrayList<Object> list = new40();
                push(goTo(9), list, false);
            }
            break;
            case 41: /* reduce AParArrayElementLvalueModification */
            {
                ArrayList<Object> list = new41();
                push(goTo(9), list, false);
            }
            break;
            case 42: /* reduce ABuiltInOutMethodCall */
            {
                ArrayList<Object> list = new42();
                push(goTo(10), list, false);
            }
            break;
            case 43: /* reduce AAdefinedmethodcall1MethodCall */
            {
                ArrayList<Object> list = new43();
                push(goTo(10), list, false);
            }
            break;
            case 44: /* reduce AAdefinedmethodcall2MethodCall */
            {
                ArrayList<Object> list = new44();
                push(goTo(10), list, false);
            }
            break;
            case 45: /* reduce AAifblock1IfBlock */
            {
                ArrayList<Object> list = new45();
                push(goTo(11), list, false);
            }
            break;
            case 46: /* reduce AAifblock2IfBlock */
            {
                ArrayList<Object> list = new46();
                push(goTo(11), list, false);
            }
            break;
            case 47: /* reduce AAifblock3IfBlock */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list, false);
            }
            break;
            case 48: /* reduce AAifblock4IfBlock */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list, false);
            }
            break;
            case 49: /* reduce AAelseifblock1ElseIfBlock */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list, false);
            }
            break;
            case 50: /* reduce AAelseifblock2ElseIfBlock */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list, false);
            }
            break;
            case 51: /* reduce AAelseifblock3ElseIfBlock */
            {
                ArrayList<Object> list = new51();
                push(goTo(12), list, false);
            }
            break;
            case 52: /* reduce AAelseifblock4ElseIfBlock */
            {
                ArrayList<Object> list = new52();
                push(goTo(12), list, false);
            }
            break;
            case 53: /* reduce AAelseblock1ElseBlock */
            {
                ArrayList<Object> list = new53();
                push(goTo(13), list, false);
            }
            break;
            case 54: /* reduce AAelseblock2ElseBlock */
            {
                ArrayList<Object> list = new54();
                push(goTo(13), list, false);
            }
            break;
            case 55: /* reduce AAelseblock3ElseBlock */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list, false);
            }
            break;
            case 56: /* reduce AAelseblock4ElseBlock */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list, false);
            }
            break;
            case 57: /* reduce AAiterativeblock1IterativeBlock */
            {
                ArrayList<Object> list = new57();
                push(goTo(14), list, false);
            }
            break;
            case 58: /* reduce AAiterativeblock2IterativeBlock */
            {
                ArrayList<Object> list = new58();
                push(goTo(14), list, false);
            }
            break;
            case 59: /* reduce AAiterativeblock3IterativeBlock */
            {
                ArrayList<Object> list = new59();
                push(goTo(14), list, false);
            }
            break;
            case 60: /* reduce AAiterativeblock4IterativeBlock */
            {
                ArrayList<Object> list = new60();
                push(goTo(14), list, false);
            }
            break;
            case 61: /* reduce AAreturnstopstatement1StopStatement */
            {
                ArrayList<Object> list = new61();
                push(goTo(15), list, false);
            }
            break;
            case 62: /* reduce AAreturnstopstatement2StopStatement */
            {
                ArrayList<Object> list = new62();
                push(goTo(15), list, false);
            }
            break;
            case 63: /* reduce AAcontinuestopstatement1StopStatement */
            {
                ArrayList<Object> list = new63();
                push(goTo(15), list, false);
            }
            break;
            case 64: /* reduce AAcontinuestopstatement2StopStatement */
            {
                ArrayList<Object> list = new64();
                push(goTo(15), list, false);
            }
            break;
            case 65: /* reduce AAbreakstopstatement1StopStatement */
            {
                ArrayList<Object> list = new65();
                push(goTo(15), list, false);
            }
            break;
            case 66: /* reduce AAbreakstopstatement2StopStatement */
            {
                ArrayList<Object> list = new66();
                push(goTo(15), list, false);
            }
            break;
            case 67: /* reduce AAreturnexpressionstopstatement1StopStatement */
            {
                ArrayList<Object> list = new67();
                push(goTo(15), list, false);
            }
            break;
            case 68: /* reduce AAreturnexpressionstopstatement2StopStatement */
            {
                ArrayList<Object> list = new68();
                push(goTo(15), list, false);
            }
            break;
            case 69: /* reduce ADead1DeadCode */
            {
                ArrayList<Object> list = new69();
                push(goTo(16), list, false);
            }
            break;
            case 70: /* reduce ADead2DeadCode */
            {
                ArrayList<Object> list = new70();
                push(goTo(16), list, false);
            }
            break;
            case 71: /* reduce ADead3DeadCode */
            {
                ArrayList<Object> list = new71();
                push(goTo(16), list, false);
            }
            break;
            case 72: /* reduce ADead4DeadCode */
            {
                ArrayList<Object> list = new72();
                push(goTo(16), list, false);
            }
            break;
            case 73: /* reduce ADead5DeadCode */
            {
                ArrayList<Object> list = new73();
                push(goTo(16), list, false);
            }
            break;
            case 74: /* reduce APrioritizedExpression */
            {
                ArrayList<Object> list = new74();
                push(goTo(17), list, false);
            }
            break;
            case 75: /* reduce ABinaryExpression */
            {
                ArrayList<Object> list = new75();
                push(goTo(17), list, false);
            }
            break;
            case 76: /* reduce ATermPrioritizedExpression */
            {
                ArrayList<Object> list = new76();
                push(goTo(18), list, false);
            }
            break;
            case 77: /* reduce ABinaryPrioritizedExpression */
            {
                ArrayList<Object> list = new77();
                push(goTo(18), list, false);
            }
            break;
            case 78: /* reduce AValueTerm */
            {
                ArrayList<Object> list = new78();
                push(goTo(19), list, false);
            }
            break;
            case 79: /* reduce AAddressOfTerm */
            {
                ArrayList<Object> list = new79();
                push(goTo(19), list, false);
            }
            break;
            case 80: /* reduce ADereferenceTerm */
            {
                ArrayList<Object> list = new80();
                push(goTo(19), list, false);
            }
            break;
            case 81: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new81();
                push(goTo(19), list, false);
            }
            break;
            case 82: /* reduce AParExpressionTerm */
            {
                ArrayList<Object> list = new82();
                push(goTo(19), list, false);
            }
            break;
            case 83: /* reduce AIntegerVariableAddressOfTerm */
            {
                ArrayList<Object> list = new83();
                push(goTo(20), list, false);
            }
            break;
            case 84: /* reduce AArrayElementAddressOfTerm */
            {
                ArrayList<Object> list = new84();
                push(goTo(20), list, false);
            }
            break;
            case 85: /* reduce AParArrayElementAddressOfTerm */
            {
                ArrayList<Object> list = new85();
                push(goTo(20), list, false);
            }
            break;
            case 86: /* reduce AIntegerVariableDereferenceTerm */
            {
                ArrayList<Object> list = new86();
                push(goTo(21), list, false);
            }
            break;
            case 87: /* reduce AArrayElementDereferenceTerm */
            {
                ArrayList<Object> list = new87();
                push(goTo(21), list, false);
            }
            break;
            case 88: /* reduce AParArrayElementDereferenceTerm */
            {
                ArrayList<Object> list = new88();
                push(goTo(21), list, false);
            }
            break;
            case 89: /* reduce AIntegerValue */
            {
                ArrayList<Object> list = new89();
                push(goTo(22), list, false);
            }
            break;
            case 90: /* reduce AIntegerVariableValue */
            {
                ArrayList<Object> list = new90();
                push(goTo(22), list, false);
            }
            break;
            case 91: /* reduce AArrayElementValue */
            {
                ArrayList<Object> list = new91();
                push(goTo(22), list, false);
            }
            break;
            case 92: /* reduce AFunctionValue */
            {
                ArrayList<Object> list = new92();
                push(goTo(22), list, false);
            }
            break;
            case 93: /* reduce ABuiltInArgcFunction */
            {
                ArrayList<Object> list = new93();
                push(goTo(23), list, false);
            }
            break;
            case 94: /* reduce ABuiltInArgvFunction */
            {
                ArrayList<Object> list = new94();
                push(goTo(23), list, false);
            }
            break;
            case 95: /* reduce AAdefinedfunction1Function */
            {
                ArrayList<Object> list = new95();
                push(goTo(23), list, false);
            }
            break;
            case 96: /* reduce AAdefinedfunction2Function */
            {
                ArrayList<Object> list = new96();
                push(goTo(23), list, false);
            }
            break;
            case 97: /* reduce ARvalueIntegerVariable */
            {
                ArrayList<Object> list = new97();
                push(goTo(24), list, false);
            }
            break;
            case 98: /* reduce ARvalueArrayElement */
            {
                ArrayList<Object> list = new98();
                push(goTo(25), list, false);
            }
            break;
            case 99: /* reduce AParRvalueArrayElement */
            {
                ArrayList<Object> list = new99();
                push(goTo(26), list, false);
            }
            break;
            case 100: /* reduce AAparrvaluearrayelementinternal1ParRvalueArrayElementInternal */
            {
                ArrayList<Object> list = new100();
                push(goTo(27), list, false);
            }
            break;
            case 101: /* reduce AAparrvaluearrayelementinternal2ParRvalueArrayElementInternal */
            {
                ArrayList<Object> list = new101();
                push(goTo(27), list, false);
            }
            break;
            case 102: /* reduce AAlvalueintegervariable1LvalueIntegerVariable */
            {
                ArrayList<Object> list = new102();
                push(goTo(28), list, false);
            }
            break;
            case 103: /* reduce AAlvalueintegervariable2LvalueIntegerVariable */
            {
                ArrayList<Object> list = new103();
                push(goTo(28), list, false);
            }
            break;
            case 104: /* reduce AAlvaluearrayelement1LvalueArrayElement */
            {
                ArrayList<Object> list = new104();
                push(goTo(29), list, false);
            }
            break;
            case 105: /* reduce AAlvaluearrayelement2LvalueArrayElement */
            {
                ArrayList<Object> list = new105();
                push(goTo(29), list, false);
            }
            break;
            case 106: /* reduce AParLvalueArrayElement */
            {
                ArrayList<Object> list = new106();
                push(goTo(30), list, false);
            }
            break;
            case 107: /* reduce AAparlvaluearrayelementinternal1ParLvalueArrayElementInternal */
            {
                ArrayList<Object> list = new107();
                push(goTo(31), list, false);
            }
            break;
            case 108: /* reduce AAparlvaluearrayelementinternal2ParLvalueArrayElementInternal */
            {
                ArrayList<Object> list = new108();
                push(goTo(31), list, false);
            }
            break;
            case 109: /* reduce AAdeclarationvariable1DeclarationVariable */
            {
                ArrayList<Object> list = new109();
                push(goTo(32), list, false);
            }
            break;
            case 110: /* reduce AAdeclarationvariable2DeclarationVariable */
            {
                ArrayList<Object> list = new110();
                push(goTo(32), list, false);
            }
            break;
            case 111: /* reduce AArrayBrackets */
            {
                ArrayList<Object> list = new111();
                push(goTo(33), list, false);
            }
            break;
            case 112: /* reduce AAddressOfImplicitInitialisationArray */
            {
                ArrayList<Object> list = new112();
                push(goTo(34), list, false);
            }
            break;
            case 113: /* reduce AAdereferenceimplicitinitialisationarray1ImplicitInitialisationArray */
            {
                ArrayList<Object> list = new113();
                push(goTo(34), list, false);
            }
            break;
            case 114: /* reduce AAdereferenceimplicitinitialisationarray2ImplicitInitialisationArray */
            {
                ArrayList<Object> list = new114();
                push(goTo(34), list, false);
            }
            break;
            case 115: /* reduce ANestedExplicitInitialisationArray */
            {
                ArrayList<Object> list = new115();
                push(goTo(35), list, false);
            }
            break;
            case 116: /* reduce AAnonnestedexplicitinitialisationarray1ExplicitInitialisationArray */
            {
                ArrayList<Object> list = new116();
                push(goTo(35), list, false);
            }
            break;
            case 117: /* reduce AAnonnestedexplicitinitialisationarray2ExplicitInitialisationArray */
            {
                ArrayList<Object> list = new117();
                push(goTo(35), list, false);
            }
            break;
            case 118: /* reduce AAexplicitinitialisationarraylist1ExplicitInitialisationArrayList */
            {
                ArrayList<Object> list = new118();
                push(goTo(36), list, false);
            }
            break;
            case 119: /* reduce AAexplicitinitialisationarraylist2ExplicitInitialisationArrayList */
            {
                ArrayList<Object> list = new119();
                push(goTo(36), list, false);
            }
            break;
            case 120: /* reduce AExplicitInitialisationArrayListTail */
            {
                ArrayList<Object> list = new120();
                push(goTo(37), list, false);
            }
            break;
            case 121: /* reduce AAargumentlist1ArgumentList */
            {
                ArrayList<Object> list = new121();
                push(goTo(38), list, false);
            }
            break;
            case 122: /* reduce AAargumentlist2ArgumentList */
            {
                ArrayList<Object> list = new122();
                push(goTo(38), list, false);
            }
            break;
            case 123: /* reduce AArgumentListTail */
            {
                ArrayList<Object> list = new123();
                push(goTo(39), list, false);
            }
            break;
            case 124: /* reduce AAparameterlist1ParameterList */
            {
                ArrayList<Object> list = new124();
                push(goTo(40), list, false);
            }
            break;
            case 125: /* reduce AAparameterlist2ParameterList */
            {
                ArrayList<Object> list = new125();
                push(goTo(40), list, false);
            }
            break;
            case 126: /* reduce AParameterListTail */
            {
                ArrayList<Object> list = new126();
                push(goTo(41), list, false);
            }
            break;
            case 127: /* reduce APlusUnaryOp */
            {
                ArrayList<Object> list = new127();
                push(goTo(42), list, false);
            }
            break;
            case 128: /* reduce AMinusUnaryOp */
            {
                ArrayList<Object> list = new128();
                push(goTo(42), list, false);
            }
            break;
            case 129: /* reduce AComplementUnaryOp */
            {
                ArrayList<Object> list = new129();
                push(goTo(42), list, false);
            }
            break;
            case 130: /* reduce AToBoolUnaryOp */
            {
                ArrayList<Object> list = new130();
                push(goTo(42), list, false);
            }
            break;
            case 131: /* reduce ANotUnaryOp */
            {
                ArrayList<Object> list = new131();
                push(goTo(42), list, false);
            }
            break;
            case 132: /* reduce APlusBinaryOp */
            {
                ArrayList<Object> list = new132();
                push(goTo(43), list, false);
            }
            break;
            case 133: /* reduce AAndBinaryOp */
            {
                ArrayList<Object> list = new133();
                push(goTo(43), list, false);
            }
            break;
            case 134: /* reduce AOrBinaryOp */
            {
                ArrayList<Object> list = new134();
                push(goTo(43), list, false);
            }
            break;
            case 135: /* reduce AXorBinaryOp */
            {
                ArrayList<Object> list = new135();
                push(goTo(43), list, false);
            }
            break;
            case 136: /* reduce AMinusBinaryOp */
            {
                ArrayList<Object> list = new136();
                push(goTo(43), list, false);
            }
            break;
            case 137: /* reduce ALeftShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new137();
                push(goTo(44), list, false);
            }
            break;
            case 138: /* reduce ARightShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new138();
                push(goTo(44), list, false);
            }
            break;
            case 139: /* reduce AMultiplyPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new139();
                push(goTo(44), list, false);
            }
            break;
            case 140: /* reduce AEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new140();
                push(goTo(44), list, false);
            }
            break;
            case 141: /* reduce ADividePrioritizedBinaryOp */
            {
                ArrayList<Object> list = new141();
                push(goTo(44), list, false);
            }
            break;
            case 142: /* reduce AModuloPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new142();
                push(goTo(44), list, false);
            }
            break;
            case 143: /* reduce ANotEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new143();
                push(goTo(44), list, false);
            }
            break;
            case 144: /* reduce ALessThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new144();
                push(goTo(44), list, false);
            }
            break;
            case 145: /* reduce ALessOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new145();
                push(goTo(44), list, false);
            }
            break;
            case 146: /* reduce AMoreThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new146();
                push(goTo(44), list, false);
            }
            break;
            case 147: /* reduce AMoreOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new147();
                push(goTo(44), list, false);
            }
            break;
            case 148: /* reduce ATerminal$GeneralSection */
            {
                ArrayList<Object> list = new148();
                push(goTo(45), list, true);
            }
            break;
            case 149: /* reduce ANonTerminal$GeneralSection */
            {
                ArrayList<Object> list = new149();
                push(goTo(45), list, true);
            }
            break;
            case 150: /* reduce ATerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new150();
                push(goTo(46), list, true);
            }
            break;
            case 151: /* reduce ANonTerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new151();
                push(goTo(46), list, true);
            }
            break;
            case 152: /* reduce ATerminal$BasicSection */
            {
                ArrayList<Object> list = new152();
                push(goTo(47), list, true);
            }
            break;
            case 153: /* reduce ANonTerminal$BasicSection */
            {
                ArrayList<Object> list = new153();
                push(goTo(47), list, true);
            }
            break;
            case 154: /* reduce ATerminal$ArrayBrackets */
            {
                ArrayList<Object> list = new154();
                push(goTo(48), list, true);
            }
            break;
            case 155: /* reduce ANonTerminal$ArrayBrackets */
            {
                ArrayList<Object> list = new155();
                push(goTo(48), list, true);
            }
            break;
            case 156: /* reduce ATerminal$DeadCode */
            {
                ArrayList<Object> list = new156();
                push(goTo(49), list, true);
            }
            break;
            case 157: /* reduce ANonTerminal$DeadCode */
            {
                ArrayList<Object> list = new157();
                push(goTo(49), list, true);
            }
            break;
            case 158: /* reduce ATerminal$Dereference */
            {
                ArrayList<Object> list = new158();
                push(goTo(50), list, true);
            }
            break;
            case 159: /* reduce ANonTerminal$Dereference */
            {
                ArrayList<Object> list = new159();
                push(goTo(50), list, true);
            }
            break;
            case 160: /* reduce ATerminal$ExplicitInitialisationArrayListTail */
            {
                ArrayList<Object> list = new160();
                push(goTo(51), list, true);
            }
            break;
            case 161: /* reduce ANonTerminal$ExplicitInitialisationArrayListTail */
            {
                ArrayList<Object> list = new161();
                push(goTo(51), list, true);
            }
            break;
            case 162: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new162();
                push(goTo(52), list, true);
            }
            break;
            case 163: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new163();
                push(goTo(52), list, true);
            }
            break;
            case 164: /* reduce ATerminal$ParameterListTail */
            {
                ArrayList<Object> list = new164();
                push(goTo(53), list, true);
            }
            break;
            case 165: /* reduce ANonTerminal$ParameterListTail */
            {
                ArrayList<Object> list = new165();
                push(goTo(53), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAunit1Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        PSetupSection psetupsectionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        psetupsectionNode2 = (PSetupSection)nodeArrayList1.get(0);
        {
            // Block
        }

        punitNode1 = new AUnit(psetupsectionNode2, listNode3);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAunit2Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        PSetupSection psetupsectionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        psetupsectionNode2 = (PSetupSection)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        punitNode1 = new AUnit(psetupsectionNode2, listNode4);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAsetupsection1SetupSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSetupSection psetupsectionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        psetupsectionNode1 = new ASetupSection(null);
        }
	nodeList.add(psetupsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAsetupsection2SetupSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetupSection psetupsectionNode1;
        {
            // Block
        PInputSpecification pinputspecificationNode2;
        pinputspecificationNode2 = (PInputSpecification)nodeArrayList1.get(0);

        psetupsectionNode1 = new ASetupSection(pinputspecificationNode2);
        }
	nodeList.add(psetupsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AInputSpecification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputSpecification pinputspecificationNode1;
        {
            // Block
        TSetArgc tsetargcNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tsetargcNode2 = (TSetArgc)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pinputspecificationNode1 = new AInputSpecification(tsetargcNode2, tlparNode3, pexpressionNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pinputspecificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMethodDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PMethodDefinition pmethoddefinitionNode2;
        pmethoddefinitionNode2 = (PMethodDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AMethodDefinitionGeneralSection(pmethoddefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFunctionDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AFunctionDefinitionGeneralSection(pfunctiondefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABasicGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new ABasicGeneralSection(pbasicsectionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AConstantDefinitionBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PConstantDefinition pconstantdefinitionNode2;
        pconstantdefinitionNode2 = (PConstantDefinition)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AConstantDefinitionBasicSection(pconstantdefinitionNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDeclarationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableDeclarationBasicSection(pvariabledeclarationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALvalueModificationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PLvalueModification plvaluemodificationNode2;
        plvaluemodificationNode2 = (PLvalueModification)nodeArrayList1.get(0);

        pbasicsectionNode1 = new ALvalueModificationBasicSection(plvaluemodificationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMethodCallBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AMethodCallBasicSection(pmethodcallNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAconditionalbasicsection1BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAconditionalbasicsection2BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAconditionalbasicsection3BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PElseBlock pelseblockNode4;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }
        pelseblockNode4 = (PElseBlock)nodeArrayList2.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, pelseblockNode4);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAconditionalbasicsection4BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PElseBlock pelseblockNode5;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pelseblockNode5 = (PElseBlock)nodeArrayList3.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, pelseblockNode5);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIterativeBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIterativeBlock piterativeblockNode2;
        piterativeblockNode2 = (PIterativeBlock)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AIterativeBasicSection(piterativeblockNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethoddefinition1MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethoddefinition2MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethoddefinition3MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddefinition4MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddefinition5MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddefinition6MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddefinition7MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddefinition8MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAfunctiondefinition3FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAfunctiondefinition4FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAfunctiondefinition5FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAfunctiondefinition6FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAfunctiondefinition7FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAfunctiondefinition8FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AConstantDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstantDefinition pconstantdefinitionNode1;
        {
            // Block
        TConst tconstNode2;
        TName tnameNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pconstantdefinitionNode1 = new AConstantDefinition(tconstNode2, tnameNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pconstantdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIntegerNoInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        PDeclarationVariable pdeclarationvariableNode3;
        TSemicolon tsemicolonNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pdeclarationvariableNode3 = (PDeclarationVariable)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvariabledeclarationNode1 = new AIntegerNoInitialisationVariableDeclaration(tvarNode2, pdeclarationvariableNode3, tsemicolonNode4);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIntegerWithInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        PDeclarationVariable pdeclarationvariableNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pdeclarationvariableNode3 = (PDeclarationVariable)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvariabledeclarationNode1 = new AIntegerWithInitialisationVariableDeclaration(tvarNode2, pdeclarationvariableNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AArrayNoInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PDeclarationVariable pdeclarationvariableNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pdeclarationvariableNode5 = (PDeclarationVariable)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pvariabledeclarationNode1 = new AArrayNoInitialisationVariableDeclaration(tvarNode2, listNode4, pdeclarationvariableNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AArrayWithImplicitInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PDeclarationVariable pdeclarationvariableNode5;
        TEquals tequalsNode6;
        PImplicitInitialisationArray pimplicitinitialisationarrayNode7;
        TSemicolon tsemicolonNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pdeclarationvariableNode5 = (PDeclarationVariable)nodeArrayList3.get(0);
        tequalsNode6 = (TEquals)nodeArrayList4.get(0);
        pimplicitinitialisationarrayNode7 = (PImplicitInitialisationArray)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pvariabledeclarationNode1 = new AArrayWithImplicitInitialisationVariableDeclaration(tvarNode2, listNode4, pdeclarationvariableNode5, tequalsNode6, pimplicitinitialisationarrayNode7, tsemicolonNode8);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AArrayWithExplicitInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PDeclarationVariable pdeclarationvariableNode5;
        TEquals tequalsNode6;
        PExplicitInitialisationArray pexplicitinitialisationarrayNode7;
        TSemicolon tsemicolonNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pdeclarationvariableNode5 = (PDeclarationVariable)nodeArrayList3.get(0);
        tequalsNode6 = (TEquals)nodeArrayList4.get(0);
        pexplicitinitialisationarrayNode7 = (PExplicitInitialisationArray)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pvariabledeclarationNode1 = new AArrayWithExplicitInitialisationVariableDeclaration(tvarNode2, listNode4, pdeclarationvariableNode5, tequalsNode6, pexplicitinitialisationarrayNode7, tsemicolonNode8);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIntegerVariableLvalueModification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueModification plvaluemodificationNode1;
        {
            // Block
        PLvalueIntegerVariable plvalueintegervariableNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        plvalueintegervariableNode2 = (PLvalueIntegerVariable)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        plvaluemodificationNode1 = new AIntegerVariableLvalueModification(plvalueintegervariableNode2, tequalsNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(plvaluemodificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AArrayElementLvalueModification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueModification plvaluemodificationNode1;
        {
            // Block
        PLvalueArrayElement plvaluearrayelementNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        plvaluearrayelementNode2 = (PLvalueArrayElement)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        plvaluemodificationNode1 = new AArrayElementLvalueModification(plvaluearrayelementNode2, tequalsNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(plvaluemodificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AParArrayElementLvalueModification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueModification plvaluemodificationNode1;
        {
            // Block
        PParLvalueArrayElement pparlvaluearrayelementNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        pparlvaluearrayelementNode2 = (PParLvalueArrayElement)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        plvaluemodificationNode1 = new AParArrayElementLvalueModification(pparlvaluearrayelementNode2, tequalsNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(plvaluemodificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABuiltInOutMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TOut toutNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        toutNode2 = (TOut)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ABuiltInOutMethodCall(toutNode2, tlparNode3, pexpressionNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAdefinedmethodcall1MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, null, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAdefinedmethodcall2MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAifblock1IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAifblock2IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAifblock3IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAifblock4IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAelseifblock1ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAelseifblock2ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAelseifblock3ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAelseifblock4ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAelseblock1ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, null, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAelseblock2ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, null, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAelseblock3ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAelseblock4ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAiterativeblock1IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAiterativeblock2IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAiterativeblock3IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAiterativeblock4IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAreturnstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAreturnstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAcontinuestopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAcontinuestopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAbreakstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAbreakstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAreturnexpressionstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAreturnexpressionstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ADead1DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pdeadcodeNode1 = new ADead1DeadCode(pbasicsectionNode2);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ADead2DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead2DeadCode(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ADead3DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead3DeadCode(tcontinueNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ADead4DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead4DeadCode(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADead5DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeadcodeNode1 = new ADead5DeadCode(treturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce APrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new APrioritizedExpression(pprioritizedexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ABinaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PBinaryOp pbinaryopNode3;
        PPrioritizedExpression pprioritizedexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pbinaryopNode3 = (PBinaryOp)nodeArrayList2.get(0);
        pprioritizedexpressionNode4 = (PPrioritizedExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ABinaryExpression(pexpressionNode2, pbinaryopNode3, pprioritizedexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATermPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pprioritizedexpressionNode1 = new ATermPrioritizedExpression(ptermNode2);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ABinaryPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        PPrioritizedBinaryOp pprioritizedbinaryopNode3;
        PTerm ptermNode4;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);
        pprioritizedbinaryopNode3 = (PPrioritizedBinaryOp)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pprioritizedexpressionNode1 = new ABinaryPrioritizedExpression(pprioritizedexpressionNode2, pprioritizedbinaryopNode3, ptermNode4);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AValueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ptermNode1 = new AValueTerm(pvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAddressOfTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PAddressOfTerm paddressoftermNode2;
        paddressoftermNode2 = (PAddressOfTerm)nodeArrayList1.get(0);

        ptermNode1 = new AAddressOfTerm(paddressoftermNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ADereferenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PDereferenceTerm pdereferencetermNode2;
        pdereferencetermNode2 = (PDereferenceTerm)nodeArrayList1.get(0);

        ptermNode1 = new ADereferenceTerm(pdereferencetermNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PUnaryOp punaryopNode2;
        PTerm ptermNode3;
        punaryopNode2 = (PUnaryOp)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(punaryopNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AParExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParExpressionTerm(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AIntegerVariableAddressOfTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddressOfTerm paddressoftermNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        PRvalueIntegerVariable prvalueintegervariableNode3;
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        prvalueintegervariableNode3 = (PRvalueIntegerVariable)nodeArrayList2.get(0);

        paddressoftermNode1 = new AIntegerVariableAddressOfTerm(taddressofNode2, prvalueintegervariableNode3);
        }
	nodeList.add(paddressoftermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AArrayElementAddressOfTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddressOfTerm paddressoftermNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        PRvalueArrayElement prvaluearrayelementNode3;
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        prvaluearrayelementNode3 = (PRvalueArrayElement)nodeArrayList2.get(0);

        paddressoftermNode1 = new AArrayElementAddressOfTerm(taddressofNode2, prvaluearrayelementNode3);
        }
	nodeList.add(paddressoftermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AParArrayElementAddressOfTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddressOfTerm paddressoftermNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        PParRvalueArrayElement pparrvaluearrayelementNode3;
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        pparrvaluearrayelementNode3 = (PParRvalueArrayElement)nodeArrayList2.get(0);

        paddressoftermNode1 = new AParArrayElementAddressOfTerm(taddressofNode2, pparrvaluearrayelementNode3);
        }
	nodeList.add(paddressoftermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AIntegerVariableDereferenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDereferenceTerm pdereferencetermNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PRvalueIntegerVariable prvalueintegervariableNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        prvalueintegervariableNode4 = (PRvalueIntegerVariable)nodeArrayList2.get(0);

        pdereferencetermNode1 = new AIntegerVariableDereferenceTerm(listNode3, prvalueintegervariableNode4);
        }
	nodeList.add(pdereferencetermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AArrayElementDereferenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDereferenceTerm pdereferencetermNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PRvalueArrayElement prvaluearrayelementNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        prvaluearrayelementNode4 = (PRvalueArrayElement)nodeArrayList2.get(0);

        pdereferencetermNode1 = new AArrayElementDereferenceTerm(listNode3, prvaluearrayelementNode4);
        }
	nodeList.add(pdereferencetermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AParArrayElementDereferenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDereferenceTerm pdereferencetermNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParRvalueArrayElement pparrvaluearrayelementNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparrvaluearrayelementNode4 = (PParRvalueArrayElement)nodeArrayList2.get(0);

        pdereferencetermNode1 = new AParArrayElementDereferenceTerm(listNode3, pparrvaluearrayelementNode4);
        }
	nodeList.add(pdereferencetermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AIntegerValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pvalueNode1 = new AIntegerValue(tintegerNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AIntegerVariableValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PRvalueIntegerVariable prvalueintegervariableNode2;
        prvalueintegervariableNode2 = (PRvalueIntegerVariable)nodeArrayList1.get(0);

        pvalueNode1 = new AIntegerVariableValue(prvalueintegervariableNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AArrayElementValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PRvalueArrayElement prvaluearrayelementNode2;
        prvaluearrayelementNode2 = (PRvalueArrayElement)nodeArrayList1.get(0);

        pvalueNode1 = new AArrayElementValue(prvaluearrayelementNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AFunctionValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pvalueNode1 = new AFunctionValue(pfunctionNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ABuiltInArgcFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TArgc targcNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        targcNode2 = (TArgc)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfunctionNode1 = new ABuiltInArgcFunction(targcNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ABuiltInArgvFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TArgv targvNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        targvNode2 = (TArgv)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctionNode1 = new ABuiltInArgvFunction(targvNode2, tlparNode3, pexpressionNode4, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAdefinedfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctionNode1 = new ADefinedFunction(tnameNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAdefinedfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctionNode1 = new ADefinedFunction(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ARvalueIntegerVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRvalueIntegerVariable prvalueintegervariableNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        prvalueintegervariableNode1 = new ARvalueIntegerVariable(tnameNode2);
        }
	nodeList.add(prvalueintegervariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ARvalueArrayElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRvalueArrayElement prvaluearrayelementNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        prvaluearrayelementNode1 = new ARvalueArrayElement(tnameNode2, listNode4);
        }
	nodeList.add(prvaluearrayelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AParRvalueArrayElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParRvalueArrayElement pparrvaluearrayelementNode1;
        {
            // Block
        TLPar tlparNode2;
        PParRvalueArrayElementInternal pparrvaluearrayelementinternalNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pparrvaluearrayelementinternalNode3 = (PParRvalueArrayElementInternal)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparrvaluearrayelementNode1 = new AParRvalueArrayElement(tlparNode2, pparrvaluearrayelementinternalNode3, trparNode4);
        }
	nodeList.add(pparrvaluearrayelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAparrvaluearrayelementinternal1ParRvalueArrayElementInternal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParRvalueArrayElementInternal pparrvaluearrayelementinternalNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparrvaluearrayelementinternalNode1 = new AParRvalueArrayElementInternal(listNode2, tnameNode3, listNode5);
        }
	nodeList.add(pparrvaluearrayelementinternalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AAparrvaluearrayelementinternal2ParRvalueArrayElementInternal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParRvalueArrayElementInternal pparrvaluearrayelementinternalNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pparrvaluearrayelementinternalNode1 = new AParRvalueArrayElementInternal(listNode3, tnameNode4, listNode6);
        }
	nodeList.add(pparrvaluearrayelementinternalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AAlvalueintegervariable1LvalueIntegerVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueIntegerVariable plvalueintegervariableNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);

        plvalueintegervariableNode1 = new ALvalueIntegerVariable(listNode2, tnameNode3);
        }
	nodeList.add(plvalueintegervariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AAlvalueintegervariable2LvalueIntegerVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueIntegerVariable plvalueintegervariableNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);

        plvalueintegervariableNode1 = new ALvalueIntegerVariable(listNode3, tnameNode4);
        }
	nodeList.add(plvalueintegervariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AAlvaluearrayelement1LvalueArrayElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueArrayElement plvaluearrayelementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        plvaluearrayelementNode1 = new ALvalueArrayElement(listNode2, tnameNode3, listNode5);
        }
	nodeList.add(plvaluearrayelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AAlvaluearrayelement2LvalueArrayElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueArrayElement plvaluearrayelementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        plvaluearrayelementNode1 = new ALvalueArrayElement(listNode3, tnameNode4, listNode6);
        }
	nodeList.add(plvaluearrayelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AParLvalueArrayElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParLvalueArrayElement pparlvaluearrayelementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TLPar tlparNode4;
        PParLvalueArrayElementInternal pparlvaluearrayelementinternalNode5;
        TRPar trparNode6;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        pparlvaluearrayelementinternalNode5 = (PParLvalueArrayElementInternal)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pparlvaluearrayelementNode1 = new AParLvalueArrayElement(listNode3, tlparNode4, pparlvaluearrayelementinternalNode5, trparNode6);
        }
	nodeList.add(pparlvaluearrayelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AAparlvaluearrayelementinternal1ParLvalueArrayElementInternal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParLvalueArrayElementInternal pparlvaluearrayelementinternalNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparlvaluearrayelementinternalNode1 = new AParLvalueArrayElementInternal(listNode2, tnameNode3, listNode5);
        }
	nodeList.add(pparlvaluearrayelementinternalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AAparlvaluearrayelementinternal2ParLvalueArrayElementInternal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParLvalueArrayElementInternal pparlvaluearrayelementinternalNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pparlvaluearrayelementinternalNode1 = new AParLvalueArrayElementInternal(listNode3, tnameNode4, listNode6);
        }
	nodeList.add(pparlvaluearrayelementinternalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce AAdeclarationvariable1DeclarationVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVariable pdeclarationvariableNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);

        pdeclarationvariableNode1 = new ADeclarationVariable(listNode2, tnameNode3);
        }
	nodeList.add(pdeclarationvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce AAdeclarationvariable2DeclarationVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVariable pdeclarationvariableNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);

        pdeclarationvariableNode1 = new ADeclarationVariable(listNode3, tnameNode4);
        }
	nodeList.add(pdeclarationvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce AArrayBrackets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayBrackets parraybracketsNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpression pexpressionNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        parraybracketsNode1 = new AArrayBrackets(tlbracketNode2, pexpressionNode3, trbracketNode4);
        }
	nodeList.add(parraybracketsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce AAddressOfImplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImplicitInitialisationArray pimplicitinitialisationarrayNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pimplicitinitialisationarrayNode1 = new AAddressOfImplicitInitialisationArray(taddressofNode2, tnameNode3, listNode5);
        }
	nodeList.add(pimplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce AAdereferenceimplicitinitialisationarray1ImplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImplicitInitialisationArray pimplicitinitialisationarrayNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pimplicitinitialisationarrayNode1 = new ADereferenceImplicitInitialisationArray(listNode2, tnameNode3, listNode5);
        }
	nodeList.add(pimplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce AAdereferenceimplicitinitialisationarray2ImplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImplicitInitialisationArray pimplicitinitialisationarrayNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimplicitinitialisationarrayNode1 = new ADereferenceImplicitInitialisationArray(listNode3, tnameNode4, listNode6);
        }
	nodeList.add(pimplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ANestedExplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArray pexplicitinitialisationarrayNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PExplicitInitialisationArrayList pexplicitinitialisationarraylistNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pexplicitinitialisationarraylistNode3 = (PExplicitInitialisationArrayList)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pexplicitinitialisationarrayNode1 = new ANestedExplicitInitialisationArray(tlbraceNode2, pexplicitinitialisationarraylistNode3, trbraceNode4);
        }
	nodeList.add(pexplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce AAnonnestedexplicitinitialisationarray1ExplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArray pexplicitinitialisationarrayNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pexplicitinitialisationarrayNode1 = new ANonNestedExplicitInitialisationArray(tlbraceNode2, null, trbraceNode4);
        }
	nodeList.add(pexplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AAnonnestedexplicitinitialisationarray2ExplicitInitialisationArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArray pexplicitinitialisationarrayNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PArgumentList pargumentlistNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pargumentlistNode3 = (PArgumentList)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pexplicitinitialisationarrayNode1 = new ANonNestedExplicitInitialisationArray(tlbraceNode2, pargumentlistNode3, trbraceNode4);
        }
	nodeList.add(pexplicitinitialisationarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce AAexplicitinitialisationarraylist1ExplicitInitialisationArrayList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArrayList pexplicitinitialisationarraylistNode1;
        {
            // Block
        PExplicitInitialisationArray pexplicitinitialisationarrayNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexplicitinitialisationarrayNode2 = (PExplicitInitialisationArray)nodeArrayList1.get(0);
        {
            // Block
        }

        pexplicitinitialisationarraylistNode1 = new AExplicitInitialisationArrayList(pexplicitinitialisationarrayNode2, listNode3);
        }
	nodeList.add(pexplicitinitialisationarraylistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce AAexplicitinitialisationarraylist2ExplicitInitialisationArrayList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArrayList pexplicitinitialisationarraylistNode1;
        {
            // Block
        PExplicitInitialisationArray pexplicitinitialisationarrayNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplicitinitialisationarrayNode2 = (PExplicitInitialisationArray)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexplicitinitialisationarraylistNode1 = new AExplicitInitialisationArrayList(pexplicitinitialisationarrayNode2, listNode4);
        }
	nodeList.add(pexplicitinitialisationarraylistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce AExplicitInitialisationArrayListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplicitInitialisationArrayListTail pexplicitinitialisationarraylisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExplicitInitialisationArray pexplicitinitialisationarrayNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexplicitinitialisationarrayNode3 = (PExplicitInitialisationArray)nodeArrayList2.get(0);

        pexplicitinitialisationarraylisttailNode1 = new AExplicitInitialisationArrayListTail(tcommaNode2, pexplicitinitialisationarrayNode3);
        }
	nodeList.add(pexplicitinitialisationarraylisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AAargumentlist1ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode3);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce AAargumentlist2ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentListTail pargumentlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pargumentlisttailNode1 = new AArgumentListTail(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pargumentlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PDeclarationVariable pdeclarationvariableNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pdeclarationvariableNode2 = (PDeclarationVariable)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(pdeclarationvariableNode2, listNode3);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PDeclarationVariable pdeclarationvariableNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdeclarationvariableNode2 = (PDeclarationVariable)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparameterlistNode1 = new AParameterList(pdeclarationvariableNode2, listNode4);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce AParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PDeclarationVariable pdeclarationvariableNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdeclarationvariableNode3 = (PDeclarationVariable)nodeArrayList2.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, pdeclarationvariableNode3);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce APlusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        punaryopNode1 = new APlusUnaryOp(tplusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce AMinusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryopNode1 = new AMinusUnaryOp(tminusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AComplementUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TComplement tcomplementNode2;
        tcomplementNode2 = (TComplement)nodeArrayList1.get(0);

        punaryopNode1 = new AComplementUnaryOp(tcomplementNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce AToBoolUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TToBool ttoboolNode2;
        ttoboolNode2 = (TToBool)nodeArrayList1.get(0);

        punaryopNode1 = new AToBoolUnaryOp(ttoboolNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce ANotUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        punaryopNode1 = new ANotUnaryOp(tnotNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce APlusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pbinaryopNode1 = new APlusBinaryOp(tplusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce AAndBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbinaryopNode1 = new AAndBinaryOp(tandNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce AOrBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbinaryopNode1 = new AOrBinaryOp(torNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce AXorBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pbinaryopNode1 = new AXorBinaryOp(txorNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce AMinusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pbinaryopNode1 = new AMinusBinaryOp(tminusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce ALeftShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLeftShift tleftshiftNode2;
        tleftshiftNode2 = (TLeftShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALeftShiftPrioritizedBinaryOp(tleftshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce ARightShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TRightShift trightshiftNode2;
        trightshiftNode2 = (TRightShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ARightShiftPrioritizedBinaryOp(trightshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce AMultiplyPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMultiply tmultiplyNode2;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMultiplyPrioritizedBinaryOp(tmultiplyNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce AEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TEqualTo tequaltoNode2;
        tequaltoNode2 = (TEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AEqualToPrioritizedBinaryOp(tequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce ADividePrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ADividePrioritizedBinaryOp(tdivideNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce AModuloPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TModulo tmoduloNode2;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AModuloPrioritizedBinaryOp(tmoduloNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce ANotEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TNotEqualTo tnotequaltoNode2;
        tnotequaltoNode2 = (TNotEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ANotEqualToPrioritizedBinaryOp(tnotequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce ALessThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessThanPrioritizedBinaryOp(tlessthanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce ALessOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessOrEqual tlessorequalNode2;
        tlessorequalNode2 = (TLessOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessOrEqualPrioritizedBinaryOp(tlessorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce AMoreThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreThan tmorethanNode2;
        tmorethanNode2 = (TMoreThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreThanPrioritizedBinaryOp(tmorethanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce AMoreOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreOrEqual tmoreorequalNode2;
        tmoreorequalNode2 = (TMoreOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreOrEqualPrioritizedBinaryOp(tmoreorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce ATerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGeneralSection pgeneralsectionNode1;
        pgeneralsectionNode1 = (PGeneralSection)nodeArrayList1.get(0);
	if(pgeneralsectionNode1 != null)
	{
	  listNode2.add(pgeneralsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ANonTerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGeneralSection pgeneralsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pgeneralsectionNode2 = (PGeneralSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgeneralsectionNode2 != null)
	{
	  listNode3.add(pgeneralsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce ATerminal$ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseIfBlock pelseifblockNode1;
        pelseifblockNode1 = (PElseIfBlock)nodeArrayList1.get(0);
	if(pelseifblockNode1 != null)
	{
	  listNode2.add(pelseifblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new151() /* reduce ANonTerminal$ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseIfBlock pelseifblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseifblockNode2 = (PElseIfBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseifblockNode2 != null)
	{
	  listNode3.add(pelseifblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new152() /* reduce ATerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBasicSection pbasicsectionNode1;
        pbasicsectionNode1 = (PBasicSection)nodeArrayList1.get(0);
	if(pbasicsectionNode1 != null)
	{
	  listNode2.add(pbasicsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new153() /* reduce ANonTerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBasicSection pbasicsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasicsectionNode2 = (PBasicSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasicsectionNode2 != null)
	{
	  listNode3.add(pbasicsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new154() /* reduce ATerminal$ArrayBrackets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayBrackets parraybracketsNode1;
        parraybracketsNode1 = (PArrayBrackets)nodeArrayList1.get(0);
	if(parraybracketsNode1 != null)
	{
	  listNode2.add(parraybracketsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new155() /* reduce ANonTerminal$ArrayBrackets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayBrackets parraybracketsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraybracketsNode2 = (PArrayBrackets)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraybracketsNode2 != null)
	{
	  listNode3.add(parraybracketsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new156() /* reduce ATerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeadCode pdeadcodeNode1;
        pdeadcodeNode1 = (PDeadCode)nodeArrayList1.get(0);
	if(pdeadcodeNode1 != null)
	{
	  listNode2.add(pdeadcodeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new157() /* reduce ANonTerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeadCode pdeadcodeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeadcodeNode2 = (PDeadCode)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeadcodeNode2 != null)
	{
	  listNode3.add(pdeadcodeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new158() /* reduce ATerminal$Dereference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TDereference tdereferenceNode1;
        tdereferenceNode1 = (TDereference)nodeArrayList1.get(0);
	if(tdereferenceNode1 != null)
	{
	  listNode2.add(tdereferenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new159() /* reduce ANonTerminal$Dereference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TDereference tdereferenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tdereferenceNode2 = (TDereference)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tdereferenceNode2 != null)
	{
	  listNode3.add(tdereferenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new160() /* reduce ATerminal$ExplicitInitialisationArrayListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExplicitInitialisationArrayListTail pexplicitinitialisationarraylisttailNode1;
        pexplicitinitialisationarraylisttailNode1 = (PExplicitInitialisationArrayListTail)nodeArrayList1.get(0);
	if(pexplicitinitialisationarraylisttailNode1 != null)
	{
	  listNode2.add(pexplicitinitialisationarraylisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new161() /* reduce ANonTerminal$ExplicitInitialisationArrayListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExplicitInitialisationArrayListTail pexplicitinitialisationarraylisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexplicitinitialisationarraylisttailNode2 = (PExplicitInitialisationArrayListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexplicitinitialisationarraylisttailNode2 != null)
	{
	  listNode3.add(pexplicitinitialisationarraylisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new162() /* reduce ATerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentListTail pargumentlisttailNode1;
        pargumentlisttailNode1 = (PArgumentListTail)nodeArrayList1.get(0);
	if(pargumentlisttailNode1 != null)
	{
	  listNode2.add(pargumentlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new163() /* reduce ANonTerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentListTail pargumentlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentlisttailNode2 = (PArgumentListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentlisttailNode2 != null)
	{
	  listNode3.add(pargumentlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new164() /* reduce ATerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameterListTail pparameterlisttailNode1;
        pparameterlisttailNode1 = (PParameterListTail)nodeArrayList1.get(0);
	if(pparameterlisttailNode1 != null)
	{
	  listNode2.add(pparameterlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new165() /* reduce ANonTerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameterListTail pparameterlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterlisttailNode2 = (PParameterListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterlisttailNode2 != null)
	{
	  listNode3.add(pparameterlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {15, SHIFT, 5}, },
			{{-1, ERROR, 2}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {9, SHIFT, 11}, {11, SHIFT, 12}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 5}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 6}, {44, SHIFT, 52}, },
			{{-1, ERROR, 7}, {17, SHIFT, 53}, {24, SHIFT, 13}, {44, SHIFT, 54}, },
			{{-1, ERROR, 8}, {44, SHIFT, 59}, },
			{{-1, ERROR, 9}, {44, SHIFT, 60}, },
			{{-1, ERROR, 10}, {15, SHIFT, 61}, },
			{{-1, ERROR, 11}, {15, SHIFT, 62}, },
			{{-1, ERROR, 12}, {15, SHIFT, 63}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 102}, {15, SHIFT, 64}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, {10, SHIFT, 66}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 25}, {14, SHIFT, 70}, },
			{{-1, ERROR, 26}, {14, SHIFT, 71}, },
			{{-1, ERROR, 27}, {14, SHIFT, 72}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {9, SHIFT, 11}, {11, SHIFT, 12}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 29}, {15, SHIFT, 74}, {24, SHIFT, 75}, {44, SHIFT, 76}, },
			{{-1, ERROR, 30}, {15, SHIFT, 77}, },
			{{-1, ERROR, 31}, {15, SHIFT, 78}, },
			{{-1, ERROR, 32}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 33}, {15, SHIFT, 80}, {44, SHIFT, 81}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 97}, {15, SHIFT, 85}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 41}, {16, SHIFT, 87}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 74}, {33, SHIFT, 94}, {34, SHIFT, 95}, {35, SHIFT, 96}, {36, SHIFT, 97}, {37, SHIFT, 98}, {38, SHIFT, 99}, {39, SHIFT, 100}, {40, SHIFT, 101}, {41, SHIFT, 102}, {42, SHIFT, 103}, {43, SHIFT, 104}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 50}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 51}, {15, SHIFT, 80}, {24, SHIFT, 75}, {44, SHIFT, 81}, },
			{{-1, ERROR, 52}, {14, SHIFT, 110}, },
			{{-1, ERROR, 53}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 55}, {14, SHIFT, 112}, {22, SHIFT, 113}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 57}, {17, SHIFT, 53}, {24, SHIFT, 13}, {44, SHIFT, 54}, },
			{{-1, ERROR, 58}, {24, SHIFT, 75}, {44, SHIFT, 116}, },
			{{-1, ERROR, 59}, {15, SHIFT, 117}, },
			{{-1, ERROR, 60}, {15, SHIFT, 118}, },
			{{-1, ERROR, 61}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 62}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 63}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 64}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {16, SHIFT, 122}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 104}, {17, SHIFT, 53}, },
			{{-1, ERROR, 66}, {9, SHIFT, 125}, {19, SHIFT, 126}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, {10, SHIFT, 66}, },
			{{-1, ERROR, 70}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 71}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 72}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 149}, },
			{{-1, ERROR, 74}, {24, SHIFT, 13}, {44, SHIFT, 132}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 103}, {17, SHIFT, 53}, },
			{{-1, ERROR, 77}, {16, SHIFT, 136}, },
			{{-1, ERROR, 78}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 79}, {16, SHIFT, 138}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 80}, {24, SHIFT, 13}, {44, SHIFT, 139}, },
			{{-1, REDUCE, 97}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 85}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {16, SHIFT, 142}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 98}, {17, SHIFT, 53}, },
			{{-1, ERROR, 87}, {22, SHIFT, 144}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 135}, },
			{{-1, ERROR, 93}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, ERROR, 105}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 110}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 111}, {18, SHIFT, 148}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 112}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 114}, {14, SHIFT, 150}, {22, SHIFT, 151}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 117}, {16, SHIFT, 152}, {24, SHIFT, 13}, {44, SHIFT, 54}, },
			{{-1, ERROR, 118}, {16, SHIFT, 155}, {24, SHIFT, 13}, {44, SHIFT, 54}, },
			{{-1, ERROR, 119}, {16, SHIFT, 157}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 120}, {16, SHIFT, 158}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 121}, {16, SHIFT, 159}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 122}, {22, SHIFT, 160}, },
			{{-1, REDUCE, 121}, {21, SHIFT, 161}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 124}, {16, SHIFT, 164}, },
			{{-1, ERROR, 125}, {15, SHIFT, 165}, },
			{{-1, ERROR, 126}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 169}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 129}, {22, SHIFT, 173}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 130}, {22, SHIFT, 174}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 131}, {22, SHIFT, 175}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 132}, {17, SHIFT, 53}, },
			{{-1, ERROR, 133}, {16, SHIFT, 177}, },
			{{-1, ERROR, 134}, {24, SHIFT, 75}, {44, SHIFT, 178}, },
			{{-1, REDUCE, 105}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 137}, {16, SHIFT, 179}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 139}, {17, SHIFT, 53}, },
			{{-1, ERROR, 140}, {16, SHIFT, 181}, },
			{{-1, ERROR, 141}, {24, SHIFT, 75}, {44, SHIFT, 182}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 143}, {16, SHIFT, 183}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 75}, {33, SHIFT, 94}, {34, SHIFT, 95}, {35, SHIFT, 96}, {36, SHIFT, 97}, {37, SHIFT, 98}, {38, SHIFT, 99}, {39, SHIFT, 100}, {40, SHIFT, 101}, {41, SHIFT, 102}, {42, SHIFT, 103}, {43, SHIFT, 104}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 147}, {22, SHIFT, 184}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 149}, {22, SHIFT, 185}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, ERROR, 150}, {19, SHIFT, 186}, {23, SHIFT, 187}, {24, SHIFT, 13}, {44, SHIFT, 188}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 152}, {19, SHIFT, 192}, },
			{{-1, REDUCE, 124}, {21, SHIFT, 193}, },
			{{-1, ERROR, 154}, {16, SHIFT, 196}, },
			{{-1, ERROR, 155}, {19, SHIFT, 197}, },
			{{-1, ERROR, 156}, {16, SHIFT, 198}, },
			{{-1, ERROR, 157}, {22, SHIFT, 199}, },
			{{-1, ERROR, 158}, {19, SHIFT, 200}, },
			{{-1, ERROR, 159}, {19, SHIFT, 201}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 161}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 122}, {21, SHIFT, 161}, },
			{{-1, ERROR, 164}, {22, SHIFT, 204}, },
			{{-1, ERROR, 165}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 166}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {22, SHIFT, 206}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 167}, {22, SHIFT, 208}, },
			{{-1, ERROR, 168}, {22, SHIFT, 209}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 171}, {20, SHIFT, 210}, },
			{{-1, ERROR, 172}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 211}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 107}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 178}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 100}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 182}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 186}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {19, SHIFT, 186}, {20, SHIFT, 216}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 187}, {44, SHIFT, 220}, },
			{{-1, ERROR, 188}, {17, SHIFT, 53}, },
			{{-1, ERROR, 189}, {22, SHIFT, 222}, },
			{{-1, ERROR, 190}, {22, SHIFT, 223}, },
			{{-1, ERROR, 191}, {24, SHIFT, 75}, {44, SHIFT, 224}, },
			{{-1, ERROR, 192}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 225}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 193}, {24, SHIFT, 13}, {44, SHIFT, 54}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 125}, {21, SHIFT, 193}, },
			{{-1, ERROR, 196}, {19, SHIFT, 230}, },
			{{-1, ERROR, 197}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 231}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 198}, {19, SHIFT, 234}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 200}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 235}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 201}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 238}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 123}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 205}, {16, SHIFT, 241}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 61}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 207}, {22, SHIFT, 248}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 63}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 65}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 153}, },
			{{-1, ERROR, 213}, {20, SHIFT, 251}, },
			{{-1, REDUCE, 108}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 101}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 118}, {21, SHIFT, 252}, },
			{{-1, ERROR, 218}, {20, SHIFT, 255}, },
			{{-1, ERROR, 219}, {20, SHIFT, 256}, },
			{{-1, ERROR, 220}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 113}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 224}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 226}, {20, SHIFT, 259}, },
			{{-1, ERROR, 227}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 260}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 165}, },
			{{-1, ERROR, 230}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 262}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 232}, {20, SHIFT, 265}, },
			{{-1, ERROR, 233}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 266}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 234}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 268}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 236}, {20, SHIFT, 271}, },
			{{-1, ERROR, 237}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 272}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 239}, {20, SHIFT, 274}, },
			{{-1, ERROR, 240}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 275}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, ERROR, 241}, {19, SHIFT, 277}, },
			{{-1, ERROR, 242}, {6, SHIFT, 30}, {7, SHIFT, 31}, {15, SHIFT, 32}, {22, SHIFT, 278}, {23, SHIFT, 33}, {24, SHIFT, 13}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {44, SHIFT, 39}, {45, SHIFT, 40}, },
			{{-1, ERROR, 243}, {22, SHIFT, 280}, },
			{{-1, ERROR, 244}, {22, SHIFT, 281}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 62}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 67}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 64}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 66}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 252}, {19, SHIFT, 186}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 119}, {21, SHIFT, 252}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 112}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 114}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 261}, {20, SHIFT, 286}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 263}, {20, SHIFT, 287}, },
			{{-1, ERROR, 264}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 288}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 267}, {20, SHIFT, 290}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 269}, {20, SHIFT, 291}, },
			{{-1, ERROR, 270}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 292}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 273}, {20, SHIFT, 294}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 276}, {20, SHIFT, 295}, },
			{{-1, ERROR, 277}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 296}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 279}, {22, SHIFT, 299}, {25, SHIFT, 88}, {26, SHIFT, 89}, {30, SHIFT, 90}, {31, SHIFT, 91}, {32, SHIFT, 92}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 68}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 242}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 243}, {13, SHIFT, 244}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 289}, {20, SHIFT, 300}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 293}, {20, SHIFT, 301}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 297}, {20, SHIFT, 302}, },
			{{-1, ERROR, 298}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 166}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 167}, {13, SHIFT, 168}, {20, SHIFT, 303}, {24, SHIFT, 13}, {44, SHIFT, 14}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 304}, {20, SHIFT, 305}, },
			{{-1, REDUCE, 52}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, },
			{{-1, 15}, {28, 73}, },
			{{-1, 170}, {3, 16}, {28, 16}, {172, 212}, {206, 245}, {208, 245}, {209, 245}, {227, 212}, {233, 212}, {237, 212}, {240, 212}, {247, 245}, {248, 245}, {249, 245}, {250, 245}, {264, 212}, {270, 212}, {283, 245}, {298, 212}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 67}, {69, 127}, },
			{{-1, 68}, {69, 128}, },
			{{-1, 24}, },
			{{-1, 171}, {172, 213}, {192, 226}, {197, 232}, {200, 236}, {201, 239}, {227, 261}, {230, 263}, {233, 267}, {234, 269}, {237, 273}, {240, 276}, {264, 289}, {270, 293}, {277, 297}, {298, 304}, },
			{{-1, 246}, {247, 282}, {249, 282}, {250, 282}, {283, 282}, },
			{{-1, 123}, {5, 41}, {32, 79}, {53, 111}, {61, 119}, {62, 120}, {63, 121}, {70, 129}, {71, 130}, {72, 131}, {78, 137}, {110, 147}, {112, 149}, {161, 202}, {165, 205}, {166, 207}, {242, 279}, },
			{{-1, 42}, {93, 145}, },
			{{-1, 43}, {50, 106}, {105, 146}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 48}, {33, 82}, {51, 107}, },
			{{-1, 49}, {33, 83}, {51, 108}, },
			{{-1, 84}, {51, 109}, },
			{{-1, 140}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 133}, },
			{{-1, 153}, {7, 55}, {57, 114}, {193, 228}, },
			{{-1, 56}, {57, 115}, {65, 115}, {86, 115}, {135, 115}, {176, 115}, {180, 115}, {214, 115}, {215, 115}, {221, 115}, {257, 115}, {258, 115}, },
			{{-1, 189}, },
			{{-1, 190}, {186, 217}, {252, 284}, },
			{{-1, 218}, },
			{{-1, 253}, {254, 285}, },
			{{-1, 124}, {85, 143}, {186, 219}, },
			{{-1, 162}, {163, 203}, },
			{{-1, 154}, {118, 156}, },
			{{-1, 194}, {195, 229}, },
			{{-1, 50}, },
			{{-1, 93}, },
			{{-1, 105}, },
			{{-1, 28}, },
			{{-1, 69}, },
			{{-1, 172}, {192, 227}, {197, 233}, {200, 237}, {201, 240}, {230, 264}, {234, 270}, {277, 298}, },
			{{-1, 86}, {7, 57}, {14, 65}, {76, 135}, {132, 176}, {139, 180}, {178, 214}, {182, 215}, {188, 221}, {220, 257}, {224, 258}, },
			{{-1, 247}, {208, 249}, {209, 250}, {248, 283}, },
			{{-1, 29}, {5, 51}, {7, 58}, {32, 51}, {50, 51}, {53, 51}, {57, 58}, {61, 51}, {62, 51}, {63, 51}, {64, 51}, {70, 51}, {71, 51}, {72, 51}, {74, 134}, {78, 51}, {80, 141}, {85, 51}, {93, 51}, {105, 51}, {110, 51}, {112, 51}, {117, 58}, {118, 58}, {150, 191}, {161, 51}, {165, 51}, {166, 51}, {186, 51}, {193, 58}, {242, 51}, },
			{{-1, 254}, },
			{{-1, 163}, },
			{{-1, 195}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'set_argc', 'const', 'var', 'void', 'fun', 'out', 'if', 'while', '#', name, EOF",
			"expecting: '('",
			"expecting: EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'if', 'while', '#', name, EOF",
			"expecting: 'argc', 'argv', '(', '@', '#', '+', '-', '~', '?', '!', name, integer",
			"expecting: name",
			"expecting: '[', '#', name",
			"expecting: '(', '#', name",
			"expecting: '=', '(', '['",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'while', 'continue', 'break', '}', '#', name, EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'else', 'while', 'continue', 'break', '}', '#', name, EOF",
			"expecting: '='",
			"expecting: '(', name",
			"expecting: '(', ')', '[', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', '+', '-', '&', '|', '^'",
			"expecting: '=', ')', ',', ';'",
			"expecting: '=', ';'",
			"expecting: '=', ')', '[', ']', '}', ',', ';', '#', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>=', name",
			"expecting: '#', name",
			"expecting: 'argc', 'argv', '(', ')', '@', '#', '+', '-', '~', '?', '!', name, integer",
			"expecting: '=', '['",
			"expecting: 'if', '{'",
			"expecting: ')'",
			"expecting: ')', '[', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ';'",
			"expecting: ']', '+', '-', '&', '|', '^'",
			"expecting: ')', '#', name",
			"expecting: ')', '}', ',', '+', '-', '&', '|', '^'",
			"expecting: 'const', 'var', 'out', 'return', 'if', 'while', 'continue', 'break', '}', '#', name",
			"expecting: ';', '+', '-', '&', '|', '^'",
			"expecting: '['",
			"expecting: '{', '@', '#', name",
			"expecting: '{'",
			"expecting: ')', ','",
			"expecting: ')', '}', ','",
			"expecting: 'argc', 'argv', '(', ';', '@', '#', '+', '-', '~', '?', '!', name, integer",
			"expecting: '}'",
			"expecting: ')', '['",
			"expecting: 'argc', 'argv', '(', '{', '}', '@', '#', '+', '-', '~', '?', '!', name, integer",
			"expecting: '}', ',', ';'",
			"expecting: '}', ','",
			"expecting: '[', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 5, 6, 5, 5, 1, 1, 1, 7, 8, 3, 3, 3, 3, 9, 9, 9, 9, 10, 9, 11, 11, 11, 3, 7, 1, 1, 4, 12, 4, 4, 4, 4, 4, 13, 14, 15, 14, 14, 14, 14, 14, 14, 14, 14, 4, 7, 11, 4, 16, 17, 18, 6, 19, 1, 1, 4, 4, 4, 20, 21, 22, 10, 9, 10, 4, 4, 4, 3, 19, 7, 21, 23, 4, 15, 19, 24, 14, 14, 14, 20, 24, 25, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 14, 14, 14, 14, 4, 26, 4, 9, 17, 18, 16, 27, 27, 15, 15, 15, 25, 28, 23, 1, 29, 10, 9, 30, 30, 30, 31, 23, 19, 21, 14, 15, 14, 31, 23, 19, 14, 23, 3, 14, 14, 30, 18, 30, 32, 9, 33, 34, 23, 33, 23, 25, 33, 33, 9, 4, 35, 35, 25, 4, 36, 25, 25, 9, 29, 37, 29, 9, 9, 9, 38, 11, 31, 14, 38, 14, 31, 14, 9, 9, 39, 5, 31, 25, 25, 19, 29, 19, 34, 34, 33, 29, 33, 9, 29, 29, 28, 35, 9, 15, 29, 30, 29, 29, 9, 9, 29, 37, 38, 38, 40, 41, 37, 37, 31, 42, 9, 9, 31, 3, 37, 29, 34, 34, 29, 3, 37, 29, 29, 10, 37, 29, 9, 37, 29, 33, 36, 25, 25, 29, 29, 29, 29, 29, 29, 9, 33, 41, 41, 40, 40, 42, 42, 3, 3, 37, 3, 37, 29, 3, 3, 37, 3, 37, 29, 10, 10, 37, 9, 9, 37, 29, 29, 30, 29, 29, 29, 29, 41, 41, 3, 3, 3, 37, 3, 3, 3, 37, 10, 9, 10, 37, 29, 29, 3, 3, 10, 10, 37, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
