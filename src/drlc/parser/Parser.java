/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.parser;

import drlc.lexer.*;
import drlc.node.*;
import drlc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PUnit node1 = (PUnit) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAunit1Unit */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAunit2Unit */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMethodDefinitionGeneralSection */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AFunctionDefinitionGeneralSection */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ABasicGeneralSection */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AConstantDefinitionBasicSection */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AVariableDeclarationBasicSection */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AVariableModificationBasicSection */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AMethodCallBasicSection */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AAconditionalbasicsection1BasicSection */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAconditionalbasicsection2BasicSection */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAconditionalbasicsection3BasicSection */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AAconditionalbasicsection4BasicSection */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AIterativeBasicSection */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce AAmethoddefinition1MethodDefinition */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce AAmethoddefinition2MethodDefinition */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce AAmethoddefinition3MethodDefinition */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce AAmethoddefinition4MethodDefinition */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AAmethoddefinition5MethodDefinition */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce AAmethoddefinition6MethodDefinition */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list, false);
            }
            break;
            case 20: /* reduce AAmethoddefinition7MethodDefinition */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list, false);
            }
            break;
            case 21: /* reduce AAmethoddefinition8MethodDefinition */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list, false);
            }
            break;
            case 22: /* reduce AAfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list, false);
            }
            break;
            case 23: /* reduce AAfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new23();
                push(goTo(4), list, false);
            }
            break;
            case 24: /* reduce AAfunctiondefinition3FunctionDefinition */
            {
                ArrayList<Object> list = new24();
                push(goTo(4), list, false);
            }
            break;
            case 25: /* reduce AAfunctiondefinition4FunctionDefinition */
            {
                ArrayList<Object> list = new25();
                push(goTo(4), list, false);
            }
            break;
            case 26: /* reduce AAfunctiondefinition5FunctionDefinition */
            {
                ArrayList<Object> list = new26();
                push(goTo(4), list, false);
            }
            break;
            case 27: /* reduce AAfunctiondefinition6FunctionDefinition */
            {
                ArrayList<Object> list = new27();
                push(goTo(4), list, false);
            }
            break;
            case 28: /* reduce AAfunctiondefinition7FunctionDefinition */
            {
                ArrayList<Object> list = new28();
                push(goTo(4), list, false);
            }
            break;
            case 29: /* reduce AAfunctiondefinition8FunctionDefinition */
            {
                ArrayList<Object> list = new29();
                push(goTo(4), list, false);
            }
            break;
            case 30: /* reduce AConstantDefinition */
            {
                ArrayList<Object> list = new30();
                push(goTo(5), list, false);
            }
            break;
            case 31: /* reduce ANoInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list, false);
            }
            break;
            case 32: /* reduce AWithInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new32();
                push(goTo(6), list, false);
            }
            break;
            case 33: /* reduce AVariableModification */
            {
                ArrayList<Object> list = new33();
                push(goTo(7), list, false);
            }
            break;
            case 34: /* reduce ABuiltInOutMethodCall */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AAdefinedmethodcall1MethodCall */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AAdefinedmethodcall2MethodCall */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce AAifblock1IfBlock */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list, false);
            }
            break;
            case 38: /* reduce AAifblock2IfBlock */
            {
                ArrayList<Object> list = new38();
                push(goTo(9), list, false);
            }
            break;
            case 39: /* reduce AAifblock3IfBlock */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list, false);
            }
            break;
            case 40: /* reduce AAifblock4IfBlock */
            {
                ArrayList<Object> list = new40();
                push(goTo(9), list, false);
            }
            break;
            case 41: /* reduce AAelseifblock1ElseIfBlock */
            {
                ArrayList<Object> list = new41();
                push(goTo(10), list, false);
            }
            break;
            case 42: /* reduce AAelseifblock2ElseIfBlock */
            {
                ArrayList<Object> list = new42();
                push(goTo(10), list, false);
            }
            break;
            case 43: /* reduce AAelseifblock3ElseIfBlock */
            {
                ArrayList<Object> list = new43();
                push(goTo(10), list, false);
            }
            break;
            case 44: /* reduce AAelseifblock4ElseIfBlock */
            {
                ArrayList<Object> list = new44();
                push(goTo(10), list, false);
            }
            break;
            case 45: /* reduce AAelseblock1ElseBlock */
            {
                ArrayList<Object> list = new45();
                push(goTo(11), list, false);
            }
            break;
            case 46: /* reduce AAelseblock2ElseBlock */
            {
                ArrayList<Object> list = new46();
                push(goTo(11), list, false);
            }
            break;
            case 47: /* reduce AAelseblock3ElseBlock */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list, false);
            }
            break;
            case 48: /* reduce AAelseblock4ElseBlock */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list, false);
            }
            break;
            case 49: /* reduce AAiterativeblock1IterativeBlock */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list, false);
            }
            break;
            case 50: /* reduce AAiterativeblock2IterativeBlock */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list, false);
            }
            break;
            case 51: /* reduce AAiterativeblock3IterativeBlock */
            {
                ArrayList<Object> list = new51();
                push(goTo(12), list, false);
            }
            break;
            case 52: /* reduce AAiterativeblock4IterativeBlock */
            {
                ArrayList<Object> list = new52();
                push(goTo(12), list, false);
            }
            break;
            case 53: /* reduce AAreturnstopstatement1StopStatement */
            {
                ArrayList<Object> list = new53();
                push(goTo(13), list, false);
            }
            break;
            case 54: /* reduce AAreturnstopstatement2StopStatement */
            {
                ArrayList<Object> list = new54();
                push(goTo(13), list, false);
            }
            break;
            case 55: /* reduce AAcontinuestopstatement1StopStatement */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list, false);
            }
            break;
            case 56: /* reduce AAcontinuestopstatement2StopStatement */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list, false);
            }
            break;
            case 57: /* reduce AAbreakstopstatement1StopStatement */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list, false);
            }
            break;
            case 58: /* reduce AAbreakstopstatement2StopStatement */
            {
                ArrayList<Object> list = new58();
                push(goTo(13), list, false);
            }
            break;
            case 59: /* reduce AAreturnexpressionstopstatement1StopStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(13), list, false);
            }
            break;
            case 60: /* reduce AAreturnexpressionstopstatement2StopStatement */
            {
                ArrayList<Object> list = new60();
                push(goTo(13), list, false);
            }
            break;
            case 61: /* reduce ADead1DeadCode */
            {
                ArrayList<Object> list = new61();
                push(goTo(14), list, false);
            }
            break;
            case 62: /* reduce ADead2DeadCode */
            {
                ArrayList<Object> list = new62();
                push(goTo(14), list, false);
            }
            break;
            case 63: /* reduce ADead3DeadCode */
            {
                ArrayList<Object> list = new63();
                push(goTo(14), list, false);
            }
            break;
            case 64: /* reduce ADead4DeadCode */
            {
                ArrayList<Object> list = new64();
                push(goTo(14), list, false);
            }
            break;
            case 65: /* reduce ADead5DeadCode */
            {
                ArrayList<Object> list = new65();
                push(goTo(14), list, false);
            }
            break;
            case 66: /* reduce APrioritizedExpression */
            {
                ArrayList<Object> list = new66();
                push(goTo(15), list, false);
            }
            break;
            case 67: /* reduce ABinaryExpression */
            {
                ArrayList<Object> list = new67();
                push(goTo(15), list, false);
            }
            break;
            case 68: /* reduce ATermPrioritizedExpression */
            {
                ArrayList<Object> list = new68();
                push(goTo(16), list, false);
            }
            break;
            case 69: /* reduce ABinaryPrioritizedExpression */
            {
                ArrayList<Object> list = new69();
                push(goTo(16), list, false);
            }
            break;
            case 70: /* reduce AValueTerm */
            {
                ArrayList<Object> list = new70();
                push(goTo(17), list, false);
            }
            break;
            case 71: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new71();
                push(goTo(17), list, false);
            }
            break;
            case 72: /* reduce AParExpressionTerm */
            {
                ArrayList<Object> list = new72();
                push(goTo(17), list, false);
            }
            break;
            case 73: /* reduce AIntegerValue */
            {
                ArrayList<Object> list = new73();
                push(goTo(18), list, false);
            }
            break;
            case 74: /* reduce AVariableValue */
            {
                ArrayList<Object> list = new74();
                push(goTo(18), list, false);
            }
            break;
            case 75: /* reduce AAfunctionvalue1Value */
            {
                ArrayList<Object> list = new75();
                push(goTo(18), list, false);
            }
            break;
            case 76: /* reduce AAfunctionvalue2Value */
            {
                ArrayList<Object> list = new76();
                push(goTo(18), list, false);
            }
            break;
            case 77: /* reduce ADirectVariable */
            {
                ArrayList<Object> list = new77();
                push(goTo(19), list, false);
            }
            break;
            case 78: /* reduce AAddressVariable */
            {
                ArrayList<Object> list = new78();
                push(goTo(19), list, false);
            }
            break;
            case 79: /* reduce ADereferencedVariable */
            {
                ArrayList<Object> list = new79();
                push(goTo(19), list, false);
            }
            break;
            case 80: /* reduce ADirectNonAddressVariable */
            {
                ArrayList<Object> list = new80();
                push(goTo(20), list, false);
            }
            break;
            case 81: /* reduce ADereferencedNonAddressVariable */
            {
                ArrayList<Object> list = new81();
                push(goTo(20), list, false);
            }
            break;
            case 82: /* reduce AAargumentlist1ArgumentList */
            {
                ArrayList<Object> list = new82();
                push(goTo(21), list, false);
            }
            break;
            case 83: /* reduce AAargumentlist2ArgumentList */
            {
                ArrayList<Object> list = new83();
                push(goTo(21), list, false);
            }
            break;
            case 84: /* reduce AArgumentListTail */
            {
                ArrayList<Object> list = new84();
                push(goTo(22), list, false);
            }
            break;
            case 85: /* reduce AAparameterlist1ParameterList */
            {
                ArrayList<Object> list = new85();
                push(goTo(23), list, false);
            }
            break;
            case 86: /* reduce AAparameterlist2ParameterList */
            {
                ArrayList<Object> list = new86();
                push(goTo(23), list, false);
            }
            break;
            case 87: /* reduce AParameterListTail */
            {
                ArrayList<Object> list = new87();
                push(goTo(24), list, false);
            }
            break;
            case 88: /* reduce APlusUnaryOp */
            {
                ArrayList<Object> list = new88();
                push(goTo(25), list, false);
            }
            break;
            case 89: /* reduce AMinusUnaryOp */
            {
                ArrayList<Object> list = new89();
                push(goTo(25), list, false);
            }
            break;
            case 90: /* reduce AComplementUnaryOp */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list, false);
            }
            break;
            case 91: /* reduce AToBoolUnaryOp */
            {
                ArrayList<Object> list = new91();
                push(goTo(25), list, false);
            }
            break;
            case 92: /* reduce ANotUnaryOp */
            {
                ArrayList<Object> list = new92();
                push(goTo(25), list, false);
            }
            break;
            case 93: /* reduce APlusBinaryOp */
            {
                ArrayList<Object> list = new93();
                push(goTo(26), list, false);
            }
            break;
            case 94: /* reduce AAndBinaryOp */
            {
                ArrayList<Object> list = new94();
                push(goTo(26), list, false);
            }
            break;
            case 95: /* reduce AOrBinaryOp */
            {
                ArrayList<Object> list = new95();
                push(goTo(26), list, false);
            }
            break;
            case 96: /* reduce AXorBinaryOp */
            {
                ArrayList<Object> list = new96();
                push(goTo(26), list, false);
            }
            break;
            case 97: /* reduce AMinusBinaryOp */
            {
                ArrayList<Object> list = new97();
                push(goTo(26), list, false);
            }
            break;
            case 98: /* reduce ALeftShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new98();
                push(goTo(27), list, false);
            }
            break;
            case 99: /* reduce ARightShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new99();
                push(goTo(27), list, false);
            }
            break;
            case 100: /* reduce AMultiplyPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new100();
                push(goTo(27), list, false);
            }
            break;
            case 101: /* reduce AEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new101();
                push(goTo(27), list, false);
            }
            break;
            case 102: /* reduce ADividePrioritizedBinaryOp */
            {
                ArrayList<Object> list = new102();
                push(goTo(27), list, false);
            }
            break;
            case 103: /* reduce AModuloPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new103();
                push(goTo(27), list, false);
            }
            break;
            case 104: /* reduce ANotEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new104();
                push(goTo(27), list, false);
            }
            break;
            case 105: /* reduce ALessThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new105();
                push(goTo(27), list, false);
            }
            break;
            case 106: /* reduce ALessOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new106();
                push(goTo(27), list, false);
            }
            break;
            case 107: /* reduce AMoreThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new107();
                push(goTo(27), list, false);
            }
            break;
            case 108: /* reduce AMoreOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new108();
                push(goTo(27), list, false);
            }
            break;
            case 109: /* reduce ATerminal$GeneralSection */
            {
                ArrayList<Object> list = new109();
                push(goTo(28), list, true);
            }
            break;
            case 110: /* reduce ANonTerminal$GeneralSection */
            {
                ArrayList<Object> list = new110();
                push(goTo(28), list, true);
            }
            break;
            case 111: /* reduce ATerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new111();
                push(goTo(29), list, true);
            }
            break;
            case 112: /* reduce ANonTerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new112();
                push(goTo(29), list, true);
            }
            break;
            case 113: /* reduce ATerminal$BasicSection */
            {
                ArrayList<Object> list = new113();
                push(goTo(30), list, true);
            }
            break;
            case 114: /* reduce ANonTerminal$BasicSection */
            {
                ArrayList<Object> list = new114();
                push(goTo(30), list, true);
            }
            break;
            case 115: /* reduce ATerminal$DeadCode */
            {
                ArrayList<Object> list = new115();
                push(goTo(31), list, true);
            }
            break;
            case 116: /* reduce ANonTerminal$DeadCode */
            {
                ArrayList<Object> list = new116();
                push(goTo(31), list, true);
            }
            break;
            case 117: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new117();
                push(goTo(32), list, true);
            }
            break;
            case 118: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new118();
                push(goTo(32), list, true);
            }
            break;
            case 119: /* reduce ATerminal$ParameterListTail */
            {
                ArrayList<Object> list = new119();
                push(goTo(33), list, true);
            }
            break;
            case 120: /* reduce ANonTerminal$ParameterListTail */
            {
                ArrayList<Object> list = new120();
                push(goTo(33), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAunit1Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PUnit punitNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        punitNode1 = new AUnit(listNode2);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAunit2Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        punitNode1 = new AUnit(listNode3);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMethodDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PMethodDefinition pmethoddefinitionNode2;
        pmethoddefinitionNode2 = (PMethodDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AMethodDefinitionGeneralSection(pmethoddefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFunctionDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AFunctionDefinitionGeneralSection(pfunctiondefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABasicGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new ABasicGeneralSection(pbasicsectionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AConstantDefinitionBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PConstantDefinition pconstantdefinitionNode2;
        pconstantdefinitionNode2 = (PConstantDefinition)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AConstantDefinitionBasicSection(pconstantdefinitionNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVariableDeclarationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableDeclarationBasicSection(pvariabledeclarationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVariableModificationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableModification pvariablemodificationNode2;
        pvariablemodificationNode2 = (PVariableModification)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableModificationBasicSection(pvariablemodificationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMethodCallBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AMethodCallBasicSection(pmethodcallNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAconditionalbasicsection1BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAconditionalbasicsection2BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAconditionalbasicsection3BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PElseBlock pelseblockNode4;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }
        pelseblockNode4 = (PElseBlock)nodeArrayList2.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, pelseblockNode4);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAconditionalbasicsection4BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PElseBlock pelseblockNode5;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pelseblockNode5 = (PElseBlock)nodeArrayList3.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, pelseblockNode5);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIterativeBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIterativeBlock piterativeblockNode2;
        piterativeblockNode2 = (PIterativeBlock)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AIterativeBasicSection(piterativeblockNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAmethoddefinition1MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAmethoddefinition2MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAmethoddefinition3MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethoddefinition4MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethoddefinition5MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethoddefinition6MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddefinition7MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddefinition8MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAfunctiondefinition3FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAfunctiondefinition4FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAfunctiondefinition5FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAfunctiondefinition6FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAfunctiondefinition7FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAfunctiondefinition8FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AConstantDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstantDefinition pconstantdefinitionNode1;
        {
            // Block
        TConst tconstNode2;
        TName tnameNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pconstantdefinitionNode1 = new AConstantDefinition(tconstNode2, tnameNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pconstantdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANoInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        TName tnameNode3;
        TSemicolon tsemicolonNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvariabledeclarationNode1 = new ANoInitialisationVariableDeclaration(tvarNode2, tnameNode3, tsemicolonNode4);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AWithInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        TName tnameNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvariabledeclarationNode1 = new AWithInitialisationVariableDeclaration(tvarNode2, tnameNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVariableModification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableModification pvariablemodificationNode1;
        {
            // Block
        TName tnameNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pvariablemodificationNode1 = new AVariableModification(tnameNode2, tequalsNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pvariablemodificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABuiltInOutMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TOut toutNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        toutNode2 = (TOut)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ABuiltInOutMethodCall(toutNode2, tlparNode3, pexpressionNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAdefinedmethodcall1MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, null, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAdefinedmethodcall2MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAifblock1IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAifblock2IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAifblock3IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAifblock4IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAelseifblock1ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAelseifblock2ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAelseifblock3ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAelseifblock4ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfBlock pelseifblockNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pelseifblockNode1 = new AElseIfBlock(telseNode2, tifNode3, tlparNode4, pexpressionNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pelseifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAelseblock1ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, null, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAelseblock2ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, null, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAelseblock3ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAelseblock4ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAiterativeblock1IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAiterativeblock2IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAiterativeblock3IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAiterativeblock4IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAreturnstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAreturnstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAcontinuestopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAcontinuestopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAbreakstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAbreakstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAreturnexpressionstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAreturnexpressionstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ADead1DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pdeadcodeNode1 = new ADead1DeadCode(pbasicsectionNode2);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ADead2DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead2DeadCode(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ADead3DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead3DeadCode(tcontinueNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ADead4DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead4DeadCode(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADead5DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeadcodeNode1 = new ADead5DeadCode(treturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce APrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new APrioritizedExpression(pprioritizedexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ABinaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PBinaryOp pbinaryopNode3;
        PPrioritizedExpression pprioritizedexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pbinaryopNode3 = (PBinaryOp)nodeArrayList2.get(0);
        pprioritizedexpressionNode4 = (PPrioritizedExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ABinaryExpression(pexpressionNode2, pbinaryopNode3, pprioritizedexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATermPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pprioritizedexpressionNode1 = new ATermPrioritizedExpression(ptermNode2);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ABinaryPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        PPrioritizedBinaryOp pprioritizedbinaryopNode3;
        PTerm ptermNode4;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);
        pprioritizedbinaryopNode3 = (PPrioritizedBinaryOp)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pprioritizedexpressionNode1 = new ABinaryPrioritizedExpression(pprioritizedexpressionNode2, pprioritizedbinaryopNode3, ptermNode4);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AValueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ptermNode1 = new AValueTerm(pvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PUnaryOp punaryopNode2;
        PTerm ptermNode3;
        punaryopNode2 = (PUnaryOp)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(punaryopNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AParExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParExpressionTerm(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIntegerValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pvalueNode1 = new AIntegerValue(tintegerNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AVariableValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pvalueNode1 = new AVariableValue(tnameNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAfunctionvalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pvalueNode1 = new AFunctionValue(tnameNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAfunctionvalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pvalueNode1 = new AFunctionValue(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ADirectVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pvariableNode1 = new ADirectVariable(tnameNode2);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAddressVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        PNonAddressVariable pnonaddressvariableNode3;
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        pnonaddressvariableNode3 = (PNonAddressVariable)nodeArrayList2.get(0);

        pvariableNode1 = new AAddressVariable(taddressofNode2, pnonaddressvariableNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ADereferencedVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TDereference tdereferenceNode2;
        PVariable pvariableNode3;
        tdereferenceNode2 = (TDereference)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);

        pvariableNode1 = new ADereferencedVariable(tdereferenceNode2, pvariableNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ADirectNonAddressVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNonAddressVariable pnonaddressvariableNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pnonaddressvariableNode1 = new ADirectNonAddressVariable(tnameNode2);
        }
	nodeList.add(pnonaddressvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ADereferencedNonAddressVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNonAddressVariable pnonaddressvariableNode1;
        {
            // Block
        TDereference tdereferenceNode2;
        PVariable pvariableNode3;
        tdereferenceNode2 = (TDereference)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);

        pnonaddressvariableNode1 = new ADereferencedNonAddressVariable(tdereferenceNode2, pvariableNode3);
        }
	nodeList.add(pnonaddressvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAargumentlist1ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode3);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAargumentlist2ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentListTail pargumentlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pargumentlisttailNode1 = new AArgumentListTail(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pargumentlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(tnameNode2, listNode3);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparameterlistNode1 = new AParameterList(tnameNode2, listNode4);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        TName tnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, tnameNode3);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce APlusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        punaryopNode1 = new APlusUnaryOp(tplusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AMinusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryopNode1 = new AMinusUnaryOp(tminusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AComplementUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TComplement tcomplementNode2;
        tcomplementNode2 = (TComplement)nodeArrayList1.get(0);

        punaryopNode1 = new AComplementUnaryOp(tcomplementNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AToBoolUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TToBool ttoboolNode2;
        ttoboolNode2 = (TToBool)nodeArrayList1.get(0);

        punaryopNode1 = new AToBoolUnaryOp(ttoboolNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANotUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        punaryopNode1 = new ANotUnaryOp(tnotNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce APlusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pbinaryopNode1 = new APlusBinaryOp(tplusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAndBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbinaryopNode1 = new AAndBinaryOp(tandNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AOrBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbinaryopNode1 = new AOrBinaryOp(torNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AXorBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pbinaryopNode1 = new AXorBinaryOp(txorNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AMinusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pbinaryopNode1 = new AMinusBinaryOp(tminusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ALeftShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLeftShift tleftshiftNode2;
        tleftshiftNode2 = (TLeftShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALeftShiftPrioritizedBinaryOp(tleftshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ARightShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TRightShift trightshiftNode2;
        trightshiftNode2 = (TRightShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ARightShiftPrioritizedBinaryOp(trightshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AMultiplyPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMultiply tmultiplyNode2;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMultiplyPrioritizedBinaryOp(tmultiplyNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TEqualTo tequaltoNode2;
        tequaltoNode2 = (TEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AEqualToPrioritizedBinaryOp(tequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ADividePrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ADividePrioritizedBinaryOp(tdivideNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AModuloPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TModulo tmoduloNode2;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AModuloPrioritizedBinaryOp(tmoduloNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANotEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TNotEqualTo tnotequaltoNode2;
        tnotequaltoNode2 = (TNotEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ANotEqualToPrioritizedBinaryOp(tnotequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ALessThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessThanPrioritizedBinaryOp(tlessthanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ALessOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessOrEqual tlessorequalNode2;
        tlessorequalNode2 = (TLessOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessOrEqualPrioritizedBinaryOp(tlessorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AMoreThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreThan tmorethanNode2;
        tmorethanNode2 = (TMoreThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreThanPrioritizedBinaryOp(tmorethanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AMoreOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreOrEqual tmoreorequalNode2;
        tmoreorequalNode2 = (TMoreOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreOrEqualPrioritizedBinaryOp(tmoreorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGeneralSection pgeneralsectionNode1;
        pgeneralsectionNode1 = (PGeneralSection)nodeArrayList1.get(0);
	if(pgeneralsectionNode1 != null)
	{
	  listNode2.add(pgeneralsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGeneralSection pgeneralsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pgeneralsectionNode2 = (PGeneralSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgeneralsectionNode2 != null)
	{
	  listNode3.add(pgeneralsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseIfBlock pelseifblockNode1;
        pelseifblockNode1 = (PElseIfBlock)nodeArrayList1.get(0);
	if(pelseifblockNode1 != null)
	{
	  listNode2.add(pelseifblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$ElseIfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseIfBlock pelseifblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseifblockNode2 = (PElseIfBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseifblockNode2 != null)
	{
	  listNode3.add(pelseifblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBasicSection pbasicsectionNode1;
        pbasicsectionNode1 = (PBasicSection)nodeArrayList1.get(0);
	if(pbasicsectionNode1 != null)
	{
	  listNode2.add(pbasicsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBasicSection pbasicsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasicsectionNode2 = (PBasicSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasicsectionNode2 != null)
	{
	  listNode3.add(pbasicsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeadCode pdeadcodeNode1;
        pdeadcodeNode1 = (PDeadCode)nodeArrayList1.get(0);
	if(pdeadcodeNode1 != null)
	{
	  listNode2.add(pdeadcodeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeadCode pdeadcodeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeadcodeNode2 = (PDeadCode)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeadcodeNode2 != null)
	{
	  listNode3.add(pdeadcodeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ATerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentListTail pargumentlisttailNode1;
        pargumentlisttailNode1 = (PArgumentListTail)nodeArrayList1.get(0);
	if(pargumentlisttailNode1 != null)
	{
	  listNode2.add(pargumentlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ANonTerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentListTail pargumentlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentlisttailNode2 = (PArgumentListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentlisttailNode2 != null)
	{
	  listNode3.add(pargumentlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ATerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameterListTail pparameterlisttailNode1;
        pparameterlisttailNode1 = (PParameterListTail)nodeArrayList1.get(0);
	if(pparameterlisttailNode1 != null)
	{
	  listNode2.add(pparameterlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ANonTerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameterListTail pparameterlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterlisttailNode2 = (PParameterListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterlisttailNode2 != null)
	{
	  listNode3.add(pparameterlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {6, SHIFT, 6}, {8, SHIFT, 7}, {37, SHIFT, 8}, },
			{{-1, ERROR, 1}, {37, SHIFT, 21}, },
			{{-1, ERROR, 2}, {37, SHIFT, 22}, },
			{{-1, ERROR, 3}, {37, SHIFT, 23}, },
			{{-1, ERROR, 4}, {37, SHIFT, 24}, },
			{{-1, ERROR, 5}, {12, SHIFT, 25}, },
			{{-1, ERROR, 6}, {12, SHIFT, 26}, },
			{{-1, ERROR, 7}, {12, SHIFT, 27}, },
			{{-1, ERROR, 8}, {11, SHIFT, 28}, {12, SHIFT, 29}, },
			{{-1, ERROR, 9}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, {7, SHIFT, 30}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {6, SHIFT, 6}, {8, SHIFT, 7}, {37, SHIFT, 8}, },
			{{-1, ERROR, 21}, {11, SHIFT, 35}, },
			{{-1, ERROR, 22}, {11, SHIFT, 36}, {17, SHIFT, 37}, },
			{{-1, ERROR, 23}, {12, SHIFT, 38}, },
			{{-1, ERROR, 24}, {12, SHIFT, 39}, },
			{{-1, ERROR, 25}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 26}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 27}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 28}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 29}, {12, SHIFT, 40}, {13, SHIFT, 56}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 30}, {6, SHIFT, 59}, {14, SHIFT, 60}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 30}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 35}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 36}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 38}, {13, SHIFT, 65}, {37, SHIFT, 66}, },
			{{-1, ERROR, 39}, {13, SHIFT, 68}, {37, SHIFT, 66}, },
			{{-1, ERROR, 40}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 74}, {12, SHIFT, 71}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 48}, {13, SHIFT, 72}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 66}, {26, SHIFT, 79}, {27, SHIFT, 80}, {28, SHIFT, 81}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, {33, SHIFT, 86}, {34, SHIFT, 87}, {35, SHIFT, 88}, {36, SHIFT, 89}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 52}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 53}, {13, SHIFT, 92}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 54}, {13, SHIFT, 93}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 55}, {17, SHIFT, 94}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 56}, {17, SHIFT, 95}, },
			{{-1, REDUCE, 82}, {16, SHIFT, 96}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 58}, {13, SHIFT, 99}, },
			{{-1, ERROR, 59}, {12, SHIFT, 100}, },
			{{-1, ERROR, 60}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 104}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 63}, {17, SHIFT, 108}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 64}, {17, SHIFT, 109}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 65}, {14, SHIFT, 110}, },
			{{-1, REDUCE, 85}, {16, SHIFT, 111}, },
			{{-1, ERROR, 67}, {13, SHIFT, 114}, },
			{{-1, ERROR, 68}, {14, SHIFT, 115}, },
			{{-1, ERROR, 69}, {13, SHIFT, 116}, },
			{{-1, ERROR, 70}, {13, SHIFT, 117}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, ERROR, 71}, {12, SHIFT, 40}, {13, SHIFT, 118}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 72}, {17, SHIFT, 120}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 78}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 90}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 92}, {14, SHIFT, 123}, },
			{{-1, ERROR, 93}, {14, SHIFT, 124}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 96}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 83}, {16, SHIFT, 96}, },
			{{-1, ERROR, 99}, {17, SHIFT, 127}, },
			{{-1, ERROR, 100}, {12, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 101}, {12, SHIFT, 40}, {17, SHIFT, 129}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 102}, {17, SHIFT, 131}, },
			{{-1, ERROR, 103}, {17, SHIFT, 132}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 106}, {15, SHIFT, 133}, },
			{{-1, ERROR, 107}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 134}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 110}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 137}, {37, SHIFT, 8}, },
			{{-1, ERROR, 111}, {37, SHIFT, 140}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 86}, {16, SHIFT, 111}, },
			{{-1, ERROR, 114}, {14, SHIFT, 142}, },
			{{-1, ERROR, 115}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 143}, {37, SHIFT, 8}, },
			{{-1, ERROR, 116}, {14, SHIFT, 146}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 119}, {13, SHIFT, 147}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 67}, {26, SHIFT, 79}, {27, SHIFT, 80}, {28, SHIFT, 81}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, {33, SHIFT, 86}, {34, SHIFT, 87}, {35, SHIFT, 88}, {36, SHIFT, 89}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 123}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 148}, {37, SHIFT, 8}, },
			{{-1, ERROR, 124}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 151}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 84}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 128}, {13, SHIFT, 154}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 53}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, ERROR, 130}, {17, SHIFT, 161}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 57}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 136}, {15, SHIFT, 164}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 138}, {15, SHIFT, 165}, },
			{{-1, ERROR, 139}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 166}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 142}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 168}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 144}, {15, SHIFT, 171}, },
			{{-1, ERROR, 145}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 172}, {37, SHIFT, 8}, },
			{{-1, ERROR, 146}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 174}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 149}, {15, SHIFT, 177}, },
			{{-1, ERROR, 150}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 178}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 152}, {15, SHIFT, 180}, },
			{{-1, ERROR, 153}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 181}, {37, SHIFT, 8}, },
			{{-1, ERROR, 154}, {14, SHIFT, 183}, },
			{{-1, ERROR, 155}, {12, SHIFT, 40}, {17, SHIFT, 184}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {21, SHIFT, 44}, {22, SHIFT, 45}, {37, SHIFT, 46}, {38, SHIFT, 47}, },
			{{-1, ERROR, 156}, {17, SHIFT, 186}, },
			{{-1, ERROR, 157}, {17, SHIFT, 187}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 54}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 59}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 56}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 58}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 167}, {15, SHIFT, 190}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 169}, {15, SHIFT, 191}, },
			{{-1, ERROR, 170}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 192}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 173}, {15, SHIFT, 194}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 175}, {15, SHIFT, 195}, },
			{{-1, ERROR, 176}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 196}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 179}, {15, SHIFT, 198}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 182}, {15, SHIFT, 199}, },
			{{-1, ERROR, 183}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 200}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 185}, {17, SHIFT, 203}, {18, SHIFT, 73}, {19, SHIFT, 74}, {23, SHIFT, 75}, {24, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 60}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 155}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 156}, {10, SHIFT, 157}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 193}, {15, SHIFT, 204}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 197}, {15, SHIFT, 205}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 201}, {15, SHIFT, 206}, },
			{{-1, ERROR, 202}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 5}, {5, SHIFT, 101}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 102}, {10, SHIFT, 103}, {15, SHIFT, 207}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 208}, {15, SHIFT, 209}, },
			{{-1, REDUCE, 44}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {20, 34}, },
			{{-1, 105}, {0, 11}, {20, 11}, {107, 135}, {129, 158}, {131, 158}, {132, 158}, {139, 135}, {145, 135}, {150, 135}, {153, 135}, {160, 158}, {161, 158}, {162, 158}, {163, 158}, {170, 135}, {176, 135}, {189, 158}, {202, 135}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 31}, {33, 61}, },
			{{-1, 32}, {33, 62}, },
			{{-1, 19}, },
			{{-1, 106}, {107, 136}, {110, 138}, {115, 144}, {123, 149}, {124, 152}, {139, 167}, {142, 169}, {145, 173}, {146, 175}, {150, 179}, {153, 182}, {170, 193}, {176, 197}, {183, 201}, {202, 208}, },
			{{-1, 159}, {160, 188}, {162, 188}, {163, 188}, {189, 188}, },
			{{-1, 57}, {25, 48}, {26, 53}, {27, 54}, {28, 55}, {35, 63}, {36, 64}, {40, 70}, {96, 125}, {100, 128}, {101, 130}, {155, 185}, },
			{{-1, 49}, {78, 121}, },
			{{-1, 50}, {52, 91}, {90, 122}, },
			{{-1, 51}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 58}, {71, 119}, },
			{{-1, 97}, {98, 126}, },
			{{-1, 67}, {39, 69}, },
			{{-1, 112}, {113, 141}, },
			{{-1, 52}, },
			{{-1, 78}, },
			{{-1, 90}, },
			{{-1, 20}, },
			{{-1, 33}, },
			{{-1, 107}, {110, 139}, {115, 145}, {123, 150}, {124, 153}, {142, 170}, {146, 176}, {183, 202}, },
			{{-1, 160}, {131, 162}, {132, 163}, {161, 189}, },
			{{-1, 98}, },
			{{-1, 113}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'if', 'while', name, EOF",
			"expecting: name",
			"expecting: '('",
			"expecting: '=', '('",
			"expecting: EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'while', 'continue', 'break', '}', name, EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'else', 'while', 'continue', 'break', '}', name, EOF",
			"expecting: '='",
			"expecting: '=', ';'",
			"expecting: '(', '+', '-', '~', '?', '!', name, integer",
			"expecting: '(', ')', '+', '-', '~', '?', '!', name, integer",
			"expecting: 'if', '{'",
			"expecting: ')', name",
			"expecting: '(', ')', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', '+', '-', '&', '|', '^'",
			"expecting: ';', '+', '-', '&', '|', '^'",
			"expecting: ';'",
			"expecting: ')', ',', '+', '-', '&', '|', '^'",
			"expecting: ')'",
			"expecting: 'const', 'var', 'out', 'return', 'if', 'while', 'continue', 'break', '}', name",
			"expecting: '{'",
			"expecting: ')', ','",
			"expecting: '(', ';', '+', '-', '~', '?', '!', name, integer",
			"expecting: '}'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 0, 0, 0, 0, 5, 5, 5, 5, 6, 5, 0, 7, 8, 2, 2, 9, 9, 9, 9, 10, 11, 6, 5, 6, 0, 9, 9, 5, 12, 12, 9, 9, 9, 9, 9, 9, 13, 14, 15, 14, 14, 14, 9, 15, 15, 16, 17, 18, 19, 2, 20, 6, 5, 16, 16, 21, 22, 19, 21, 19, 15, 10, 17, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 21, 21, 5, 5, 9, 22, 22, 17, 9, 23, 17, 17, 5, 20, 24, 20, 5, 5, 20, 1, 22, 22, 21, 20, 21, 14, 14, 19, 5, 14, 14, 20, 20, 18, 22, 5, 15, 20, 16, 20, 20, 5, 5, 20, 24, 0, 24, 20, 22, 22, 20, 0, 24, 20, 20, 14, 6, 24, 20, 5, 24, 20, 21, 23, 17, 17, 20, 20, 20, 20, 20, 20, 5, 0, 0, 24, 0, 24, 20, 0, 0, 24, 0, 24, 20, 6, 6, 24, 5, 5, 24, 20, 20, 16, 20, 20, 20, 20, 0, 0, 0, 24, 0, 0, 0, 24, 6, 5, 6, 24, 20, 20, 0, 0, 6, 6, 24, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
