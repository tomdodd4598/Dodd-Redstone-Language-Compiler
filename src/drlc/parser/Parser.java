/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.parser;

import drlc.lexer.*;
import drlc.node.*;
import drlc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PUnit node1 = (PUnit) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAunit1Unit */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAunit2Unit */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAsetupsection1SetupSection */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAsetupsection2SetupSection */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AInputSpecification */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AMethodDefinitionGeneralSection */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AFunctionDefinitionGeneralSection */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ABasicGeneralSection */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AConstantDefinitionBasicSection */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariableDeclarationBasicSection */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AVariableModificationBasicSection */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AMethodCallBasicSection */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AAconditionalbasicsection1BasicSection */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce AAconditionalbasicsection2BasicSection */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAconditionalbasicsection3BasicSection */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce AAconditionalbasicsection4BasicSection */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AIterativeBasicSection */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AAmethoddefinition1MethodDefinition */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AAmethoddefinition2MethodDefinition */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AAmethoddefinition3MethodDefinition */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AAmethoddefinition4MethodDefinition */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce AAmethoddefinition5MethodDefinition */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AAmethoddefinition6MethodDefinition */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AAmethoddefinition7MethodDefinition */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AAmethoddefinition8MethodDefinition */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce AAfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce AAfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AAfunctiondefinition3FunctionDefinition */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce AAfunctiondefinition4FunctionDefinition */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AAfunctiondefinition5FunctionDefinition */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce AAfunctiondefinition6FunctionDefinition */
            {
                ArrayList<Object> list = new30();
                push(goTo(6), list, false);
            }
            break;
            case 31: /* reduce AAfunctiondefinition7FunctionDefinition */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list, false);
            }
            break;
            case 32: /* reduce AAfunctiondefinition8FunctionDefinition */
            {
                ArrayList<Object> list = new32();
                push(goTo(6), list, false);
            }
            break;
            case 33: /* reduce AConstantDefinition */
            {
                ArrayList<Object> list = new33();
                push(goTo(7), list, false);
            }
            break;
            case 34: /* reduce ANoInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AWithInitialisationVariableDeclaration */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AVariableModification */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list, false);
            }
            break;
            case 37: /* reduce ABuiltInOutMethodCall */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list, false);
            }
            break;
            case 38: /* reduce AAdefinedmethodcall1MethodCall */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list, false);
            }
            break;
            case 39: /* reduce AAdefinedmethodcall2MethodCall */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list, false);
            }
            break;
            case 40: /* reduce AAifblock1IfBlock */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list, false);
            }
            break;
            case 41: /* reduce AAifblock2IfBlock */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list, false);
            }
            break;
            case 42: /* reduce AAifblock3IfBlock */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list, false);
            }
            break;
            case 43: /* reduce AAifblock4IfBlock */
            {
                ArrayList<Object> list = new43();
                push(goTo(11), list, false);
            }
            break;
            case 44: /* reduce AAelseifblock1ElseIfBlock */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list, false);
            }
            break;
            case 45: /* reduce AAelseifblock2ElseIfBlock */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list, false);
            }
            break;
            case 46: /* reduce AAelseifblock3ElseIfBlock */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list, false);
            }
            break;
            case 47: /* reduce AAelseifblock4ElseIfBlock */
            {
                ArrayList<Object> list = new47();
                push(goTo(12), list, false);
            }
            break;
            case 48: /* reduce AAelseblock1ElseBlock */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
<<<<<<< HEAD
            case 49: /* reduce AAelifblock1ElifBlock */
=======
            case 49: /* reduce AAelseblock2ElseBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list, false);
            }
            break;
<<<<<<< HEAD
            case 50: /* reduce AAelifblock2ElifBlock */
=======
            case 50: /* reduce AAelseblock3ElseBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list, false);
            }
            break;
<<<<<<< HEAD
            case 51: /* reduce AAelifblock3ElifBlock */
=======
            case 51: /* reduce AAelseblock4ElseBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list, false);
            }
            break;
<<<<<<< HEAD
            case 52: /* reduce AAelifblock4ElifBlock */
=======
            case 52: /* reduce AAiterativeblock1IterativeBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list, false);
            }
            break;
            case 53: /* reduce AAiterativeblock2IterativeBlock */
            {
                ArrayList<Object> list = new53();
                push(goTo(14), list, false);
            }
            break;
            case 54: /* reduce AAiterativeblock3IterativeBlock */
            {
                ArrayList<Object> list = new54();
                push(goTo(14), list, false);
            }
            break;
            case 55: /* reduce AAiterativeblock4IterativeBlock */
            {
                ArrayList<Object> list = new55();
                push(goTo(14), list, false);
            }
            break;
            case 56: /* reduce AAreturnstopstatement1StopStatement */
            {
                ArrayList<Object> list = new56();
                push(goTo(15), list, false);
            }
            break;
            case 57: /* reduce AAreturnstopstatement2StopStatement */
            {
                ArrayList<Object> list = new57();
                push(goTo(15), list, false);
            }
            break;
            case 58: /* reduce AAcontinuestopstatement1StopStatement */
            {
                ArrayList<Object> list = new58();
                push(goTo(15), list, false);
            }
            break;
            case 59: /* reduce AAcontinuestopstatement2StopStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(15), list, false);
            }
            break;
            case 60: /* reduce AAbreakstopstatement1StopStatement */
            {
                ArrayList<Object> list = new60();
                push(goTo(15), list, false);
            }
            break;
            case 61: /* reduce AAbreakstopstatement2StopStatement */
            {
                ArrayList<Object> list = new61();
                push(goTo(15), list, false);
            }
            break;
            case 62: /* reduce AAreturnexpressionstopstatement1StopStatement */
            {
                ArrayList<Object> list = new62();
                push(goTo(15), list, false);
            }
            break;
            case 63: /* reduce AAreturnexpressionstopstatement2StopStatement */
            {
                ArrayList<Object> list = new63();
                push(goTo(15), list, false);
            }
            break;
            case 64: /* reduce ADead1DeadCode */
            {
                ArrayList<Object> list = new64();
                push(goTo(16), list, false);
            }
            break;
            case 65: /* reduce ADead2DeadCode */
            {
                ArrayList<Object> list = new65();
                push(goTo(16), list, false);
            }
            break;
            case 66: /* reduce ADead3DeadCode */
            {
                ArrayList<Object> list = new66();
                push(goTo(16), list, false);
            }
            break;
            case 67: /* reduce ADead4DeadCode */
            {
                ArrayList<Object> list = new67();
                push(goTo(16), list, false);
            }
            break;
            case 68: /* reduce ADead5DeadCode */
            {
                ArrayList<Object> list = new68();
                push(goTo(16), list, false);
            }
            break;
            case 69: /* reduce APrioritizedExpression */
            {
                ArrayList<Object> list = new69();
                push(goTo(17), list, false);
            }
            break;
            case 70: /* reduce ABinaryExpression */
            {
                ArrayList<Object> list = new70();
                push(goTo(17), list, false);
            }
            break;
            case 71: /* reduce ATermPrioritizedExpression */
            {
                ArrayList<Object> list = new71();
                push(goTo(18), list, false);
            }
            break;
            case 72: /* reduce ABinaryPrioritizedExpression */
            {
                ArrayList<Object> list = new72();
                push(goTo(18), list, false);
            }
            break;
            case 73: /* reduce AValueTerm */
            {
                ArrayList<Object> list = new73();
                push(goTo(19), list, false);
            }
            break;
            case 74: /* reduce AAddressOfTerm */
            {
                ArrayList<Object> list = new74();
                push(goTo(19), list, false);
            }
            break;
            case 75: /* reduce ADereferenceTerm */
            {
                ArrayList<Object> list = new75();
                push(goTo(19), list, false);
            }
            break;
            case 76: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new76();
                push(goTo(19), list, false);
            }
            break;
            case 77: /* reduce AParExpressionTerm */
            {
                ArrayList<Object> list = new77();
                push(goTo(19), list, false);
            }
            break;
            case 78: /* reduce AIntegerValue */
            {
                ArrayList<Object> list = new78();
                push(goTo(20), list, false);
            }
            break;
            case 79: /* reduce AVariableValue */
            {
                ArrayList<Object> list = new79();
                push(goTo(20), list, false);
            }
            break;
            case 80: /* reduce AFunctionValue */
            {
                ArrayList<Object> list = new80();
                push(goTo(20), list, false);
            }
            break;
            case 81: /* reduce ABuiltInArgcFunction */
            {
                ArrayList<Object> list = new81();
                push(goTo(21), list, false);
            }
            break;
            case 82: /* reduce ABuiltInArgvFunction */
            {
                ArrayList<Object> list = new82();
                push(goTo(21), list, false);
            }
            break;
            case 83: /* reduce AAdefinedfunction1Function */
            {
                ArrayList<Object> list = new83();
                push(goTo(21), list, false);
            }
            break;
            case 84: /* reduce AAdefinedfunction2Function */
            {
                ArrayList<Object> list = new84();
                push(goTo(21), list, false);
            }
            break;
            case 85: /* reduce ARvalueVariable */
            {
                ArrayList<Object> list = new85();
                push(goTo(22), list, false);
            }
            break;
            case 86: /* reduce AAlvaluevariable1LvalueVariable */
            {
                ArrayList<Object> list = new86();
                push(goTo(23), list, false);
            }
            break;
            case 87: /* reduce AAlvaluevariable2LvalueVariable */
            {
                ArrayList<Object> list = new87();
                push(goTo(23), list, false);
            }
            break;
            case 88: /* reduce AAargumentlist1ArgumentList */
            {
                ArrayList<Object> list = new88();
                push(goTo(24), list, false);
            }
            break;
            case 89: /* reduce AAargumentlist2ArgumentList */
            {
                ArrayList<Object> list = new89();
                push(goTo(24), list, false);
            }
            break;
            case 90: /* reduce AArgumentListTail */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list, false);
            }
            break;
            case 91: /* reduce AAparameterlist1ParameterList */
            {
                ArrayList<Object> list = new91();
                push(goTo(26), list, false);
            }
            break;
            case 92: /* reduce AAparameterlist2ParameterList */
            {
                ArrayList<Object> list = new92();
                push(goTo(26), list, false);
            }
            break;
            case 93: /* reduce AParameterListTail */
            {
                ArrayList<Object> list = new93();
                push(goTo(27), list, false);
            }
            break;
            case 94: /* reduce APlusUnaryOp */
            {
                ArrayList<Object> list = new94();
                push(goTo(28), list, false);
            }
            break;
            case 95: /* reduce AMinusUnaryOp */
            {
                ArrayList<Object> list = new95();
                push(goTo(28), list, false);
            }
            break;
            case 96: /* reduce AComplementUnaryOp */
            {
                ArrayList<Object> list = new96();
                push(goTo(28), list, false);
            }
            break;
            case 97: /* reduce AToBoolUnaryOp */
            {
                ArrayList<Object> list = new97();
                push(goTo(28), list, false);
            }
            break;
            case 98: /* reduce ANotUnaryOp */
            {
                ArrayList<Object> list = new98();
                push(goTo(28), list, false);
            }
            break;
            case 99: /* reduce APlusBinaryOp */
            {
                ArrayList<Object> list = new99();
                push(goTo(29), list, false);
            }
            break;
            case 100: /* reduce AAndBinaryOp */
            {
                ArrayList<Object> list = new100();
                push(goTo(29), list, false);
            }
            break;
            case 101: /* reduce AOrBinaryOp */
            {
                ArrayList<Object> list = new101();
                push(goTo(29), list, false);
            }
            break;
            case 102: /* reduce AXorBinaryOp */
            {
                ArrayList<Object> list = new102();
                push(goTo(29), list, false);
            }
            break;
            case 103: /* reduce AMinusBinaryOp */
            {
                ArrayList<Object> list = new103();
                push(goTo(29), list, false);
            }
            break;
            case 104: /* reduce ALeftShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new104();
                push(goTo(30), list, false);
            }
            break;
            case 105: /* reduce ARightShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new105();
                push(goTo(30), list, false);
            }
            break;
            case 106: /* reduce AMultiplyPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new106();
                push(goTo(30), list, false);
            }
            break;
            case 107: /* reduce AEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new107();
                push(goTo(30), list, false);
            }
            break;
            case 108: /* reduce ADividePrioritizedBinaryOp */
            {
                ArrayList<Object> list = new108();
                push(goTo(30), list, false);
            }
            break;
            case 109: /* reduce AModuloPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new109();
                push(goTo(30), list, false);
            }
            break;
            case 110: /* reduce ANotEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new110();
                push(goTo(30), list, false);
            }
            break;
            case 111: /* reduce ALessThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new111();
                push(goTo(30), list, false);
            }
            break;
            case 112: /* reduce ALessOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new112();
                push(goTo(30), list, false);
            }
            break;
            case 113: /* reduce AMoreThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new113();
                push(goTo(30), list, false);
            }
            break;
            case 114: /* reduce AMoreOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new114();
                push(goTo(30), list, false);
            }
            break;
            case 115: /* reduce ATerminal$GeneralSection */
            {
                ArrayList<Object> list = new115();
                push(goTo(31), list, true);
            }
            break;
            case 116: /* reduce ANonTerminal$GeneralSection */
            {
                ArrayList<Object> list = new116();
                push(goTo(31), list, true);
            }
            break;
            case 117: /* reduce ATerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new117();
                push(goTo(32), list, true);
            }
            break;
            case 118: /* reduce ANonTerminal$ElseIfBlock */
            {
                ArrayList<Object> list = new118();
                push(goTo(32), list, true);
            }
            break;
            case 119: /* reduce ATerminal$BasicSection */
            {
                ArrayList<Object> list = new119();
                push(goTo(33), list, true);
            }
            break;
            case 120: /* reduce ANonTerminal$BasicSection */
            {
                ArrayList<Object> list = new120();
                push(goTo(33), list, true);
            }
            break;
            case 121: /* reduce ATerminal$DeadCode */
            {
                ArrayList<Object> list = new121();
                push(goTo(34), list, true);
            }
            break;
            case 122: /* reduce ANonTerminal$DeadCode */
            {
                ArrayList<Object> list = new122();
                push(goTo(34), list, true);
            }
            break;
            case 123: /* reduce ATerminal$Dereference */
            {
                ArrayList<Object> list = new123();
                push(goTo(35), list, true);
            }
            break;
            case 124: /* reduce ANonTerminal$Dereference */
            {
                ArrayList<Object> list = new124();
                push(goTo(35), list, true);
            }
            break;
            case 125: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new125();
                push(goTo(36), list, true);
            }
            break;
            case 126: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new126();
                push(goTo(36), list, true);
            }
            break;
            case 127: /* reduce ATerminal$ParameterListTail */
            {
                ArrayList<Object> list = new127();
                push(goTo(37), list, true);
            }
            break;
            case 128: /* reduce ANonTerminal$ParameterListTail */
            {
                ArrayList<Object> list = new128();
<<<<<<< HEAD
                push(goTo(42), list, false);
            }
            break;
            case 129: /* reduce AComplementUnaryOp */
            {
                ArrayList<Object> list = new129();
                push(goTo(42), list, false);
            }
            break;
            case 130: /* reduce AToBoolUnaryOp */
            {
                ArrayList<Object> list = new130();
                push(goTo(42), list, false);
            }
            break;
            case 131: /* reduce ANotUnaryOp */
            {
                ArrayList<Object> list = new131();
                push(goTo(42), list, false);
            }
            break;
            case 132: /* reduce APlusBinaryOp */
            {
                ArrayList<Object> list = new132();
                push(goTo(43), list, false);
            }
            break;
            case 133: /* reduce AAndBinaryOp */
            {
                ArrayList<Object> list = new133();
                push(goTo(43), list, false);
            }
            break;
            case 134: /* reduce AOrBinaryOp */
            {
                ArrayList<Object> list = new134();
                push(goTo(43), list, false);
            }
            break;
            case 135: /* reduce AXorBinaryOp */
            {
                ArrayList<Object> list = new135();
                push(goTo(43), list, false);
            }
            break;
            case 136: /* reduce AMinusBinaryOp */
            {
                ArrayList<Object> list = new136();
                push(goTo(43), list, false);
            }
            break;
            case 137: /* reduce ALeftShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new137();
                push(goTo(44), list, false);
            }
            break;
            case 138: /* reduce ARightShiftPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new138();
                push(goTo(44), list, false);
            }
            break;
            case 139: /* reduce AMultiplyPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new139();
                push(goTo(44), list, false);
            }
            break;
            case 140: /* reduce AEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new140();
                push(goTo(44), list, false);
            }
            break;
            case 141: /* reduce ADividePrioritizedBinaryOp */
            {
                ArrayList<Object> list = new141();
                push(goTo(44), list, false);
            }
            break;
            case 142: /* reduce AModuloPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new142();
                push(goTo(44), list, false);
            }
            break;
            case 143: /* reduce ANotEqualToPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new143();
                push(goTo(44), list, false);
            }
            break;
            case 144: /* reduce ALessThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new144();
                push(goTo(44), list, false);
            }
            break;
            case 145: /* reduce ALessOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new145();
                push(goTo(44), list, false);
            }
            break;
            case 146: /* reduce AMoreThanPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new146();
                push(goTo(44), list, false);
            }
            break;
            case 147: /* reduce AMoreOrEqualPrioritizedBinaryOp */
            {
                ArrayList<Object> list = new147();
                push(goTo(44), list, false);
            }
            break;
            case 148: /* reduce ATerminal$GeneralSection */
            {
                ArrayList<Object> list = new148();
                push(goTo(45), list, true);
            }
            break;
            case 149: /* reduce ANonTerminal$GeneralSection */
            {
                ArrayList<Object> list = new149();
                push(goTo(45), list, true);
            }
            break;
            case 150: /* reduce ATerminal$ElifBlock */
            {
                ArrayList<Object> list = new150();
                push(goTo(46), list, true);
            }
            break;
            case 151: /* reduce ANonTerminal$ElifBlock */
            {
                ArrayList<Object> list = new151();
                push(goTo(46), list, true);
            }
            break;
            case 152: /* reduce ATerminal$BasicSection */
            {
                ArrayList<Object> list = new152();
                push(goTo(47), list, true);
            }
            break;
            case 153: /* reduce ANonTerminal$BasicSection */
            {
                ArrayList<Object> list = new153();
                push(goTo(47), list, true);
            }
            break;
            case 154: /* reduce ATerminal$ArrayBrackets */
            {
                ArrayList<Object> list = new154();
                push(goTo(48), list, true);
            }
            break;
            case 155: /* reduce ANonTerminal$ArrayBrackets */
            {
                ArrayList<Object> list = new155();
                push(goTo(48), list, true);
            }
            break;
            case 156: /* reduce ATerminal$DeadCode */
            {
                ArrayList<Object> list = new156();
                push(goTo(49), list, true);
            }
            break;
            case 157: /* reduce ANonTerminal$DeadCode */
            {
                ArrayList<Object> list = new157();
                push(goTo(49), list, true);
            }
            break;
            case 158: /* reduce ATerminal$Dereference */
            {
                ArrayList<Object> list = new158();
                push(goTo(50), list, true);
            }
            break;
            case 159: /* reduce ANonTerminal$Dereference */
            {
                ArrayList<Object> list = new159();
                push(goTo(50), list, true);
            }
            break;
            case 160: /* reduce ATerminal$ExplicitInitialisationArrayListTail */
            {
                ArrayList<Object> list = new160();
                push(goTo(51), list, true);
            }
            break;
            case 161: /* reduce ANonTerminal$ExplicitInitialisationArrayListTail */
            {
                ArrayList<Object> list = new161();
                push(goTo(51), list, true);
            }
            break;
            case 162: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new162();
                push(goTo(52), list, true);
            }
            break;
            case 163: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new163();
                push(goTo(52), list, true);
            }
            break;
            case 164: /* reduce ATerminal$ParameterListTail */
            {
                ArrayList<Object> list = new164();
                push(goTo(53), list, true);
            }
            break;
            case 165: /* reduce ANonTerminal$ParameterListTail */
            {
                ArrayList<Object> list = new165();
                push(goTo(53), list, true);
=======
                push(goTo(37), list, true);
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAunit1Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        PSetupSection psetupsectionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        psetupsectionNode2 = (PSetupSection)nodeArrayList1.get(0);
        {
            // Block
        }

        punitNode1 = new AUnit(psetupsectionNode2, listNode3);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAunit2Unit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        PSetupSection psetupsectionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        psetupsectionNode2 = (PSetupSection)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        punitNode1 = new AUnit(psetupsectionNode2, listNode4);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAsetupsection1SetupSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSetupSection psetupsectionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        psetupsectionNode1 = new ASetupSection(null);
        }
	nodeList.add(psetupsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAsetupsection2SetupSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetupSection psetupsectionNode1;
        {
            // Block
        PInputSpecification pinputspecificationNode2;
        pinputspecificationNode2 = (PInputSpecification)nodeArrayList1.get(0);

        psetupsectionNode1 = new ASetupSection(pinputspecificationNode2);
        }
	nodeList.add(psetupsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AInputSpecification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputSpecification pinputspecificationNode1;
        {
            // Block
        TSetupPrefix tsetupprefixNode2;
        TSetArgc tsetargcNode3;
        TLPar tlparNode4;
        PExpression pexpressionNode5;
        TRPar trparNode6;
        TSemicolon tsemicolonNode7;
        tsetupprefixNode2 = (TSetupPrefix)nodeArrayList1.get(0);
        tsetargcNode3 = (TSetArgc)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pinputspecificationNode1 = new AInputSpecification(tsetupprefixNode2, tsetargcNode3, tlparNode4, pexpressionNode5, trparNode6, tsemicolonNode7);
        }
	nodeList.add(pinputspecificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMethodDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PMethodDefinition pmethoddefinitionNode2;
        pmethoddefinitionNode2 = (PMethodDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AMethodDefinitionGeneralSection(pmethoddefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFunctionDefinitionGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new AFunctionDefinitionGeneralSection(pfunctiondefinitionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABasicGeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneralSection pgeneralsectionNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pgeneralsectionNode1 = new ABasicGeneralSection(pbasicsectionNode2);
        }
	nodeList.add(pgeneralsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AConstantDefinitionBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PConstantDefinition pconstantdefinitionNode2;
        pconstantdefinitionNode2 = (PConstantDefinition)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AConstantDefinitionBasicSection(pconstantdefinitionNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDeclarationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableDeclarationBasicSection(pvariabledeclarationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVariableModificationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableModification pvariablemodificationNode2;
        pvariablemodificationNode2 = (PVariableModification)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableModificationBasicSection(pvariablemodificationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMethodCallBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AMethodCallBasicSection(pmethodcallNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAconditionalbasicsection1BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAconditionalbasicsection2BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, null);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAconditionalbasicsection3BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PElseBlock pelseblockNode4;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        }
        pelseblockNode4 = (PElseBlock)nodeArrayList2.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode3, pelseblockNode4);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAconditionalbasicsection4BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIfBlock pifblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PElseBlock pelseblockNode5;
        pifblockNode2 = (PIfBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pelseblockNode5 = (PElseBlock)nodeArrayList3.get(0);

        pbasicsectionNode1 = new AConditionalBasicSection(pifblockNode2, listNode4, pelseblockNode5);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIterativeBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIterativeBlock piterativeblockNode2;
        piterativeblockNode2 = (PIterativeBlock)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AIterativeBasicSection(piterativeblockNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethoddefinition1MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethoddefinition2MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethoddefinition3MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddefinition4MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddefinition5MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddefinition6MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddefinition7MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddefinition8MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pmethoddefinitionNode1 = new AMethodDefinition(tvoidNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAfunctiondefinition3FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAfunctiondefinition4FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode10 = null;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, null, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAfunctiondefinition5FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAfunctiondefinition6FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAfunctiondefinition7FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, null, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAfunctiondefinition8FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFun tfunNode2;
        TName tnameNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        PStopStatement pstopstatementNode10;
        TRBrace trbraceNode11;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pstopstatementNode10 = (PStopStatement)nodeArrayList8.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList9.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfunNode2, tnameNode3, tlparNode4, pparameterlistNode5, trparNode6, tlbraceNode7, listNode9, pstopstatementNode10, trbraceNode11);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AConstantDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstantDefinition pconstantdefinitionNode1;
        {
            // Block
        TConst tconstNode2;
        TName tnameNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pconstantdefinitionNode1 = new AConstantDefinition(tconstNode2, tnameNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pconstantdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANoInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        PLvalueVariable plvaluevariableNode3;
        TSemicolon tsemicolonNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        plvaluevariableNode3 = (PLvalueVariable)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvariabledeclarationNode1 = new ANoInitialisationVariableDeclaration(tvarNode2, plvaluevariableNode3, tsemicolonNode4);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AWithInitialisationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        PLvalueVariable plvaluevariableNode3;
        TEquals tequalsNode4;
        PExpression pexpressionNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        plvaluevariableNode3 = (PLvalueVariable)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvariabledeclarationNode1 = new AWithInitialisationVariableDeclaration(tvarNode2, plvaluevariableNode3, tequalsNode4, pexpressionNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AVariableModification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableModification pvariablemodificationNode1;
        {
            // Block
        PLvalueVariable plvaluevariableNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        plvaluevariableNode2 = (PLvalueVariable)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pvariablemodificationNode1 = new AVariableModification(plvaluevariableNode2, tequalsNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pvariablemodificationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ABuiltInOutMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TOut toutNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        toutNode2 = (TOut)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ABuiltInOutMethodCall(toutNode2, tlparNode3, pexpressionNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAdefinedmethodcall1MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, null, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAdefinedmethodcall2MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodcallNode1 = new ADefinedMethodCall(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAifblock1IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAifblock2IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAifblock3IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAifblock4IfBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfBlock pifblockNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pifblockNode1 = new AIfBlock(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new49() /* reduce AAelifblock1ElifBlock */
=======
    ArrayList<Object> new44() /* reduce AAelseifblock1ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElifBlock pelifblockNode1;
        {
            // Block
        TElif telifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        telifNode2 = (TElif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pelifblockNode1 = new AElifBlock(telifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pelifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new50() /* reduce AAelifblock2ElifBlock */
=======
    ArrayList<Object> new45() /* reduce AAelseifblock2ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElifBlock pelifblockNode1;
        {
            // Block
        TElif telifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        telifNode2 = (TElif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pelifblockNode1 = new AElifBlock(telifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pelifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new51() /* reduce AAelifblock3ElifBlock */
=======
    ArrayList<Object> new46() /* reduce AAelseifblock3ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElifBlock pelifblockNode1;
        {
            // Block
        TElif telifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        telifNode2 = (TElif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pelifblockNode1 = new AElifBlock(telifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pelifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new52() /* reduce AAelifblock4ElifBlock */
=======
    ArrayList<Object> new47() /* reduce AAelseifblock4ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElifBlock pelifblockNode1;
        {
            // Block
        TElif telifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        telifNode2 = (TElif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pelifblockNode1 = new AElifBlock(telifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pelifblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAelseblock1ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, null, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAelseblock2ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, null, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAelseblock3ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAelseblock4ElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAiterativeblock1IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAiterativeblock2IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAiterativeblock3IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAiterativeblock4IterativeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeBlock piterativeblockNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        piterativeblockNode1 = new AIterativeBlock(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(piterativeblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAreturnstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAreturnstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAcontinuestopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAcontinuestopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAbreakstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAbreakstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAreturnexpressionstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAreturnexpressionstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionNode3, tsemicolonNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ADead1DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pdeadcodeNode1 = new ADead1DeadCode(pbasicsectionNode2);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADead2DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead2DeadCode(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ADead3DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TContinue tcontinueNode2;
        TSemicolon tsemicolonNode3;
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead3DeadCode(tcontinueNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ADead4DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdeadcodeNode1 = new ADead4DeadCode(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ADead5DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadCode pdeadcodeNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeadcodeNode1 = new ADead5DeadCode(treturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pdeadcodeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce APrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new APrioritizedExpression(pprioritizedexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ABinaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PBinaryOp pbinaryopNode3;
        PPrioritizedExpression pprioritizedexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pbinaryopNode3 = (PBinaryOp)nodeArrayList2.get(0);
        pprioritizedexpressionNode4 = (PPrioritizedExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ABinaryExpression(pexpressionNode2, pbinaryopNode3, pprioritizedexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATermPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pprioritizedexpressionNode1 = new ATermPrioritizedExpression(ptermNode2);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ABinaryPrioritizedExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedExpression pprioritizedexpressionNode1;
        {
            // Block
        PPrioritizedExpression pprioritizedexpressionNode2;
        PPrioritizedBinaryOp pprioritizedbinaryopNode3;
        PTerm ptermNode4;
        pprioritizedexpressionNode2 = (PPrioritizedExpression)nodeArrayList1.get(0);
        pprioritizedbinaryopNode3 = (PPrioritizedBinaryOp)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pprioritizedexpressionNode1 = new ABinaryPrioritizedExpression(pprioritizedexpressionNode2, pprioritizedbinaryopNode3, ptermNode4);
        }
	nodeList.add(pprioritizedexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AValueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ptermNode1 = new AValueTerm(pvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAddressOfTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TAddressOf taddressofNode2;
        PRvalueVariable prvaluevariableNode3;
        taddressofNode2 = (TAddressOf)nodeArrayList1.get(0);
        prvaluevariableNode3 = (PRvalueVariable)nodeArrayList2.get(0);

        ptermNode1 = new AAddressOfTerm(taddressofNode2, prvaluevariableNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ADereferenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PRvalueVariable prvaluevariableNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        prvaluevariableNode4 = (PRvalueVariable)nodeArrayList2.get(0);

        ptermNode1 = new ADereferenceTerm(listNode3, prvaluevariableNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PUnaryOp punaryopNode2;
        PTerm ptermNode3;
        punaryopNode2 = (PUnaryOp)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(punaryopNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AParExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParExpressionTerm(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AIntegerValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pvalueNode1 = new AIntegerValue(tintegerNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AVariableValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PRvalueVariable prvaluevariableNode2;
        prvaluevariableNode2 = (PRvalueVariable)nodeArrayList1.get(0);

        pvalueNode1 = new AVariableValue(prvaluevariableNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AFunctionValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pvalueNode1 = new AFunctionValue(pfunctionNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ABuiltInArgcFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TArgc targcNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        targcNode2 = (TArgc)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfunctionNode1 = new ABuiltInArgcFunction(targcNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ABuiltInArgvFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TArgv targvNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        targvNode2 = (TArgv)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctionNode1 = new ABuiltInArgvFunction(targvNode2, tlparNode3, pexpressionNode4, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAdefinedfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctionNode1 = new ADefinedFunction(tnameNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAdefinedfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgumentList pargumentlistNode4;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctionNode1 = new ADefinedFunction(tnameNode2, tlparNode3, pargumentlistNode4, trparNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ARvalueVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRvalueVariable prvaluevariableNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        prvaluevariableNode1 = new ARvalueVariable(tnameNode2);
        }
	nodeList.add(prvaluevariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAlvaluevariable1LvalueVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueVariable plvaluevariableNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TName tnameNode3;
        {
            // Block
        }
        tnameNode3 = (TName)nodeArrayList1.get(0);

        plvaluevariableNode1 = new ALvalueVariable(listNode2, tnameNode3);
        }
	nodeList.add(plvaluevariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAlvaluevariable2LvalueVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalueVariable plvaluevariableNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TName tnameNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnameNode4 = (TName)nodeArrayList2.get(0);

        plvaluevariableNode1 = new ALvalueVariable(listNode3, tnameNode4);
        }
	nodeList.add(plvaluevariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAargumentlist1ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode3);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAargumentlist2ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentlistNode1 = new AArgumentList(pexpressionNode2, listNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentListTail pargumentlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pargumentlisttailNode1 = new AArgumentListTail(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pargumentlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PLvalueVariable plvaluevariableNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        plvaluevariableNode2 = (PLvalueVariable)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(plvaluevariableNode2, listNode3);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PLvalueVariable plvaluevariableNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        plvaluevariableNode2 = (PLvalueVariable)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparameterlistNode1 = new AParameterList(plvaluevariableNode2, listNode4);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PLvalueVariable plvaluevariableNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        plvaluevariableNode3 = (PLvalueVariable)nodeArrayList2.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, plvaluevariableNode3);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce APlusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        punaryopNode1 = new APlusUnaryOp(tplusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AMinusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryopNode1 = new AMinusUnaryOp(tminusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AComplementUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TComplement tcomplementNode2;
        tcomplementNode2 = (TComplement)nodeArrayList1.get(0);

        punaryopNode1 = new AComplementUnaryOp(tcomplementNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AToBoolUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TToBool ttoboolNode2;
        ttoboolNode2 = (TToBool)nodeArrayList1.get(0);

        punaryopNode1 = new AToBoolUnaryOp(ttoboolNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ANotUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        punaryopNode1 = new ANotUnaryOp(tnotNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce APlusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pbinaryopNode1 = new APlusBinaryOp(tplusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAndBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbinaryopNode1 = new AAndBinaryOp(tandNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AOrBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbinaryopNode1 = new AOrBinaryOp(torNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AXorBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pbinaryopNode1 = new AXorBinaryOp(txorNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AMinusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pbinaryopNode1 = new AMinusBinaryOp(tminusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ALeftShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLeftShift tleftshiftNode2;
        tleftshiftNode2 = (TLeftShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALeftShiftPrioritizedBinaryOp(tleftshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ARightShiftPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TRightShift trightshiftNode2;
        trightshiftNode2 = (TRightShift)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ARightShiftPrioritizedBinaryOp(trightshiftNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AMultiplyPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMultiply tmultiplyNode2;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMultiplyPrioritizedBinaryOp(tmultiplyNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TEqualTo tequaltoNode2;
        tequaltoNode2 = (TEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AEqualToPrioritizedBinaryOp(tequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ADividePrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ADividePrioritizedBinaryOp(tdivideNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce AModuloPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TModulo tmoduloNode2;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AModuloPrioritizedBinaryOp(tmoduloNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANotEqualToPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TNotEqualTo tnotequaltoNode2;
        tnotequaltoNode2 = (TNotEqualTo)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ANotEqualToPrioritizedBinaryOp(tnotequaltoNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ALessThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessThanPrioritizedBinaryOp(tlessthanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ALessOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TLessOrEqual tlessorequalNode2;
        tlessorequalNode2 = (TLessOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new ALessOrEqualPrioritizedBinaryOp(tlessorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce AMoreThanPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreThan tmorethanNode2;
        tmorethanNode2 = (TMoreThan)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreThanPrioritizedBinaryOp(tmorethanNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce AMoreOrEqualPrioritizedBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrioritizedBinaryOp pprioritizedbinaryopNode1;
        {
            // Block
        TMoreOrEqual tmoreorequalNode2;
        tmoreorequalNode2 = (TMoreOrEqual)nodeArrayList1.get(0);

        pprioritizedbinaryopNode1 = new AMoreOrEqualPrioritizedBinaryOp(tmoreorequalNode2);
        }
	nodeList.add(pprioritizedbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGeneralSection pgeneralsectionNode1;
        pgeneralsectionNode1 = (PGeneralSection)nodeArrayList1.get(0);
	if(pgeneralsectionNode1 != null)
	{
	  listNode2.add(pgeneralsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$GeneralSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGeneralSection pgeneralsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pgeneralsectionNode2 = (PGeneralSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgeneralsectionNode2 != null)
	{
	  listNode3.add(pgeneralsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new150() /* reduce ATerminal$ElifBlock */
=======
    ArrayList<Object> new117() /* reduce ATerminal$ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElifBlock pelifblockNode1;
        pelifblockNode1 = (PElifBlock)nodeArrayList1.get(0);
	if(pelifblockNode1 != null)
	{
	  listNode2.add(pelifblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< HEAD
    ArrayList<Object> new151() /* reduce ANonTerminal$ElifBlock */
=======
    ArrayList<Object> new118() /* reduce ANonTerminal$ElseIfBlock */
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElifBlock pelifblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelifblockNode2 = (PElifBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelifblockNode2 != null)
	{
	  listNode3.add(pelifblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ATerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBasicSection pbasicsectionNode1;
        pbasicsectionNode1 = (PBasicSection)nodeArrayList1.get(0);
	if(pbasicsectionNode1 != null)
	{
	  listNode2.add(pbasicsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ANonTerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBasicSection pbasicsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasicsectionNode2 = (PBasicSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasicsectionNode2 != null)
	{
	  listNode3.add(pbasicsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ATerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeadCode pdeadcodeNode1;
        pdeadcodeNode1 = (PDeadCode)nodeArrayList1.get(0);
	if(pdeadcodeNode1 != null)
	{
	  listNode2.add(pdeadcodeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ANonTerminal$DeadCode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeadCode pdeadcodeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeadcodeNode2 = (PDeadCode)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeadcodeNode2 != null)
	{
	  listNode3.add(pdeadcodeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ATerminal$Dereference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TDereference tdereferenceNode1;
        tdereferenceNode1 = (TDereference)nodeArrayList1.get(0);
	if(tdereferenceNode1 != null)
	{
	  listNode2.add(tdereferenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ANonTerminal$Dereference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TDereference tdereferenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tdereferenceNode2 = (TDereference)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tdereferenceNode2 != null)
	{
	  listNode3.add(tdereferenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ATerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentListTail pargumentlisttailNode1;
        pargumentlisttailNode1 = (PArgumentListTail)nodeArrayList1.get(0);
	if(pargumentlisttailNode1 != null)
	{
	  listNode2.add(pargumentlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce ANonTerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentListTail pargumentlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentlisttailNode2 = (PArgumentListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentlisttailNode2 != null)
	{
	  listNode3.add(pargumentlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce ATerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameterListTail pparameterlisttailNode1;
        pparameterlisttailNode1 = (PParameterListTail)nodeArrayList1.get(0);
	if(pparameterlisttailNode1 != null)
	{
	  listNode2.add(pparameterlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce ANonTerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameterListTail pparameterlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterlisttailNode2 = (PParameterListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterlisttailNode2 != null)
	{
	  listNode3.add(pparameterlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
<<<<<<< HEAD
			{{-1, ERROR, 1}, {1, SHIFT, 5}, },
			{{-1, ERROR, 2}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {2, SHIFT, 6}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {6, SHIFT, 10}, {10, SHIFT, 11}, {13, SHIFT, 12}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 5}, {17, SHIFT, 30}, },
			{{-1, ERROR, 6}, {46, SHIFT, 31}, },
			{{-1, ERROR, 7}, {19, SHIFT, 32}, {26, SHIFT, 13}, {46, SHIFT, 33}, },
			{{-1, ERROR, 8}, {46, SHIFT, 38}, },
			{{-1, ERROR, 9}, {46, SHIFT, 39}, },
			{{-1, ERROR, 10}, {17, SHIFT, 40}, },
			{{-1, ERROR, 11}, {17, SHIFT, 41}, },
			{{-1, ERROR, 12}, {17, SHIFT, 42}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 102}, {17, SHIFT, 43}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 148}, },
=======
			{{-1, ERROR, 1}, {15, SHIFT, 5}, },
			{{-1, ERROR, 2}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {9, SHIFT, 11}, {11, SHIFT, 12}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 5}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 6}, {42, SHIFT, 47}, },
			{{-1, ERROR, 7}, {22, SHIFT, 13}, {42, SHIFT, 48}, },
			{{-1, ERROR, 8}, {42, SHIFT, 50}, },
			{{-1, ERROR, 9}, {42, SHIFT, 51}, },
			{{-1, ERROR, 10}, {15, SHIFT, 52}, },
			{{-1, ERROR, 11}, {15, SHIFT, 53}, },
			{{-1, ERROR, 12}, {15, SHIFT, 54}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 86}, {15, SHIFT, 55}, },
			{{-1, REDUCE, 115}, },
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
<<<<<<< HEAD
			{{-1, REDUCE, 12}, {11, SHIFT, 45}, {12, SHIFT, 46}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 25}, {16, SHIFT, 50}, },
			{{-1, ERROR, 26}, {16, SHIFT, 51}, },
			{{-1, ERROR, 27}, {16, SHIFT, 52}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 6}, {3, SHIFT, 7}, {4, SHIFT, 8}, {5, SHIFT, 9}, {6, SHIFT, 10}, {10, SHIFT, 11}, {13, SHIFT, 12}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 29}, {17, SHIFT, 54}, {26, SHIFT, 55}, {46, SHIFT, 56}, },
			{{-1, ERROR, 30}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 31}, {16, SHIFT, 79}, },
			{{-1, ERROR, 32}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 34}, {16, SHIFT, 81}, {24, SHIFT, 82}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 36}, {19, SHIFT, 32}, {26, SHIFT, 13}, {46, SHIFT, 33}, },
			{{-1, ERROR, 37}, {26, SHIFT, 55}, {46, SHIFT, 85}, },
			{{-1, ERROR, 38}, {17, SHIFT, 86}, },
			{{-1, ERROR, 39}, {17, SHIFT, 87}, },
			{{-1, ERROR, 40}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 41}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 42}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 43}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {18, SHIFT, 91}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 104}, {19, SHIFT, 32}, },
			{{-1, ERROR, 45}, {17, SHIFT, 94}, },
			{{-1, ERROR, 46}, {21, SHIFT, 95}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, {11, SHIFT, 45}, {12, SHIFT, 46}, },
			{{-1, ERROR, 50}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 51}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 52}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 149}, },
			{{-1, ERROR, 54}, {26, SHIFT, 13}, {46, SHIFT, 101}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 103}, {19, SHIFT, 32}, },
			{{-1, ERROR, 57}, {17, SHIFT, 105}, },
			{{-1, ERROR, 58}, {17, SHIFT, 106}, },
			{{-1, ERROR, 59}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 60}, {17, SHIFT, 108}, {46, SHIFT, 109}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 97}, {17, SHIFT, 113}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 68}, {18, SHIFT, 115}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 74}, {35, SHIFT, 122}, {36, SHIFT, 123}, {37, SHIFT, 124}, {38, SHIFT, 125}, {39, SHIFT, 126}, {40, SHIFT, 127}, {41, SHIFT, 128}, {42, SHIFT, 129}, {43, SHIFT, 130}, {44, SHIFT, 131}, {45, SHIFT, 132}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 77}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 78}, {17, SHIFT, 108}, {26, SHIFT, 55}, {46, SHIFT, 109}, },
			{{-1, ERROR, 79}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 80}, {20, SHIFT, 139}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 81}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 83}, {16, SHIFT, 141}, {24, SHIFT, 142}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 86}, {18, SHIFT, 143}, {26, SHIFT, 13}, {46, SHIFT, 33}, },
			{{-1, ERROR, 87}, {18, SHIFT, 146}, {26, SHIFT, 13}, {46, SHIFT, 33}, },
			{{-1, ERROR, 88}, {18, SHIFT, 148}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 89}, {18, SHIFT, 149}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 90}, {18, SHIFT, 150}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 91}, {24, SHIFT, 151}, },
			{{-1, REDUCE, 121}, {23, SHIFT, 152}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 93}, {18, SHIFT, 155}, },
			{{-1, ERROR, 94}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 95}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 160}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 98}, {24, SHIFT, 164}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 99}, {24, SHIFT, 165}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 100}, {24, SHIFT, 166}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 101}, {19, SHIFT, 32}, },
			{{-1, ERROR, 102}, {18, SHIFT, 168}, },
			{{-1, ERROR, 103}, {26, SHIFT, 55}, {46, SHIFT, 169}, },
			{{-1, REDUCE, 105}, {19, SHIFT, 32}, },
			{{-1, ERROR, 105}, {18, SHIFT, 170}, },
			{{-1, ERROR, 106}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 107}, {18, SHIFT, 172}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 108}, {26, SHIFT, 13}, {46, SHIFT, 173}, },
			{{-1, REDUCE, 97}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 113}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {18, SHIFT, 176}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 98}, {19, SHIFT, 32}, },
			{{-1, ERROR, 115}, {24, SHIFT, 178}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 135}, },
			{{-1, ERROR, 121}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, ERROR, 133}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 81}, },
=======
			{{-1, REDUCE, 12}, {10, SHIFT, 56}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 25}, {14, SHIFT, 60}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {9, SHIFT, 11}, {11, SHIFT, 12}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 27}, {22, SHIFT, 62}, {42, SHIFT, 63}, },
			{{-1, ERROR, 28}, {15, SHIFT, 64}, },
			{{-1, ERROR, 29}, {15, SHIFT, 65}, },
			{{-1, ERROR, 30}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 31}, {42, SHIFT, 67}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 85}, {15, SHIFT, 69}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 39}, {16, SHIFT, 70}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 69}, {31, SHIFT, 77}, {32, SHIFT, 78}, {33, SHIFT, 79}, {34, SHIFT, 80}, {35, SHIFT, 81}, {36, SHIFT, 82}, {37, SHIFT, 83}, {38, SHIFT, 84}, {39, SHIFT, 85}, {40, SHIFT, 86}, {41, SHIFT, 87}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 45}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 46}, {22, SHIFT, 62}, {42, SHIFT, 67}, },
			{{-1, ERROR, 47}, {14, SHIFT, 91}, },
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 49}, {14, SHIFT, 92}, {20, SHIFT, 93}, },
			{{-1, ERROR, 50}, {15, SHIFT, 94}, },
			{{-1, ERROR, 51}, {15, SHIFT, 95}, },
			{{-1, ERROR, 52}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 53}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 54}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 55}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {16, SHIFT, 99}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 56}, {9, SHIFT, 102}, {17, SHIFT, 103}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, {10, SHIFT, 56}, },
			{{-1, ERROR, 60}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 87}, },
<<<<<<< HEAD
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 138}, {24, SHIFT, 181}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 140}, {24, SHIFT, 182}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 141}, {21, SHIFT, 183}, {25, SHIFT, 184}, {26, SHIFT, 13}, {46, SHIFT, 185}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 143}, {21, SHIFT, 189}, },
			{{-1, REDUCE, 124}, {23, SHIFT, 190}, },
			{{-1, ERROR, 145}, {18, SHIFT, 193}, },
			{{-1, ERROR, 146}, {21, SHIFT, 194}, },
			{{-1, ERROR, 147}, {18, SHIFT, 195}, },
			{{-1, ERROR, 148}, {24, SHIFT, 196}, },
			{{-1, ERROR, 149}, {21, SHIFT, 197}, },
			{{-1, ERROR, 150}, {21, SHIFT, 198}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 152}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 122}, {23, SHIFT, 152}, },
			{{-1, ERROR, 155}, {24, SHIFT, 201}, },
			{{-1, ERROR, 156}, {18, SHIFT, 202}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, ERROR, 157}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {24, SHIFT, 203}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 158}, {24, SHIFT, 205}, },
			{{-1, ERROR, 159}, {24, SHIFT, 206}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 162}, {22, SHIFT, 207}, },
			{{-1, ERROR, 163}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 208}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 107}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 169}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 171}, {18, SHIFT, 212}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 173}, {19, SHIFT, 32}, },
			{{-1, ERROR, 174}, {18, SHIFT, 214}, },
			{{-1, ERROR, 175}, {26, SHIFT, 55}, {46, SHIFT, 215}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 177}, {18, SHIFT, 216}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 75}, {35, SHIFT, 122}, {36, SHIFT, 123}, {37, SHIFT, 124}, {38, SHIFT, 125}, {39, SHIFT, 126}, {40, SHIFT, 127}, {41, SHIFT, 128}, {42, SHIFT, 129}, {43, SHIFT, 130}, {44, SHIFT, 131}, {45, SHIFT, 132}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 183}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {21, SHIFT, 183}, {22, SHIFT, 217}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 184}, {46, SHIFT, 221}, },
			{{-1, ERROR, 185}, {19, SHIFT, 32}, },
			{{-1, ERROR, 186}, {24, SHIFT, 223}, },
			{{-1, ERROR, 187}, {24, SHIFT, 224}, },
			{{-1, ERROR, 188}, {26, SHIFT, 55}, {46, SHIFT, 225}, },
			{{-1, ERROR, 189}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 226}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 190}, {26, SHIFT, 13}, {46, SHIFT, 33}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 125}, {23, SHIFT, 190}, },
			{{-1, ERROR, 193}, {21, SHIFT, 231}, },
			{{-1, ERROR, 194}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 232}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 195}, {21, SHIFT, 235}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 197}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 236}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 198}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 239}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 123}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 202}, {21, SHIFT, 242}, },
			{{-1, REDUCE, 61}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 204}, {24, SHIFT, 249}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 63}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 65}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 153}, },
			{{-1, ERROR, 210}, {22, SHIFT, 252}, },
			{{-1, REDUCE, 108}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 100}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 215}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 118}, {23, SHIFT, 254}, },
			{{-1, ERROR, 219}, {22, SHIFT, 257}, },
			{{-1, ERROR, 220}, {22, SHIFT, 258}, },
			{{-1, ERROR, 221}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 113}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 225}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 227}, {22, SHIFT, 261}, },
			{{-1, ERROR, 228}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 262}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 165}, },
			{{-1, ERROR, 231}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 264}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 233}, {22, SHIFT, 267}, },
			{{-1, ERROR, 234}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 268}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 235}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 270}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 237}, {22, SHIFT, 273}, },
			{{-1, ERROR, 238}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 274}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 240}, {22, SHIFT, 276}, },
			{{-1, ERROR, 241}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 277}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 242}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 279}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 243}, {7, SHIFT, 57}, {8, SHIFT, 58}, {17, SHIFT, 59}, {24, SHIFT, 282}, {25, SHIFT, 60}, {26, SHIFT, 13}, {27, SHIFT, 61}, {28, SHIFT, 62}, {29, SHIFT, 63}, {30, SHIFT, 64}, {31, SHIFT, 65}, {46, SHIFT, 66}, {47, SHIFT, 67}, },
			{{-1, ERROR, 244}, {24, SHIFT, 284}, },
			{{-1, ERROR, 245}, {24, SHIFT, 285}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 62}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 67}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 64}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 66}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 101}, {19, SHIFT, 32}, },
			{{-1, ERROR, 254}, {21, SHIFT, 183}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 119}, {23, SHIFT, 254}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 112}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 114}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 263}, {22, SHIFT, 290}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 265}, {22, SHIFT, 291}, },
			{{-1, ERROR, 266}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 292}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 269}, {22, SHIFT, 294}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 271}, {22, SHIFT, 295}, },
			{{-1, ERROR, 272}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 296}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 275}, {22, SHIFT, 298}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 278}, {22, SHIFT, 299}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 280}, {22, SHIFT, 300}, },
			{{-1, ERROR, 281}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 157}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 158}, {15, SHIFT, 159}, {22, SHIFT, 301}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 283}, {24, SHIFT, 303}, {27, SHIFT, 116}, {28, SHIFT, 117}, {32, SHIFT, 118}, {33, SHIFT, 119}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 68}, {2, SHIFT, 6}, {3, SHIFT, 7}, {6, SHIFT, 10}, {9, SHIFT, 243}, {10, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 244}, {15, SHIFT, 245}, {26, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 293}, {22, SHIFT, 304}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 297}, {22, SHIFT, 305}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 302}, {22, SHIFT, 306}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 52}, },
=======
			{{-1, ERROR, 64}, {16, SHIFT, 107}, },
			{{-1, ERROR, 65}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 66}, {16, SHIFT, 109}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 69}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {16, SHIFT, 110}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 70}, {20, SHIFT, 112}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 76}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 88}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 91}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 92}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 94}, {16, SHIFT, 117}, {22, SHIFT, 13}, {42, SHIFT, 48}, },
			{{-1, ERROR, 95}, {16, SHIFT, 120}, {22, SHIFT, 13}, {42, SHIFT, 48}, },
			{{-1, ERROR, 96}, {16, SHIFT, 122}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 97}, {16, SHIFT, 123}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 98}, {16, SHIFT, 124}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 99}, {20, SHIFT, 125}, },
			{{-1, REDUCE, 88}, {19, SHIFT, 126}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 101}, {16, SHIFT, 129}, },
			{{-1, ERROR, 102}, {15, SHIFT, 130}, },
			{{-1, ERROR, 103}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 134}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 106}, {20, SHIFT, 138}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 108}, {16, SHIFT, 139}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 111}, {16, SHIFT, 140}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 70}, {31, SHIFT, 77}, {32, SHIFT, 78}, {33, SHIFT, 79}, {34, SHIFT, 80}, {35, SHIFT, 81}, {36, SHIFT, 82}, {37, SHIFT, 83}, {38, SHIFT, 84}, {39, SHIFT, 85}, {40, SHIFT, 86}, {41, SHIFT, 87}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 115}, {20, SHIFT, 141}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 116}, {20, SHIFT, 142}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, ERROR, 117}, {17, SHIFT, 143}, },
			{{-1, REDUCE, 91}, {19, SHIFT, 144}, },
			{{-1, ERROR, 119}, {16, SHIFT, 147}, },
			{{-1, ERROR, 120}, {17, SHIFT, 148}, },
			{{-1, ERROR, 121}, {16, SHIFT, 149}, },
			{{-1, ERROR, 122}, {20, SHIFT, 150}, },
			{{-1, ERROR, 123}, {17, SHIFT, 151}, },
			{{-1, ERROR, 124}, {17, SHIFT, 152}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 126}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 89}, {19, SHIFT, 126}, },
			{{-1, ERROR, 129}, {20, SHIFT, 155}, },
			{{-1, ERROR, 130}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 131}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {20, SHIFT, 157}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 132}, {20, SHIFT, 159}, },
			{{-1, ERROR, 133}, {20, SHIFT, 160}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 136}, {18, SHIFT, 161}, },
			{{-1, ERROR, 137}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 162}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 143}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 165}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 144}, {22, SHIFT, 13}, {42, SHIFT, 48}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 92}, {19, SHIFT, 144}, },
			{{-1, ERROR, 147}, {17, SHIFT, 170}, },
			{{-1, ERROR, 148}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 171}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 149}, {17, SHIFT, 174}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 151}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 175}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 152}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 178}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 90}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 156}, {16, SHIFT, 181}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 158}, {20, SHIFT, 188}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 58}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 60}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 164}, {18, SHIFT, 191}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 166}, {18, SHIFT, 192}, },
			{{-1, ERROR, 167}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 193}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 170}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 195}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 172}, {18, SHIFT, 198}, },
			{{-1, ERROR, 173}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 199}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 174}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 201}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 176}, {18, SHIFT, 204}, },
			{{-1, ERROR, 177}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 205}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 179}, {18, SHIFT, 207}, },
			{{-1, ERROR, 180}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 208}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, ERROR, 181}, {17, SHIFT, 210}, },
			{{-1, ERROR, 182}, {6, SHIFT, 28}, {7, SHIFT, 29}, {15, SHIFT, 30}, {20, SHIFT, 211}, {21, SHIFT, 31}, {22, SHIFT, 13}, {23, SHIFT, 32}, {24, SHIFT, 33}, {25, SHIFT, 34}, {26, SHIFT, 35}, {27, SHIFT, 36}, {42, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, ERROR, 183}, {20, SHIFT, 213}, },
			{{-1, ERROR, 184}, {20, SHIFT, 214}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 57}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 62}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 61}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 194}, {18, SHIFT, 217}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 196}, {18, SHIFT, 218}, },
			{{-1, ERROR, 197}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 219}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 200}, {18, SHIFT, 221}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 202}, {18, SHIFT, 222}, },
			{{-1, ERROR, 203}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 223}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 206}, {18, SHIFT, 225}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 209}, {18, SHIFT, 226}, },
			{{-1, ERROR, 210}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 227}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 212}, {20, SHIFT, 230}, {23, SHIFT, 71}, {24, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 63}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 182}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 183}, {13, SHIFT, 184}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 220}, {18, SHIFT, 231}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 224}, {18, SHIFT, 232}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 228}, {18, SHIFT, 233}, },
			{{-1, ERROR, 229}, {1, SHIFT, 6}, {2, SHIFT, 7}, {5, SHIFT, 10}, {8, SHIFT, 131}, {9, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 132}, {13, SHIFT, 133}, {18, SHIFT, 234}, {22, SHIFT, 13}, {42, SHIFT, 14}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 235}, {18, SHIFT, 236}, },
			{{-1, REDUCE, 47}, },
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, },
<<<<<<< HEAD
			{{-1, 15}, {28, 53}, },
			{{-1, 161}, {3, 16}, {28, 16}, {163, 209}, {203, 246}, {205, 246}, {206, 246}, {228, 209}, {234, 209}, {238, 209}, {241, 209}, {248, 246}, {249, 246}, {250, 246}, {251, 246}, {266, 209}, {272, 209}, {281, 209}, {287, 246}, },
=======
			{{-1, 15}, {26, 61}, },
			{{-1, 135}, {3, 16}, {26, 16}, {137, 163}, {157, 185}, {159, 185}, {160, 185}, {167, 163}, {173, 163}, {177, 163}, {180, 163}, {187, 185}, {188, 185}, {189, 185}, {190, 185}, {197, 163}, {203, 163}, {216, 185}, {229, 163}, },
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
<<<<<<< HEAD
			{{-1, 47}, {49, 96}, },
			{{-1, 48}, {49, 97}, },
			{{-1, 24}, },
			{{-1, 162}, {163, 210}, {189, 227}, {194, 233}, {197, 237}, {198, 240}, {228, 263}, {231, 265}, {234, 269}, {235, 271}, {238, 275}, {241, 278}, {242, 280}, {266, 293}, {272, 297}, {281, 302}, },
			{{-1, 247}, {248, 286}, {250, 286}, {251, 286}, {287, 286}, },
			{{-1, 92}, {30, 68}, {32, 80}, {40, 88}, {41, 89}, {42, 90}, {50, 98}, {51, 99}, {52, 100}, {59, 107}, {79, 138}, {81, 140}, {94, 156}, {106, 171}, {152, 199}, {157, 204}, {243, 283}, },
			{{-1, 69}, {121, 179}, },
			{{-1, 70}, {77, 134}, {133, 180}, },
			{{-1, 71}, },
			{{-1, 72}, },
			{{-1, 73}, },
			{{-1, 74}, },
			{{-1, 75}, {60, 110}, {78, 135}, },
			{{-1, 76}, {60, 111}, {78, 136}, },
			{{-1, 112}, {78, 137}, },
			{{-1, 174}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 102}, },
			{{-1, 144}, {7, 34}, {36, 83}, {190, 229}, },
			{{-1, 35}, {36, 84}, {44, 84}, {104, 84}, {114, 84}, {167, 84}, {211, 84}, {213, 84}, {222, 84}, {253, 84}, {259, 84}, {260, 84}, },
			{{-1, 186}, },
			{{-1, 187}, {183, 218}, {254, 288}, },
			{{-1, 219}, },
			{{-1, 255}, {256, 289}, },
			{{-1, 93}, {113, 177}, {183, 220}, },
			{{-1, 153}, {154, 200}, },
			{{-1, 145}, {87, 147}, },
			{{-1, 191}, {192, 230}, },
			{{-1, 77}, },
			{{-1, 121}, },
			{{-1, 133}, },
			{{-1, 28}, },
			{{-1, 49}, },
			{{-1, 163}, {189, 228}, {194, 234}, {197, 238}, {198, 241}, {231, 266}, {235, 272}, {242, 281}, },
			{{-1, 114}, {7, 36}, {14, 44}, {56, 104}, {101, 167}, {169, 211}, {173, 213}, {185, 222}, {215, 253}, {221, 259}, {225, 260}, },
			{{-1, 248}, {205, 250}, {206, 251}, {249, 287}, },
			{{-1, 29}, {7, 37}, {30, 78}, {32, 78}, {36, 37}, {40, 78}, {41, 78}, {42, 78}, {43, 78}, {50, 78}, {51, 78}, {52, 78}, {54, 103}, {59, 78}, {77, 78}, {79, 78}, {81, 78}, {86, 37}, {87, 37}, {94, 78}, {106, 78}, {108, 175}, {113, 78}, {121, 78}, {133, 78}, {141, 188}, {152, 78}, {157, 78}, {183, 78}, {190, 37}, {243, 78}, },
			{{-1, 256}, },
			{{-1, 154}, },
			{{-1, 192}, },
=======
			{{-1, 57}, {59, 104}, },
			{{-1, 58}, {59, 105}, },
			{{-1, 24}, },
			{{-1, 136}, {137, 164}, {143, 166}, {148, 172}, {151, 176}, {152, 179}, {167, 194}, {170, 196}, {173, 200}, {174, 202}, {177, 206}, {180, 209}, {197, 220}, {203, 224}, {210, 228}, {229, 235}, },
			{{-1, 186}, {187, 215}, {189, 215}, {190, 215}, {216, 215}, },
			{{-1, 100}, {5, 39}, {30, 66}, {52, 96}, {53, 97}, {54, 98}, {60, 106}, {65, 108}, {91, 115}, {92, 116}, {126, 153}, {130, 156}, {131, 158}, {182, 212}, },
			{{-1, 40}, {76, 113}, },
			{{-1, 41}, {45, 89}, {88, 114}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 44}, {31, 68}, {46, 90}, },
			{{-1, 25}, {7, 49}, {94, 118}, {95, 118}, {144, 168}, },
			{{-1, 101}, {69, 111}, },
			{{-1, 127}, {128, 154}, },
			{{-1, 119}, {95, 121}, },
			{{-1, 145}, {146, 169}, },
			{{-1, 45}, },
			{{-1, 76}, },
			{{-1, 88}, },
			{{-1, 26}, },
			{{-1, 59}, },
			{{-1, 137}, {143, 167}, {148, 173}, {151, 177}, {152, 180}, {170, 197}, {174, 203}, {210, 229}, },
			{{-1, 187}, {159, 189}, {160, 190}, {188, 216}, },
			{{-1, 27}, {5, 46}, {30, 46}, {45, 46}, {52, 46}, {53, 46}, {54, 46}, {55, 46}, {60, 46}, {65, 46}, {69, 46}, {76, 46}, {88, 46}, {91, 46}, {92, 46}, {126, 46}, {130, 46}, {131, 46}, {182, 46}, },
			{{-1, 128}, },
			{{-1, 146}, },
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '$', 'const', 'var', 'void', 'fun', 'out', 'if', 'while', '#', name, EOF",
			"expecting: 'set_argc'",
			"expecting: EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'if', 'while', '#', name, EOF",
			"expecting: '('",
			"expecting: name",
			"expecting: '#', name",
			"expecting: '=', '('",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'while', 'continue', 'break', '}', '#', name, EOF",
			"expecting: 'const', 'var', 'void', 'fun', 'out', 'return', 'if', 'elif', 'else', 'while', 'continue', 'break', '}', '#', name, EOF",
			"expecting: '='",
<<<<<<< HEAD
			"expecting: 'argc', 'argv', '(', '@', '#', '+', '-', '~', '?', '!', name, integer",
=======
			"expecting: '(', ')', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', '+', '-', '&', '|', '^'",
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
			"expecting: '=', ')', ',', ';'",
			"expecting: '=', ';'",
			"expecting: 'argc', 'argv', '(', ')', '@', '#', '+', '-', '~', '?', '!', name, integer",
<<<<<<< HEAD
			"expecting: '=', '['",
			"expecting: '{'",
			"expecting: '(', name",
			"expecting: '(', ')', '[', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', '+', '-', '&', '|', '^'",
			"expecting: ']', '+', '-', '&', '|', '^'",
			"expecting: ')', '#', name",
			"expecting: ';'",
			"expecting: ')', '}', ',', '+', '-', '&', '|', '^'",
			"expecting: ')'",
			"expecting: 'const', 'var', 'out', 'return', 'if', 'while', 'continue', 'break', '}', '#', name",
			"expecting: ';', '+', '-', '&', '|', '^'",
			"expecting: '['",
			"expecting: ')', '[', ']', '}', ',', ';', '+', '-', '&', '|', '^', '<<', '>>', '*', '/', '%', '==', '!=', '<', '<=', '>', '>='",
			"expecting: '{', '@', '#', name",
=======
			"expecting: 'if', '{'",
			"expecting: ')'",
			"expecting: ';'",
			"expecting: ')', '#', name",
			"expecting: ')', ',', '+', '-', '&', '|', '^'",
			"expecting: 'const', 'var', 'out', 'return', 'if', 'while', 'continue', 'break', '}', '#', name",
			"expecting: ';', '+', '-', '&', '|', '^'",
			"expecting: '{'",
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
			"expecting: ')', ','",
			"expecting: 'argc', 'argv', '(', ';', '@', '#', '+', '-', '~', '?', '!', name, integer",
			"expecting: '}'",
        };*/
    private static int[] errors;
/*      {
<<<<<<< HEAD
			0, 1, 2, 3, 3, 4, 5, 6, 5, 5, 4, 4, 4, 7, 8, 3, 3, 3, 3, 9, 9, 9, 9, 10, 9, 11, 11, 11, 3, 7, 12, 11, 12, 13, 14, 15, 6, 16, 4, 4, 12, 12, 12, 17, 18, 4, 19, 10, 9, 10, 12, 12, 12, 3, 16, 7, 18, 4, 4, 12, 20, 12, 12, 12, 12, 12, 21, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 12, 7, 12, 24, 12, 9, 14, 15, 13, 25, 25, 23, 23, 23, 26, 27, 28, 12, 29, 10, 9, 30, 30, 30, 31, 28, 16, 18, 28, 12, 23, 16, 32, 22, 22, 22, 17, 32, 26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 22, 22, 22, 22, 30, 15, 30, 33, 9, 19, 34, 28, 19, 28, 26, 19, 19, 9, 12, 35, 35, 26, 23, 36, 26, 26, 9, 29, 37, 29, 9, 9, 9, 38, 11, 31, 22, 23, 22, 31, 28, 16, 22, 28, 3, 22, 22, 9, 9, 39, 5, 31, 26, 26, 16, 29, 16, 34, 34, 19, 29, 19, 9, 29, 29, 27, 35, 9, 19, 29, 30, 29, 29, 9, 9, 29, 37, 38, 22, 38, 22, 31, 22, 40, 41, 37, 37, 31, 42, 9, 9, 31, 3, 37, 29, 34, 34, 29, 3, 37, 29, 29, 10, 37, 29, 9, 37, 29, 29, 36, 26, 26, 29, 29, 29, 29, 29, 29, 9, 38, 19, 41, 41, 40, 40, 42, 42, 3, 3, 37, 3, 37, 29, 3, 3, 37, 3, 37, 29, 10, 10, 37, 9, 9, 37, 10, 37, 29, 29, 30, 29, 29, 29, 29, 41, 41, 3, 3, 3, 37, 3, 3, 3, 37, 10, 9, 10, 10, 37, 29, 3, 3, 10, 
=======
			0, 1, 2, 3, 3, 4, 5, 6, 5, 5, 1, 1, 1, 6, 7, 3, 3, 3, 3, 8, 8, 8, 8, 9, 8, 10, 3, 6, 1, 1, 4, 5, 4, 4, 4, 4, 4, 11, 12, 13, 12, 12, 12, 12, 12, 4, 6, 10, 14, 15, 1, 1, 4, 4, 4, 16, 17, 9, 8, 9, 4, 3, 6, 14, 18, 4, 13, 12, 12, 16, 19, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 4, 4, 8, 20, 20, 13, 13, 13, 19, 21, 18, 1, 22, 9, 8, 23, 12, 13, 12, 12, 18, 3, 12, 12, 23, 23, 24, 25, 18, 24, 18, 19, 24, 24, 8, 4, 25, 25, 19, 4, 26, 19, 19, 8, 22, 27, 22, 8, 12, 12, 8, 8, 22, 6, 25, 25, 24, 22, 24, 8, 22, 22, 21, 25, 8, 13, 22, 23, 22, 22, 8, 8, 22, 27, 3, 27, 22, 25, 25, 22, 3, 27, 22, 22, 9, 27, 22, 8, 27, 22, 24, 26, 19, 19, 22, 22, 22, 22, 22, 22, 8, 3, 3, 27, 3, 27, 22, 3, 3, 27, 3, 27, 22, 9, 9, 27, 8, 8, 27, 22, 22, 23, 22, 22, 22, 22, 3, 3, 3, 27, 3, 3, 3, 27, 9, 8, 9, 27, 22, 22, 3, 3, 9, 9, 27, 9, 
>>>>>>> parent of 543a4da (Added array syntax to language spec and added "all" utility compiler mode)
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
