/* This file was generated by SableCC (http://www.sablecc.org/). */

package drlc.parser;

import drlc.lexer.*;
import drlc.node.*;
import drlc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PUnit node1 = (PUnit) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AUnit */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAsetup1Setup */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAsetup2Setup */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAdirective1Directive */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAdirective2Directive */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AFunctionDefinitionProgramSection */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ABasicSectionProgramSection */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariableDeclarationBasicSection */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AExpressionStatementBasicSection */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AConditionalSectionBasicSection */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AIterativeSectionBasicSection */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AGotoStatementBasicSection */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ASectionLabelBasicSection */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AAfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AAfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AAfunctiondefinition3FunctionDefinition */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAfunctiondefinition4FunctionDefinition */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAfunctiondefinition5FunctionDefinition */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AAfunctiondefinition6FunctionDefinition */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce AAfunctiondefinition7FunctionDefinition */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce AAfunctiondefinition8FunctionDefinition */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce AAexcludinginitializationvariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AAexcludinginitializationvariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AAincludinginitializationvariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AAincludinginitializationvariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list, false);
            }
            break;
            case 27: /* reduce ABasicInitializationExpression */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AArrayInitializationExpression */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AArrayFillInitializationExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce ABasicExpressionStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce AAssignmentExpressionStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list, false);
            }
            break;
            case 32: /* reduce AAconditionalsection1ConditionalSection */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AAconditionalsection2ConditionalSection */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list, false);
            }
            break;
            case 34: /* reduce AAconditionalsection3ConditionalSection */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list, false);
            }
            break;
            case 35: /* reduce AAconditionalsection4ConditionalSection */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list, false);
            }
            break;
            case 36: /* reduce AAconditionalsection5ConditionalSection */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list, false);
            }
            break;
            case 37: /* reduce AAconditionalsection6ConditionalSection */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list, false);
            }
            break;
            case 38: /* reduce AAconditionalsection7ConditionalSection */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list, false);
            }
            break;
            case 39: /* reduce AAconditionalsection8ConditionalSection */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list, false);
            }
            break;
            case 40: /* reduce AAexcludingbranchelsesection1ElseSection */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list, false);
            }
            break;
            case 41: /* reduce AAexcludingbranchelsesection2ElseSection */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list, false);
            }
            break;
            case 42: /* reduce AAexcludingbranchelsesection3ElseSection */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list, false);
            }
            break;
            case 43: /* reduce AAexcludingbranchelsesection4ElseSection */
            {
                ArrayList<Object> list = new43();
                push(goTo(11), list, false);
            }
            break;
            case 44: /* reduce AIncludingBranchElseSection */
            {
                ArrayList<Object> list = new44();
                push(goTo(11), list, false);
            }
            break;
            case 45: /* reduce AAloopiterativesection1IterativeSection */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list, false);
            }
            break;
            case 46: /* reduce AAloopiterativesection2IterativeSection */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list, false);
            }
            break;
            case 47: /* reduce AAloopiterativesection3IterativeSection */
            {
                ArrayList<Object> list = new47();
                push(goTo(12), list, false);
            }
            break;
            case 48: /* reduce AAloopiterativesection4IterativeSection */
            {
                ArrayList<Object> list = new48();
                push(goTo(12), list, false);
            }
            break;
            case 49: /* reduce AAconditionaliterativesection1IterativeSection */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list, false);
            }
            break;
            case 50: /* reduce AAconditionaliterativesection2IterativeSection */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list, false);
            }
            break;
            case 51: /* reduce AAconditionaliterativesection3IterativeSection */
            {
                ArrayList<Object> list = new51();
                push(goTo(12), list, false);
            }
            break;
            case 52: /* reduce AAconditionaliterativesection4IterativeSection */
            {
                ArrayList<Object> list = new52();
                push(goTo(12), list, false);
            }
            break;
            case 53: /* reduce AAdoconditionaliterativesection1IterativeSection */
            {
                ArrayList<Object> list = new53();
                push(goTo(12), list, false);
            }
            break;
            case 54: /* reduce AAdoconditionaliterativesection2IterativeSection */
            {
                ArrayList<Object> list = new54();
                push(goTo(12), list, false);
            }
            break;
            case 55: /* reduce AAdoconditionaliterativesection3IterativeSection */
            {
                ArrayList<Object> list = new55();
                push(goTo(12), list, false);
            }
            break;
            case 56: /* reduce AAdoconditionaliterativesection4IterativeSection */
            {
                ArrayList<Object> list = new56();
                push(goTo(12), list, false);
            }
            break;
            case 57: /* reduce AGotoStatement */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list, false);
            }
            break;
            case 58: /* reduce ASectionLabel */
            {
                ArrayList<Object> list = new58();
                push(goTo(14), list, false);
            }
            break;
            case 59: /* reduce AAexitstopstatement1StopStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(15), list, false);
            }
            break;
            case 60: /* reduce AAexitstopstatement2StopStatement */
            {
                ArrayList<Object> list = new60();
                push(goTo(15), list, false);
            }
            break;
            case 61: /* reduce AAreturnstopstatement1StopStatement */
            {
                ArrayList<Object> list = new61();
                push(goTo(15), list, false);
            }
            break;
            case 62: /* reduce AAreturnstopstatement2StopStatement */
            {
                ArrayList<Object> list = new62();
                push(goTo(15), list, false);
            }
            break;
            case 63: /* reduce AAcontinuestopstatement1StopStatement */
            {
                ArrayList<Object> list = new63();
                push(goTo(15), list, false);
            }
            break;
            case 64: /* reduce AAcontinuestopstatement2StopStatement */
            {
                ArrayList<Object> list = new64();
                push(goTo(15), list, false);
            }
            break;
            case 65: /* reduce AAbreakstopstatement1StopStatement */
            {
                ArrayList<Object> list = new65();
                push(goTo(15), list, false);
            }
            break;
            case 66: /* reduce AAbreakstopstatement2StopStatement */
            {
                ArrayList<Object> list = new66();
                push(goTo(15), list, false);
            }
            break;
            case 67: /* reduce AAexitexpressionstopstatement1StopStatement */
            {
                ArrayList<Object> list = new67();
                push(goTo(15), list, false);
            }
            break;
            case 68: /* reduce AAexitexpressionstopstatement2StopStatement */
            {
                ArrayList<Object> list = new68();
                push(goTo(15), list, false);
            }
            break;
            case 69: /* reduce AAreturnexpressionstopstatement1StopStatement */
            {
                ArrayList<Object> list = new69();
                push(goTo(15), list, false);
            }
            break;
            case 70: /* reduce AAreturnexpressionstopstatement2StopStatement */
            {
                ArrayList<Object> list = new70();
                push(goTo(15), list, false);
            }
            break;
            case 71: /* reduce ADead0DeadSection */
            {
                ArrayList<Object> list = new71();
                push(goTo(16), list, false);
            }
            break;
            case 72: /* reduce ADead1DeadSection */
            {
                ArrayList<Object> list = new72();
                push(goTo(16), list, false);
            }
            break;
            case 73: /* reduce ADead2DeadSection */
            {
                ArrayList<Object> list = new73();
                push(goTo(16), list, false);
            }
            break;
            case 74: /* reduce ADead3DeadSection */
            {
                ArrayList<Object> list = new74();
                push(goTo(16), list, false);
            }
            break;
            case 75: /* reduce ADead4DeadSection */
            {
                ArrayList<Object> list = new75();
                push(goTo(16), list, false);
            }
            break;
            case 76: /* reduce ADead5DeadSection */
            {
                ArrayList<Object> list = new76();
                push(goTo(16), list, false);
            }
            break;
            case 77: /* reduce ADead6DeadSection */
            {
                ArrayList<Object> list = new77();
                push(goTo(16), list, false);
            }
            break;
            case 78: /* reduce AAtype1Type */
            {
                ArrayList<Object> list = new78();
                push(goTo(17), list, false);
            }
            break;
            case 79: /* reduce AAtype2Type */
            {
                ArrayList<Object> list = new79();
                push(goTo(17), list, false);
            }
            break;
            case 80: /* reduce ABasicRawType */
            {
                ArrayList<Object> list = new80();
                push(goTo(18), list, false);
            }
            break;
            case 81: /* reduce AArrayRawType */
            {
                ArrayList<Object> list = new81();
                push(goTo(18), list, false);
            }
            break;
            case 82: /* reduce AAfunctionrawtype1RawType */
            {
                ArrayList<Object> list = new82();
                push(goTo(18), list, false);
            }
            break;
            case 83: /* reduce AAfunctionrawtype2RawType */
            {
                ArrayList<Object> list = new83();
                push(goTo(18), list, false);
            }
            break;
            case 84: /* reduce AArrayTypeTail */
            {
                ArrayList<Object> list = new84();
                push(goTo(19), list, false);
            }
            break;
            case 85: /* reduce AReturnType */
            {
                ArrayList<Object> list = new85();
                push(goTo(20), list, false);
            }
            break;
            case 86: /* reduce AAparparameterlist1ParParameterList */
            {
                ArrayList<Object> list = new86();
                push(goTo(21), list, false);
            }
            break;
            case 87: /* reduce AAparparameterlist2ParParameterList */
            {
                ArrayList<Object> list = new87();
                push(goTo(21), list, false);
            }
            break;
            case 88: /* reduce AAparameterlist1ParameterList */
            {
                ArrayList<Object> list = new88();
                push(goTo(22), list, false);
            }
            break;
            case 89: /* reduce AAparameterlist2ParameterList */
            {
                ArrayList<Object> list = new89();
                push(goTo(22), list, false);
            }
            break;
            case 90: /* reduce AAparameterlist3ParameterList */
            {
                ArrayList<Object> list = new90();
                push(goTo(22), list, false);
            }
            break;
            case 91: /* reduce AAparameterlist4ParameterList */
            {
                ArrayList<Object> list = new91();
                push(goTo(22), list, false);
            }
            break;
            case 92: /* reduce AAparameterlist5ParameterList */
            {
                ArrayList<Object> list = new92();
                push(goTo(22), list, false);
            }
            break;
            case 93: /* reduce AAparameterlist6ParameterList */
            {
                ArrayList<Object> list = new93();
                push(goTo(22), list, false);
            }
            break;
            case 94: /* reduce AAparameterlist7ParameterList */
            {
                ArrayList<Object> list = new94();
                push(goTo(22), list, false);
            }
            break;
            case 95: /* reduce AAparameterlist8ParameterList */
            {
                ArrayList<Object> list = new95();
                push(goTo(22), list, false);
            }
            break;
            case 96: /* reduce AAparameterlisttail1ParameterListTail */
            {
                ArrayList<Object> list = new96();
                push(goTo(23), list, false);
            }
            break;
            case 97: /* reduce AAparameterlisttail2ParameterListTail */
            {
                ArrayList<Object> list = new97();
                push(goTo(23), list, false);
            }
            break;
            case 98: /* reduce AExcludingIdentifierParameter */
            {
                ArrayList<Object> list = new98();
                push(goTo(24), list, false);
            }
            break;
            case 99: /* reduce AIncludingIdentifierParameter */
            {
                ArrayList<Object> list = new99();
                push(goTo(24), list, false);
            }
            break;
            case 100: /* reduce ADeclarator */
            {
                ArrayList<Object> list = new100();
                push(goTo(25), list, false);
            }
            break;
            case 101: /* reduce ANameIdentifier */
            {
                ArrayList<Object> list = new101();
                push(goTo(26), list, false);
            }
            break;
            case 102: /* reduce ADiscardIdentifier */
            {
                ArrayList<Object> list = new102();
                push(goTo(26), list, false);
            }
            break;
            case 103: /* reduce ATypeAnnotation */
            {
                ArrayList<Object> list = new103();
                push(goTo(27), list, false);
            }
            break;
            case 104: /* reduce AExpressionLvalue */
            {
                ArrayList<Object> list = new104();
                push(goTo(28), list, false);
            }
            break;
            case 105: /* reduce AExpressionRvalue */
            {
                ArrayList<Object> list = new105();
                push(goTo(29), list, false);
            }
            break;
            case 106: /* reduce APrioritizedExpression0 */
            {
                ArrayList<Object> list = new106();
                push(goTo(30), list, false);
            }
            break;
            case 107: /* reduce ABinaryExpression0 */
            {
                ArrayList<Object> list = new107();
                push(goTo(30), list, false);
            }
            break;
            case 108: /* reduce APrioritizedExpression1 */
            {
                ArrayList<Object> list = new108();
                push(goTo(31), list, false);
            }
            break;
            case 109: /* reduce ABinaryExpression1 */
            {
                ArrayList<Object> list = new109();
                push(goTo(31), list, false);
            }
            break;
            case 110: /* reduce APrioritizedExpression2 */
            {
                ArrayList<Object> list = new110();
                push(goTo(32), list, false);
            }
            break;
            case 111: /* reduce ABinaryExpression2 */
            {
                ArrayList<Object> list = new111();
                push(goTo(32), list, false);
            }
            break;
            case 112: /* reduce APrioritizedExpression3 */
            {
                ArrayList<Object> list = new112();
                push(goTo(33), list, false);
            }
            break;
            case 113: /* reduce ABinaryExpression3 */
            {
                ArrayList<Object> list = new113();
                push(goTo(33), list, false);
            }
            break;
            case 114: /* reduce APrioritizedExpression4 */
            {
                ArrayList<Object> list = new114();
                push(goTo(34), list, false);
            }
            break;
            case 115: /* reduce ABinaryExpression4 */
            {
                ArrayList<Object> list = new115();
                push(goTo(34), list, false);
            }
            break;
            case 116: /* reduce APrioritizedExpression5 */
            {
                ArrayList<Object> list = new116();
                push(goTo(35), list, false);
            }
            break;
            case 117: /* reduce ABinaryExpression5 */
            {
                ArrayList<Object> list = new117();
                push(goTo(35), list, false);
            }
            break;
            case 118: /* reduce APrioritizedExpression6 */
            {
                ArrayList<Object> list = new118();
                push(goTo(36), list, false);
            }
            break;
            case 119: /* reduce AUnaryExpression6 */
            {
                ArrayList<Object> list = new119();
                push(goTo(36), list, false);
            }
            break;
            case 120: /* reduce ADereferenceExpression6 */
            {
                ArrayList<Object> list = new120();
                push(goTo(36), list, false);
            }
            break;
            case 121: /* reduce AAddressOfExpression6 */
            {
                ArrayList<Object> list = new121();
                push(goTo(36), list, false);
            }
            break;
            case 122: /* reduce APrioritizedExpression7 */
            {
                ArrayList<Object> list = new122();
                push(goTo(37), list, false);
            }
            break;
            case 123: /* reduce AIndexExpression7 */
            {
                ArrayList<Object> list = new123();
                push(goTo(37), list, false);
            }
            break;
            case 124: /* reduce AFunctionExpression7 */
            {
                ArrayList<Object> list = new124();
                push(goTo(37), list, false);
            }
            break;
            case 125: /* reduce AAbracketexpression1BracketExpression */
            {
                ArrayList<Object> list = new125();
                push(goTo(38), list, false);
            }
            break;
            case 126: /* reduce AAbracketexpression2BracketExpression */
            {
                ArrayList<Object> list = new126();
                push(goTo(38), list, false);
            }
            break;
            case 127: /* reduce AAbracketexpressionlist1BracketExpressionList */
            {
                ArrayList<Object> list = new127();
                push(goTo(39), list, false);
            }
            break;
            case 128: /* reduce AAbracketexpressionlist2BracketExpressionList */
            {
                ArrayList<Object> list = new128();
                push(goTo(39), list, false);
            }
            break;
            case 129: /* reduce AAparexpressionlist1ParExpressionList */
            {
                ArrayList<Object> list = new129();
                push(goTo(40), list, false);
            }
            break;
            case 130: /* reduce AAparexpressionlist2ParExpressionList */
            {
                ArrayList<Object> list = new130();
                push(goTo(40), list, false);
            }
            break;
            case 131: /* reduce AAexpressionlist1ExpressionList */
            {
                ArrayList<Object> list = new131();
                push(goTo(41), list, false);
            }
            break;
            case 132: /* reduce AAexpressionlist2ExpressionList */
            {
                ArrayList<Object> list = new132();
                push(goTo(41), list, false);
            }
            break;
            case 133: /* reduce AAexpressionlist3ExpressionList */
            {
                ArrayList<Object> list = new133();
                push(goTo(41), list, false);
            }
            break;
            case 134: /* reduce AAexpressionlist4ExpressionList */
            {
                ArrayList<Object> list = new134();
                push(goTo(41), list, false);
            }
            break;
            case 135: /* reduce AExpressionListTail */
            {
                ArrayList<Object> list = new135();
                push(goTo(42), list, false);
            }
            break;
            case 136: /* reduce AValueExpression8 */
            {
                ArrayList<Object> list = new136();
                push(goTo(43), list, false);
            }
            break;
            case 137: /* reduce AVariableExpression8 */
            {
                ArrayList<Object> list = new137();
                push(goTo(43), list, false);
            }
            break;
            case 138: /* reduce AParenthesesExpression8 */
            {
                ArrayList<Object> list = new138();
                push(goTo(43), list, false);
            }
            break;
            case 139: /* reduce ABoolValue */
            {
                ArrayList<Object> list = new139();
                push(goTo(44), list, false);
            }
            break;
            case 140: /* reduce AIntValue */
            {
                ArrayList<Object> list = new140();
                push(goTo(44), list, false);
            }
            break;
            case 141: /* reduce ANatValue */
            {
                ArrayList<Object> list = new141();
                push(goTo(44), list, false);
            }
            break;
            case 142: /* reduce ACharValue */
            {
                ArrayList<Object> list = new142();
                push(goTo(44), list, false);
            }
            break;
            case 143: /* reduce ANullValue */
            {
                ArrayList<Object> list = new143();
                push(goTo(44), list, false);
            }
            break;
            case 144: /* reduce ASizeofValue */
            {
                ArrayList<Object> list = new144();
                push(goTo(44), list, false);
            }
            break;
            case 145: /* reduce AEqualsAssignmentOp */
            {
                ArrayList<Object> list = new145();
                push(goTo(45), list, false);
            }
            break;
            case 146: /* reduce ALogicalAndAssignmentOp */
            {
                ArrayList<Object> list = new146();
                push(goTo(45), list, false);
            }
            break;
            case 147: /* reduce ALogicalOrAssignmentOp */
            {
                ArrayList<Object> list = new147();
                push(goTo(45), list, false);
            }
            break;
            case 148: /* reduce APlusAssignmentOp */
            {
                ArrayList<Object> list = new148();
                push(goTo(45), list, false);
            }
            break;
            case 149: /* reduce AAndAssignmentOp */
            {
                ArrayList<Object> list = new149();
                push(goTo(45), list, false);
            }
            break;
            case 150: /* reduce AOrAssignmentOp */
            {
                ArrayList<Object> list = new150();
                push(goTo(45), list, false);
            }
            break;
            case 151: /* reduce AXorAssignmentOp */
            {
                ArrayList<Object> list = new151();
                push(goTo(45), list, false);
            }
            break;
            case 152: /* reduce AMinusAssignmentOp */
            {
                ArrayList<Object> list = new152();
                push(goTo(45), list, false);
            }
            break;
            case 153: /* reduce ALeftShiftAssignmentOp */
            {
                ArrayList<Object> list = new153();
                push(goTo(45), list, false);
            }
            break;
            case 154: /* reduce ARightShiftAssignmentOp */
            {
                ArrayList<Object> list = new154();
                push(goTo(45), list, false);
            }
            break;
            case 155: /* reduce ALeftRotateAssignmentOp */
            {
                ArrayList<Object> list = new155();
                push(goTo(45), list, false);
            }
            break;
            case 156: /* reduce ARightRotateAssignmentOp */
            {
                ArrayList<Object> list = new156();
                push(goTo(45), list, false);
            }
            break;
            case 157: /* reduce AMultiplyAssignmentOp */
            {
                ArrayList<Object> list = new157();
                push(goTo(45), list, false);
            }
            break;
            case 158: /* reduce ADivideAssignmentOp */
            {
                ArrayList<Object> list = new158();
                push(goTo(45), list, false);
            }
            break;
            case 159: /* reduce ARemainderAssignmentOp */
            {
                ArrayList<Object> list = new159();
                push(goTo(45), list, false);
            }
            break;
            case 160: /* reduce ALogicalAndLogicalBinaryOp */
            {
                ArrayList<Object> list = new160();
                push(goTo(46), list, false);
            }
            break;
            case 161: /* reduce ALogicalOrLogicalBinaryOp */
            {
                ArrayList<Object> list = new161();
                push(goTo(46), list, false);
            }
            break;
            case 162: /* reduce AEqualToEqualityBinaryOp */
            {
                ArrayList<Object> list = new162();
                push(goTo(47), list, false);
            }
            break;
            case 163: /* reduce ANotEqualToEqualityBinaryOp */
            {
                ArrayList<Object> list = new163();
                push(goTo(47), list, false);
            }
            break;
            case 164: /* reduce ALessThanComparativeBinaryOp */
            {
                ArrayList<Object> list = new164();
                push(goTo(48), list, false);
            }
            break;
            case 165: /* reduce ALessOrEqualComparativeBinaryOp */
            {
                ArrayList<Object> list = new165();
                push(goTo(48), list, false);
            }
            break;
            case 166: /* reduce AMoreThanComparativeBinaryOp */
            {
                ArrayList<Object> list = new166();
                push(goTo(48), list, false);
            }
            break;
            case 167: /* reduce AMoreOrEqualComparativeBinaryOp */
            {
                ArrayList<Object> list = new167();
                push(goTo(48), list, false);
            }
            break;
            case 168: /* reduce APlusAdditiveBinaryOp */
            {
                ArrayList<Object> list = new168();
                push(goTo(49), list, false);
            }
            break;
            case 169: /* reduce AAndAdditiveBinaryOp */
            {
                ArrayList<Object> list = new169();
                push(goTo(49), list, false);
            }
            break;
            case 170: /* reduce AOrAdditiveBinaryOp */
            {
                ArrayList<Object> list = new170();
                push(goTo(49), list, false);
            }
            break;
            case 171: /* reduce AXorAdditiveBinaryOp */
            {
                ArrayList<Object> list = new171();
                push(goTo(49), list, false);
            }
            break;
            case 172: /* reduce AMinusAdditiveBinaryOp */
            {
                ArrayList<Object> list = new172();
                push(goTo(49), list, false);
            }
            break;
            case 173: /* reduce ALeftShiftShiftBinaryOp */
            {
                ArrayList<Object> list = new173();
                push(goTo(50), list, false);
            }
            break;
            case 174: /* reduce ARightShiftShiftBinaryOp */
            {
                ArrayList<Object> list = new174();
                push(goTo(50), list, false);
            }
            break;
            case 175: /* reduce ALeftRotateShiftBinaryOp */
            {
                ArrayList<Object> list = new175();
                push(goTo(50), list, false);
            }
            break;
            case 176: /* reduce ARightRotateShiftBinaryOp */
            {
                ArrayList<Object> list = new176();
                push(goTo(50), list, false);
            }
            break;
            case 177: /* reduce AMultiplyMultiplicativeBinaryOp */
            {
                ArrayList<Object> list = new177();
                push(goTo(51), list, false);
            }
            break;
            case 178: /* reduce ADivideMultiplicativeBinaryOp */
            {
                ArrayList<Object> list = new178();
                push(goTo(51), list, false);
            }
            break;
            case 179: /* reduce ARemainderMultiplicativeBinaryOp */
            {
                ArrayList<Object> list = new179();
                push(goTo(51), list, false);
            }
            break;
            case 180: /* reduce AMinusUnaryOp */
            {
                ArrayList<Object> list = new180();
                push(goTo(52), list, false);
            }
            break;
            case 181: /* reduce ANotUnaryOp */
            {
                ArrayList<Object> list = new181();
                push(goTo(52), list, false);
            }
            break;
            case 182: /* reduce ATerminal$Directive */
            {
                ArrayList<Object> list = new182();
                push(goTo(53), list, true);
            }
            break;
            case 183: /* reduce ANonTerminal$Directive */
            {
                ArrayList<Object> list = new183();
                push(goTo(53), list, true);
            }
            break;
            case 184: /* reduce ATerminal$ProgramSection */
            {
                ArrayList<Object> list = new184();
                push(goTo(54), list, true);
            }
            break;
            case 185: /* reduce ANonTerminal$ProgramSection */
            {
                ArrayList<Object> list = new185();
                push(goTo(54), list, true);
            }
            break;
            case 186: /* reduce ATerminal$Semicolon */
            {
                ArrayList<Object> list = new186();
                push(goTo(55), list, true);
            }
            break;
            case 187: /* reduce ANonTerminal$Semicolon */
            {
                ArrayList<Object> list = new187();
                push(goTo(55), list, true);
            }
            break;
            case 188: /* reduce ATerminal$BasicSection */
            {
                ArrayList<Object> list = new188();
                push(goTo(56), list, true);
            }
            break;
            case 189: /* reduce ANonTerminal$BasicSection */
            {
                ArrayList<Object> list = new189();
                push(goTo(56), list, true);
            }
            break;
            case 190: /* reduce ATerminal$VariableModifier */
            {
                ArrayList<Object> list = new190();
                push(goTo(57), list, true);
            }
            break;
            case 191: /* reduce ANonTerminal$VariableModifier */
            {
                ArrayList<Object> list = new191();
                push(goTo(57), list, true);
            }
            break;
            case 192: /* reduce ATerminal$DeadSection */
            {
                ArrayList<Object> list = new192();
                push(goTo(58), list, true);
            }
            break;
            case 193: /* reduce ANonTerminal$DeadSection */
            {
                ArrayList<Object> list = new193();
                push(goTo(58), list, true);
            }
            break;
            case 194: /* reduce ATerminal$And */
            {
                ArrayList<Object> list = new194();
                push(goTo(59), list, true);
            }
            break;
            case 195: /* reduce ANonTerminal$And */
            {
                ArrayList<Object> list = new195();
                push(goTo(59), list, true);
            }
            break;
            case 196: /* reduce ATerminal$ParameterListTail */
            {
                ArrayList<Object> list = new196();
                push(goTo(60), list, true);
            }
            break;
            case 197: /* reduce ANonTerminal$ParameterListTail */
            {
                ArrayList<Object> list = new197();
                push(goTo(60), list, true);
            }
            break;
            case 198: /* reduce ATerminal$ExpressionListTail */
            {
                ArrayList<Object> list = new198();
                push(goTo(61), list, true);
            }
            break;
            case 199: /* reduce ANonTerminal$ExpressionListTail */
            {
                ArrayList<Object> list = new199();
                push(goTo(61), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnit punitNode1;
        {
            // Block
        PSetup psetupNode2;
        PProgram pprogramNode3;
        psetupNode2 = (PSetup)nodeArrayList1.get(0);
        pprogramNode3 = (PProgram)nodeArrayList2.get(0);

        punitNode1 = new AUnit(psetupNode2, pprogramNode3);
        }
	nodeList.add(punitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAsetup1Setup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSetup psetupNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        psetupNode1 = new ASetup(listNode2);
        }
	nodeList.add(psetupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAsetup2Setup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetup psetupNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        psetupNode1 = new ASetup(listNode3);
        }
	nodeList.add(psetupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdirective1Directive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirective pdirectiveNode1;
        {
            // Block
        TDirectivePrefix tdirectiveprefixNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tdirectiveprefixNode2 = (TDirectivePrefix)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdirectiveNode1 = new ADirective(tdirectiveprefixNode2, tnameNode3, null, listNode6);
        }
	nodeList.add(pdirectiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdirective2Directive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirective pdirectiveNode1;
        {
            // Block
        TDirectivePrefix tdirectiveprefixNode2;
        TName tnameNode3;
        PExpressionList pexpressionlistNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tdirectiveprefixNode2 = (TDirectivePrefix)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pexpressionlistNode4 = (PExpressionList)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdirectiveNode1 = new ADirective(tdirectiveprefixNode2, tnameNode3, pexpressionlistNode4, listNode6);
        }
	nodeList.add(pdirectiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AFunctionDefinitionProgramSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramSection pprogramsectionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pprogramsectionNode1 = new AFunctionDefinitionProgramSection(pfunctiondefinitionNode2);
        }
	nodeList.add(pprogramsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABasicSectionProgramSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramSection pprogramsectionNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pprogramsectionNode1 = new ABasicSectionProgramSection(pbasicsectionNode2);
        }
	nodeList.add(pprogramsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDeclarationBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AVariableDeclarationBasicSection(pvariabledeclarationNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExpressionStatementBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PExpressionStatement pexpressionstatementNode2;
        pexpressionstatementNode2 = (PExpressionStatement)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AExpressionStatementBasicSection(pexpressionstatementNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AConditionalSectionBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PConditionalSection pconditionalsectionNode2;
        pconditionalsectionNode2 = (PConditionalSection)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AConditionalSectionBasicSection(pconditionalsectionNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIterativeSectionBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PIterativeSection piterativesectionNode2;
        piterativesectionNode2 = (PIterativeSection)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AIterativeSectionBasicSection(piterativesectionNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AGotoStatementBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PGotoStatement pgotostatementNode2;
        pgotostatementNode2 = (PGotoStatement)nodeArrayList1.get(0);

        pbasicsectionNode1 = new AGotoStatementBasicSection(pgotostatementNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASectionLabelBasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicSection pbasicsectionNode1;
        {
            // Block
        PSectionLabel psectionlabelNode2;
        psectionlabelNode2 = (PSectionLabel)nodeArrayList1.get(0);

        pbasicsectionNode1 = new ASectionLabelBasicSection(psectionlabelNode2);
        }
	nodeList.add(pbasicsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList4.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList5.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, null, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        PReturnType preturntypeNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRBrace trbraceNode9;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        preturntypeNode5 = (PReturnType)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, preturntypeNode5, tlbraceNode6, listNode7, null, trbraceNode9);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAfunctiondefinition3FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, null, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfunctiondefinition4FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        PReturnType preturntypeNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRBrace trbraceNode10;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        preturntypeNode5 = (PReturnType)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, preturntypeNode5, tlbraceNode6, listNode8, null, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAfunctiondefinition5FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList4.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList5.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, null, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAfunctiondefinition6FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        PReturnType preturntypeNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStopStatement pstopstatementNode8;
        TRBrace trbraceNode9;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        preturntypeNode5 = (PReturnType)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pstopstatementNode8 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, preturntypeNode5, tlbraceNode6, listNode7, pstopstatementNode8, trbraceNode9);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAfunctiondefinition7FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList6.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, null, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAfunctiondefinition8FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        TFn tfnNode2;
        TName tnameNode3;
        PParParameterList pparparameterlistNode4;
        PReturnType preturntypeNode5;
        TLBrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStopStatement pstopstatementNode9;
        TRBrace trbraceNode10;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pparparameterlistNode4 = (PParParameterList)nodeArrayList3.get(0);
        preturntypeNode5 = (PReturnType)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pstopstatementNode9 = (PStopStatement)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(tfnNode2, tnameNode3, pparparameterlistNode4, preturntypeNode5, tlbraceNode6, listNode8, pstopstatementNode9, trbraceNode10);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAexcludinginitializationvariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TVar tvarNode3;
        PDeclarator pdeclaratorNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        tvarNode3 = (TVar)nodeArrayList1.get(0);
        pdeclaratorNode4 = (PDeclarator)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvariabledeclarationNode1 = new AExcludingInitializationVariableDeclaration(listNode2, tvarNode3, pdeclaratorNode4, listNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAexcludinginitializationvariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TVar tvarNode4;
        PDeclarator pdeclaratorNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tvarNode4 = (TVar)nodeArrayList2.get(0);
        pdeclaratorNode5 = (PDeclarator)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pvariabledeclarationNode1 = new AExcludingInitializationVariableDeclaration(listNode3, tvarNode4, pdeclaratorNode5, listNode7);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAincludinginitializationvariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TVar tvarNode3;
        PDeclarator pdeclaratorNode4;
        TEquals tequalsNode5;
        PInitializationExpression pinitializationexpressionNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        }
        tvarNode3 = (TVar)nodeArrayList1.get(0);
        pdeclaratorNode4 = (PDeclarator)nodeArrayList2.get(0);
        tequalsNode5 = (TEquals)nodeArrayList3.get(0);
        pinitializationexpressionNode6 = (PInitializationExpression)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pvariabledeclarationNode1 = new AIncludingInitializationVariableDeclaration(listNode2, tvarNode3, pdeclaratorNode4, tequalsNode5, pinitializationexpressionNode6, listNode8);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAincludinginitializationvariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TVar tvarNode4;
        PDeclarator pdeclaratorNode5;
        TEquals tequalsNode6;
        PInitializationExpression pinitializationexpressionNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tvarNode4 = (TVar)nodeArrayList2.get(0);
        pdeclaratorNode5 = (PDeclarator)nodeArrayList3.get(0);
        tequalsNode6 = (TEquals)nodeArrayList4.get(0);
        pinitializationexpressionNode7 = (PInitializationExpression)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pvariabledeclarationNode1 = new AIncludingInitializationVariableDeclaration(listNode3, tvarNode4, pdeclaratorNode5, tequalsNode6, pinitializationexpressionNode7, listNode9);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABasicInitializationExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializationExpression pinitializationexpressionNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);

        pinitializationexpressionNode1 = new ABasicInitializationExpression(pexpressionrvalueNode2);
        }
	nodeList.add(pinitializationexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AArrayInitializationExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializationExpression pinitializationexpressionNode1;
        {
            // Block
        PBracketExpressionList pbracketexpressionlistNode2;
        pbracketexpressionlistNode2 = (PBracketExpressionList)nodeArrayList1.get(0);

        pinitializationexpressionNode1 = new AArrayInitializationExpression(pbracketexpressionlistNode2);
        }
	nodeList.add(pinitializationexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AArrayFillInitializationExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializationExpression pinitializationexpressionNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        PArrayTypeTail parraytypetailNode4;
        TRBracket trbracketNode5;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        parraytypetailNode4 = (PArrayTypeTail)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pinitializationexpressionNode1 = new AArrayFillInitializationExpression(tlbracketNode2, pexpressionrvalueNode3, parraytypetailNode4, trbracketNode5);
        }
	nodeList.add(pinitializationexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABasicExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionstatementNode1 = new ABasicExpressionStatement(pexpressionrvalueNode2, listNode4);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAssignmentExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        PExpressionLvalue pexpressionlvalueNode2;
        PAssignmentOp passignmentopNode3;
        PExpressionRvalue pexpressionrvalueNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpressionlvalueNode2 = (PExpressionLvalue)nodeArrayList1.get(0);
        passignmentopNode3 = (PAssignmentOp)nodeArrayList2.get(0);
        pexpressionrvalueNode4 = (PExpressionRvalue)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexpressionstatementNode1 = new AAssignmentExpressionStatement(pexpressionlvalueNode2, passignmentopNode3, pexpressionrvalueNode4, listNode6);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAconditionalsection1ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, null, trbraceNode7, null);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAconditionalsection2ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TRBrace trbraceNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbraceNode8 = (TRBrace)nodeArrayList5.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, null, trbraceNode8, null);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAconditionalsection3ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, pstopstatementNode6, trbraceNode7, null);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAconditionalsection4ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStopStatement pstopstatementNode7;
        TRBrace trbraceNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstopstatementNode7 = (PStopStatement)nodeArrayList5.get(0);
        trbraceNode8 = (TRBrace)nodeArrayList6.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, pstopstatementNode7, trbraceNode8, null);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAconditionalsection5ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        PElseSection pelsesectionNode8;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);
        pelsesectionNode8 = (PElseSection)nodeArrayList5.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, null, trbraceNode7, pelsesectionNode8);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAconditionalsection6ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TRBrace trbraceNode8;
        PElseSection pelsesectionNode9;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbraceNode8 = (TRBrace)nodeArrayList5.get(0);
        pelsesectionNode9 = (PElseSection)nodeArrayList6.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, null, trbraceNode8, pelsesectionNode9);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAconditionalsection7ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        PElseSection pelsesectionNode8;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);
        pelsesectionNode8 = (PElseSection)nodeArrayList6.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, pstopstatementNode6, trbraceNode7, pelsesectionNode8);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAconditionalsection8ConditionalSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalSection pconditionalsectionNode1;
        {
            // Block
        TConditionalBranchSectionKeyword tconditionalbranchsectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStopStatement pstopstatementNode7;
        TRBrace trbraceNode8;
        PElseSection pelsesectionNode9;
        tconditionalbranchsectionkeywordNode2 = (TConditionalBranchSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstopstatementNode7 = (PStopStatement)nodeArrayList5.get(0);
        trbraceNode8 = (TRBrace)nodeArrayList6.get(0);
        pelsesectionNode9 = (PElseSection)nodeArrayList7.get(0);

        pconditionalsectionNode1 = new AConditionalSection(tconditionalbranchsectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, pstopstatementNode7, trbraceNode8, pelsesectionNode9);
        }
	nodeList.add(pconditionalsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAexcludingbranchelsesection1ElseSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseSection pelsesectionNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pelsesectionNode1 = new AExcludingBranchElseSection(telseNode2, tlbraceNode3, listNode4, null, trbraceNode6);
        }
	nodeList.add(pelsesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAexcludingbranchelsesection2ElseSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseSection pelsesectionNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pelsesectionNode1 = new AExcludingBranchElseSection(telseNode2, tlbraceNode3, listNode5, null, trbraceNode7);
        }
	nodeList.add(pelsesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAexcludingbranchelsesection3ElseSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseSection pelsesectionNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pelsesectionNode1 = new AExcludingBranchElseSection(telseNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pelsesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAexcludingbranchelsesection4ElseSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseSection pelsesectionNode1;
        {
            // Block
        TElse telseNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pelsesectionNode1 = new AExcludingBranchElseSection(telseNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(pelsesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIncludingBranchElseSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseSection pelsesectionNode1;
        {
            // Block
        TElse telseNode2;
        PConditionalSection pconditionalsectionNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pconditionalsectionNode3 = (PConditionalSection)nodeArrayList2.get(0);

        pelsesectionNode1 = new AIncludingBranchElseSection(telseNode2, pconditionalsectionNode3);
        }
	nodeList.add(pelsesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAloopiterativesection1IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TLoop tloopNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        piterativesectionNode1 = new ALoopIterativeSection(tloopNode2, tlbraceNode3, listNode4, null, trbraceNode6);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAloopiterativesection2IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TLoop tloopNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        piterativesectionNode1 = new ALoopIterativeSection(tloopNode2, tlbraceNode3, listNode5, null, trbraceNode7);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAloopiterativesection3IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TLoop tloopNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        piterativesectionNode1 = new ALoopIterativeSection(tloopNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAloopiterativesection4IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TLoop tloopNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        piterativesectionNode1 = new ALoopIterativeSection(tloopNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAconditionaliterativesection1IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        tconditionaliterativesectionkeywordNode2 = (TConditionalIterativeSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        piterativesectionNode1 = new AConditionalIterativeSection(tconditionaliterativesectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, null, trbraceNode7);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAconditionaliterativesection2IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TRBrace trbraceNode8;
        tconditionaliterativesectionkeywordNode2 = (TConditionalIterativeSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbraceNode8 = (TRBrace)nodeArrayList5.get(0);

        piterativesectionNode1 = new AConditionalIterativeSection(tconditionaliterativesectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, null, trbraceNode8);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAconditionaliterativesection3IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        tconditionaliterativesectionkeywordNode2 = (TConditionalIterativeSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        piterativesectionNode1 = new AConditionalIterativeSection(tconditionaliterativesectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode5, pstopstatementNode6, trbraceNode7);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAconditionaliterativesection4IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TLBrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStopStatement pstopstatementNode7;
        TRBrace trbraceNode8;
        tconditionaliterativesectionkeywordNode2 = (TConditionalIterativeSectionKeyword)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstopstatementNode7 = (PStopStatement)nodeArrayList5.get(0);
        trbraceNode8 = (TRBrace)nodeArrayList6.get(0);

        piterativesectionNode1 = new AConditionalIterativeSection(tconditionaliterativesectionkeywordNode2, pexpressionrvalueNode3, tlbraceNode4, listNode6, pstopstatementNode7, trbraceNode8);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAdoconditionaliterativesection1IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TDo tdoNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode7;
        PExpressionRvalue pexpressionrvalueNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);
        tconditionaliterativesectionkeywordNode7 = (TConditionalIterativeSectionKeyword)nodeArrayList4.get(0);
        pexpressionrvalueNode8 = (PExpressionRvalue)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        piterativesectionNode1 = new ADoConditionalIterativeSection(tdoNode2, tlbraceNode3, listNode4, null, trbraceNode6, tconditionaliterativesectionkeywordNode7, pexpressionrvalueNode8, listNode10);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAdoconditionaliterativesection2IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TDo tdoNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRBrace trbraceNode7;
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode8;
        PExpressionRvalue pexpressionrvalueNode9;
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);
        tconditionaliterativesectionkeywordNode8 = (TConditionalIterativeSectionKeyword)nodeArrayList5.get(0);
        pexpressionrvalueNode9 = (PExpressionRvalue)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        piterativesectionNode1 = new ADoConditionalIterativeSection(tdoNode2, tlbraceNode3, listNode5, null, trbraceNode7, tconditionaliterativesectionkeywordNode8, pexpressionrvalueNode9, listNode11);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAdoconditionaliterativesection3IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TDo tdoNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode7;
        PExpressionRvalue pexpressionrvalueNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);
        tconditionaliterativesectionkeywordNode7 = (TConditionalIterativeSectionKeyword)nodeArrayList5.get(0);
        pexpressionrvalueNode8 = (PExpressionRvalue)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        piterativesectionNode1 = new ADoConditionalIterativeSection(tdoNode2, tlbraceNode3, listNode4, pstopstatementNode5, trbraceNode6, tconditionaliterativesectionkeywordNode7, pexpressionrvalueNode8, listNode10);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAdoconditionaliterativesection4IterativeSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterativeSection piterativesectionNode1;
        {
            // Block
        TDo tdoNode2;
        TLBrace tlbraceNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PStopStatement pstopstatementNode6;
        TRBrace trbraceNode7;
        TConditionalIterativeSectionKeyword tconditionaliterativesectionkeywordNode8;
        PExpressionRvalue pexpressionrvalueNode9;
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pstopstatementNode6 = (PStopStatement)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);
        tconditionaliterativesectionkeywordNode8 = (TConditionalIterativeSectionKeyword)nodeArrayList6.get(0);
        pexpressionrvalueNode9 = (PExpressionRvalue)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        piterativesectionNode1 = new ADoConditionalIterativeSection(tdoNode2, tlbraceNode3, listNode5, pstopstatementNode6, trbraceNode7, tconditionaliterativesectionkeywordNode8, pexpressionrvalueNode9, listNode11);
        }
	nodeList.add(piterativesectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AGotoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGotoStatement pgotostatementNode1;
        {
            // Block
        TGoto tgotoNode2;
        TName tnameNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tgotoNode2 = (TGoto)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pgotostatementNode1 = new AGotoStatement(tgotoNode2, tnameNode3, listNode5);
        }
	nodeList.add(pgotostatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASectionLabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSectionLabel psectionlabelNode1;
        {
            // Block
        TName tnameNode2;
        TColon tcolonNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);

        psectionlabelNode1 = new ASectionLabel(tnameNode2, tcolonNode3);
        }
	nodeList.add(psectionlabelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAexitstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TExit texitNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new AExitStopStatement(texitNode2, listNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAexitstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TExit texitNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AExitStopStatement(texitNode2, listNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAreturnstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, listNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAreturnstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, listNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAcontinuestopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, listNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAcontinuestopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TContinue tcontinueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new AContinueStopStatement(tcontinueNode2, listNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAbreakstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, listNode4, listNode5);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAbreakstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstopstatementNode1 = new ABreakStopStatement(tbreakNode2, listNode4, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAexitexpressionstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TExit texitNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new AExitExpressionStopStatement(texitNode2, pexpressionrvalueNode3, listNode5, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAexitexpressionstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TExit texitNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstopstatementNode1 = new AExitExpressionStopStatement(texitNode2, pexpressionrvalueNode3, listNode5, listNode7);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAreturnexpressionstopstatement1StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionrvalueNode3, listNode5, listNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAreturnexpressionstopstatement2StopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstopstatementNode1 = new AReturnExpressionStopStatement(treturnNode2, pexpressionrvalueNode3, listNode5, listNode7);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ADead0DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        PBasicSection pbasicsectionNode2;
        pbasicsectionNode2 = (PBasicSection)nodeArrayList1.get(0);

        pdeadsectionNode1 = new ADead0DeadSection(pbasicsectionNode2);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ADead1DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TExit texitNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeadsectionNode1 = new ADead1DeadSection(texitNode2, listNode4);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADead2DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TReturn treturnNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeadsectionNode1 = new ADead2DeadSection(treturnNode2, listNode4);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADead3DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TContinue tcontinueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tcontinueNode2 = (TContinue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeadsectionNode1 = new ADead3DeadSection(tcontinueNode2, listNode4);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ADead4DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TBreak tbreakNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeadsectionNode1 = new ADead4DeadSection(tbreakNode2, listNode4);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ADead5DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TExit texitNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        texitNode2 = (TExit)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdeadsectionNode1 = new ADead5DeadSection(texitNode2, pexpressionrvalueNode3, listNode5);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ADead6DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeadSection pdeadsectionNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdeadsectionNode1 = new ADead6DeadSection(treturnNode2, pexpressionrvalueNode3, listNode5);
        }
	nodeList.add(pdeadsectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PRawType prawtypeNode3;
        {
            // Block
        }
        prawtypeNode3 = (PRawType)nodeArrayList1.get(0);

        ptypeNode1 = new AType(listNode2, prawtypeNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PRawType prawtypeNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        prawtypeNode4 = (PRawType)nodeArrayList2.get(0);

        ptypeNode1 = new AType(listNode3, prawtypeNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ABasicRawType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRawType prawtypeNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        prawtypeNode1 = new ABasicRawType(tnameNode2);
        }
	nodeList.add(prawtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AArrayRawType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRawType prawtypeNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PType ptypeNode3;
        PArrayTypeTail parraytypetailNode4;
        TRBracket trbracketNode5;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        parraytypetailNode4 = (PArrayTypeTail)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        prawtypeNode1 = new AArrayRawType(tlbracketNode2, ptypeNode3, parraytypetailNode4, trbracketNode5);
        }
	nodeList.add(prawtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAfunctionrawtype1RawType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRawType prawtypeNode1;
        {
            // Block
        TFn tfnNode2;
        PParParameterList pparparameterlistNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        pparparameterlistNode3 = (PParParameterList)nodeArrayList2.get(0);

        prawtypeNode1 = new AFunctionRawType(tfnNode2, pparparameterlistNode3, null);
        }
	nodeList.add(prawtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAfunctionrawtype2RawType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRawType prawtypeNode1;
        {
            // Block
        TFn tfnNode2;
        PParParameterList pparparameterlistNode3;
        PReturnType preturntypeNode4;
        tfnNode2 = (TFn)nodeArrayList1.get(0);
        pparparameterlistNode3 = (PParParameterList)nodeArrayList2.get(0);
        preturntypeNode4 = (PReturnType)nodeArrayList3.get(0);

        prawtypeNode1 = new AFunctionRawType(tfnNode2, pparparameterlistNode3, preturntypeNode4);
        }
	nodeList.add(prawtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AArrayTypeTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayTypeTail parraytypetailNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);

        parraytypetailNode1 = new AArrayTypeTail(tsemicolonNode2, pexpressionrvalueNode3);
        }
	nodeList.add(parraytypetailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TArrow tarrowNode2;
        PType ptypeNode3;
        tarrowNode2 = (TArrow)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        preturntypeNode1 = new AReturnType(tarrowNode2, ptypeNode3);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAparparameterlist1ParParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParParameterList pparparameterlistNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode4 = (TRPar)nodeArrayList2.get(0);

        pparparameterlistNode1 = new AParParameterList(tlparNode2, null, trparNode4);
        }
	nodeList.add(pparparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAparparameterlist2ParParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParParameterList pparparameterlistNode1;
        {
            // Block
        TLPar tlparNode2;
        PParameterList pparameterlistNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pparameterlistNode3 = (PParameterList)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparparameterlistNode1 = new AParParameterList(tlparNode2, pparameterlistNode3, trparNode4);
        }
	nodeList.add(pparparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PParameter pparameterNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        {
            // Block
        }
        pparameterNode3 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(listNode2, pparameterNode3, listNode4, null);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(listNode3, pparameterNode4, listNode5, null);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAparameterlist3ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PParameter pparameterNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        {
            // Block
        }
        pparameterNode3 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparameterlistNode1 = new AParameterList(listNode2, pparameterNode3, listNode5, null);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AAparameterlist4ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pparameterlistNode1 = new AParameterList(listNode3, pparameterNode4, listNode6, null);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AAparameterlist5ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PParameter pparameterNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TComma tcommaNode5;
        {
            // Block
        }
        pparameterNode3 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        }
        tcommaNode5 = (TComma)nodeArrayList2.get(0);

        pparameterlistNode1 = new AParameterList(listNode2, pparameterNode3, listNode4, tcommaNode5);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AAparameterlist6ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TComma tcommaNode6;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);
        {
            // Block
        }
        tcommaNode6 = (TComma)nodeArrayList3.get(0);

        pparameterlistNode1 = new AParameterList(listNode3, pparameterNode4, listNode5, tcommaNode6);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAparameterlist7ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PParameter pparameterNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TComma tcommaNode6;
        {
            // Block
        }
        pparameterNode3 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcommaNode6 = (TComma)nodeArrayList3.get(0);

        pparameterlistNode1 = new AParameterList(listNode2, pparameterNode3, listNode5, tcommaNode6);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAparameterlist8ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TComma tcommaNode7;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tcommaNode7 = (TComma)nodeArrayList4.get(0);

        pparameterlistNode1 = new AParameterList(listNode3, pparameterNode4, listNode6, tcommaNode7);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAparameterlisttail1ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        {
            // Block
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, listNode3, pparameterNode4);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AAparameterlisttail2ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PParameter pparameterNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pparameterNode5 = (PParameter)nodeArrayList3.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, listNode4, pparameterNode5);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AExcludingIdentifierParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        pparameterNode1 = new AExcludingIdentifierParameter(ptypeNode2);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AIncludingIdentifierParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PTypeAnnotation ptypeannotationNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        ptypeannotationNode3 = (PTypeAnnotation)nodeArrayList2.get(0);

        pparameterNode1 = new AIncludingIdentifierParameter(pidentifierNode2, ptypeannotationNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ADeclarator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarator pdeclaratorNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PTypeAnnotation ptypeannotationNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        ptypeannotationNode3 = (PTypeAnnotation)nodeArrayList2.get(0);

        pdeclaratorNode1 = new ADeclarator(pidentifierNode2, ptypeannotationNode3);
        }
	nodeList.add(pdeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANameIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifier pidentifierNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pidentifierNode1 = new ANameIdentifier(tnameNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ADiscardIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifier pidentifierNode1;
        {
            // Block
        TDiscard tdiscardNode2;
        tdiscardNode2 = (TDiscard)nodeArrayList1.get(0);

        pidentifierNode1 = new ADiscardIdentifier(tdiscardNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATypeAnnotation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeAnnotation ptypeannotationNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        ptypeannotationNode1 = new ATypeAnnotation(tcolonNode2, ptypeNode3);
        }
	nodeList.add(ptypeannotationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AExpressionLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvalue pexpressionlvalueNode1;
        {
            // Block
        PExpression6 pexpression6Node2;
        pexpression6Node2 = (PExpression6)nodeArrayList1.get(0);

        pexpressionlvalueNode1 = new AExpressionLvalue(pexpression6Node2);
        }
	nodeList.add(pexpressionlvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AExpressionRvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionRvalue pexpressionrvalueNode1;
        {
            // Block
        PExpression0 pexpression0Node2;
        pexpression0Node2 = (PExpression0)nodeArrayList1.get(0);

        pexpressionrvalueNode1 = new AExpressionRvalue(pexpression0Node2);
        }
	nodeList.add(pexpressionrvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce APrioritizedExpression0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression0 pexpression0Node1;
        {
            // Block
        PExpression1 pexpression1Node2;
        pexpression1Node2 = (PExpression1)nodeArrayList1.get(0);

        pexpression0Node1 = new APrioritizedExpression0(pexpression1Node2);
        }
	nodeList.add(pexpression0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ABinaryExpression0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression0 pexpression0Node1;
        {
            // Block
        PExpression0 pexpression0Node2;
        PLogicalBinaryOp plogicalbinaryopNode3;
        PExpression1 pexpression1Node4;
        pexpression0Node2 = (PExpression0)nodeArrayList1.get(0);
        plogicalbinaryopNode3 = (PLogicalBinaryOp)nodeArrayList2.get(0);
        pexpression1Node4 = (PExpression1)nodeArrayList3.get(0);

        pexpression0Node1 = new ABinaryExpression0(pexpression0Node2, plogicalbinaryopNode3, pexpression1Node4);
        }
	nodeList.add(pexpression0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce APrioritizedExpression1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression1 pexpression1Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pexpression1Node1 = new APrioritizedExpression1(pexpression2Node2);
        }
	nodeList.add(pexpression1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ABinaryExpression1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression1 pexpression1Node1;
        {
            // Block
        PExpression1 pexpression1Node2;
        PEqualityBinaryOp pequalitybinaryopNode3;
        PExpression2 pexpression2Node4;
        pexpression1Node2 = (PExpression1)nodeArrayList1.get(0);
        pequalitybinaryopNode3 = (PEqualityBinaryOp)nodeArrayList2.get(0);
        pexpression2Node4 = (PExpression2)nodeArrayList3.get(0);

        pexpression1Node1 = new ABinaryExpression1(pexpression1Node2, pequalitybinaryopNode3, pexpression2Node4);
        }
	nodeList.add(pexpression1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce APrioritizedExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);

        pexpression2Node1 = new APrioritizedExpression2(pexpression3Node2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ABinaryExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        PComparativeBinaryOp pcomparativebinaryopNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        pcomparativebinaryopNode3 = (PComparativeBinaryOp)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new ABinaryExpression2(pexpression2Node2, pcomparativebinaryopNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce APrioritizedExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);

        pexpression3Node1 = new APrioritizedExpression3(pexpression4Node2);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ABinaryExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        PAdditiveBinaryOp padditivebinaryopNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        padditivebinaryopNode3 = (PAdditiveBinaryOp)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new ABinaryExpression3(pexpression3Node2, padditivebinaryopNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce APrioritizedExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);

        pexpression4Node1 = new APrioritizedExpression4(pexpression5Node2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ABinaryExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        PShiftBinaryOp pshiftbinaryopNode3;
        PExpression5 pexpression5Node4;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);
        pshiftbinaryopNode3 = (PShiftBinaryOp)nodeArrayList2.get(0);
        pexpression5Node4 = (PExpression5)nodeArrayList3.get(0);

        pexpression4Node1 = new ABinaryExpression4(pexpression4Node2, pshiftbinaryopNode3, pexpression5Node4);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce APrioritizedExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression6 pexpression6Node2;
        pexpression6Node2 = (PExpression6)nodeArrayList1.get(0);

        pexpression5Node1 = new APrioritizedExpression5(pexpression6Node2);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ABinaryExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        PMultiplicativeBinaryOp pmultiplicativebinaryopNode3;
        PExpression6 pexpression6Node4;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);
        pmultiplicativebinaryopNode3 = (PMultiplicativeBinaryOp)nodeArrayList2.get(0);
        pexpression6Node4 = (PExpression6)nodeArrayList3.get(0);

        pexpression5Node1 = new ABinaryExpression5(pexpression5Node2, pmultiplicativebinaryopNode3, pexpression6Node4);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce APrioritizedExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        PExpression7 pexpression7Node2;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);

        pexpression6Node1 = new APrioritizedExpression6(pexpression7Node2);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce AUnaryExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        PUnaryOp punaryopNode2;
        PExpression6 pexpression6Node3;
        punaryopNode2 = (PUnaryOp)nodeArrayList1.get(0);
        pexpression6Node3 = (PExpression6)nodeArrayList2.get(0);

        pexpression6Node1 = new AUnaryExpression6(punaryopNode2, pexpression6Node3);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ADereferenceExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        TMultiply tmultiplyNode2;
        PExpression6 pexpression6Node3;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);
        pexpression6Node3 = (PExpression6)nodeArrayList2.get(0);

        pexpression6Node1 = new ADereferenceExpression6(tmultiplyNode2, pexpression6Node3);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AAddressOfExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        TAnd tandNode2;
        TName tnameNode3;
        tandNode2 = (TAnd)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pexpression6Node1 = new AAddressOfExpression6(tandNode2, tnameNode3);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce APrioritizedExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        PExpression8 pexpression8Node2;
        pexpression8Node2 = (PExpression8)nodeArrayList1.get(0);

        pexpression7Node1 = new APrioritizedExpression7(pexpression8Node2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AIndexExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        PExpression7 pexpression7Node2;
        PBracketExpression pbracketexpressionNode3;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);
        pbracketexpressionNode3 = (PBracketExpression)nodeArrayList2.get(0);

        pexpression7Node1 = new AIndexExpression7(pexpression7Node2, pbracketexpressionNode3);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce AFunctionExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        PExpression7 pexpression7Node2;
        PParExpressionList pparexpressionlistNode3;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);
        pparexpressionlistNode3 = (PParExpressionList)nodeArrayList2.get(0);

        pexpression7Node1 = new AFunctionExpression7(pexpression7Node2, pparexpressionlistNode3);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce AAbracketexpression1BracketExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracketExpression pbracketexpressionNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList2.get(0);

        pbracketexpressionNode1 = new ABracketExpression(tlbracketNode2, null, trbracketNode4);
        }
	nodeList.add(pbracketexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce AAbracketexpression2BracketExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracketExpression pbracketexpressionNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pbracketexpressionNode1 = new ABracketExpression(tlbracketNode2, pexpressionrvalueNode3, trbracketNode4);
        }
	nodeList.add(pbracketexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce AAbracketexpressionlist1BracketExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracketExpressionList pbracketexpressionlistNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList2.get(0);

        pbracketexpressionlistNode1 = new ABracketExpressionList(tlbracketNode2, null, trbracketNode4);
        }
	nodeList.add(pbracketexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce AAbracketexpressionlist2BracketExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracketExpressionList pbracketexpressionlistNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpressionList pexpressionlistNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionlistNode3 = (PExpressionList)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pbracketexpressionlistNode1 = new ABracketExpressionList(tlbracketNode2, pexpressionlistNode3, trbracketNode4);
        }
	nodeList.add(pbracketexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AAparexpressionlist1ParExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParExpressionList pparexpressionlistNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode4 = (TRPar)nodeArrayList2.get(0);

        pparexpressionlistNode1 = new AParExpressionList(tlparNode2, null, trparNode4);
        }
	nodeList.add(pparexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce AAparexpressionlist2ParExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParExpressionList pparexpressionlistNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpressionList pexpressionlistNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionlistNode3 = (PExpressionList)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparexpressionlistNode1 = new AParExpressionList(tlparNode2, pexpressionlistNode3, trparNode4);
        }
	nodeList.add(pparexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce AAexpressionlist1ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionlistNode1 = new AExpressionList(pexpressionrvalueNode2, listNode3, null);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce AAexpressionlist2ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionlistNode1 = new AExpressionList(pexpressionrvalueNode2, listNode4, null);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce AAexpressionlist3ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TComma tcommaNode4;
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);
        {
            // Block
        }
        tcommaNode4 = (TComma)nodeArrayList2.get(0);

        pexpressionlistNode1 = new AExpressionList(pexpressionrvalueNode2, listNode3, tcommaNode4);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce AAexpressionlist4ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpressionRvalue pexpressionrvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TComma tcommaNode5;
        pexpressionrvalueNode2 = (PExpressionRvalue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcommaNode5 = (TComma)nodeArrayList3.get(0);

        pexpressionlistNode1 = new AExpressionList(pexpressionrvalueNode2, listNode4, tcommaNode5);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce AExpressionListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionListTail pexpressionlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpressionRvalue pexpressionrvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionrvalueNode3 = (PExpressionRvalue)nodeArrayList2.get(0);

        pexpressionlisttailNode1 = new AExpressionListTail(tcommaNode2, pexpressionrvalueNode3);
        }
	nodeList.add(pexpressionlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce AValueExpression8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression8 pexpression8Node1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpression8Node1 = new AValueExpression8(pvalueNode2);
        }
	nodeList.add(pexpression8Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce AVariableExpression8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression8 pexpression8Node1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pexpression8Node1 = new AVariableExpression8(tnameNode2);
        }
	nodeList.add(pexpression8Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce AParenthesesExpression8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression8 pexpression8Node1;
        {
            // Block
        TLPar tlparNode2;
        PExpression0 pexpression0Node3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpression0Node3 = (PExpression0)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpression8Node1 = new AParenthesesExpression8(tlparNode2, pexpression0Node3, trparNode4);
        }
	nodeList.add(pexpression8Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce ABoolValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TBoolValue tboolvalueNode2;
        tboolvalueNode2 = (TBoolValue)nodeArrayList1.get(0);

        pvalueNode1 = new ABoolValue(tboolvalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce AIntValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIntValue tintvalueNode2;
        tintvalueNode2 = (TIntValue)nodeArrayList1.get(0);

        pvalueNode1 = new AIntValue(tintvalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce ANatValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TNatValue tnatvalueNode2;
        tnatvalueNode2 = (TNatValue)nodeArrayList1.get(0);

        pvalueNode1 = new ANatValue(tnatvalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce ACharValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TCharValue tcharvalueNode2;
        tcharvalueNode2 = (TCharValue)nodeArrayList1.get(0);

        pvalueNode1 = new ACharValue(tcharvalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce ANullValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pvalueNode1 = new ANullValue(tnullNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce ASizeofValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TSizeof tsizeofNode2;
        PType ptypeNode3;
        tsizeofNode2 = (TSizeof)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvalueNode1 = new ASizeofValue(tsizeofNode2, ptypeNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce AEqualsAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TEquals tequalsNode2;
        tequalsNode2 = (TEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AEqualsAssignmentOp(tequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce ALogicalAndAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TLogicalAndEquals tlogicalandequalsNode2;
        tlogicalandequalsNode2 = (TLogicalAndEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ALogicalAndAssignmentOp(tlogicalandequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ALogicalOrAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TLogicalOrEquals tlogicalorequalsNode2;
        tlogicalorequalsNode2 = (TLogicalOrEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ALogicalOrAssignmentOp(tlogicalorequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce APlusAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TPlusEquals tplusequalsNode2;
        tplusequalsNode2 = (TPlusEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new APlusAssignmentOp(tplusequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce AAndAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TAndEquals tandequalsNode2;
        tandequalsNode2 = (TAndEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AAndAssignmentOp(tandequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce AOrAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TOrEquals torequalsNode2;
        torequalsNode2 = (TOrEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AOrAssignmentOp(torequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new151() /* reduce AXorAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TXorEquals txorequalsNode2;
        txorequalsNode2 = (TXorEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AXorAssignmentOp(txorequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new152() /* reduce AMinusAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TMinusEquals tminusequalsNode2;
        tminusequalsNode2 = (TMinusEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AMinusAssignmentOp(tminusequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new153() /* reduce ALeftShiftAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TLeftShiftEquals tleftshiftequalsNode2;
        tleftshiftequalsNode2 = (TLeftShiftEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ALeftShiftAssignmentOp(tleftshiftequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new154() /* reduce ARightShiftAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TRightShiftEquals trightshiftequalsNode2;
        trightshiftequalsNode2 = (TRightShiftEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ARightShiftAssignmentOp(trightshiftequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new155() /* reduce ALeftRotateAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TLeftRotateEquals tleftrotateequalsNode2;
        tleftrotateequalsNode2 = (TLeftRotateEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ALeftRotateAssignmentOp(tleftrotateequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new156() /* reduce ARightRotateAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TRightRotateEquals trightrotateequalsNode2;
        trightrotateequalsNode2 = (TRightRotateEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ARightRotateAssignmentOp(trightrotateequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new157() /* reduce AMultiplyAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TMultiplyEquals tmultiplyequalsNode2;
        tmultiplyequalsNode2 = (TMultiplyEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new AMultiplyAssignmentOp(tmultiplyequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new158() /* reduce ADivideAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TDivideEquals tdivideequalsNode2;
        tdivideequalsNode2 = (TDivideEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ADivideAssignmentOp(tdivideequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new159() /* reduce ARemainderAssignmentOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentOp passignmentopNode1;
        {
            // Block
        TRemainderEquals tremainderequalsNode2;
        tremainderequalsNode2 = (TRemainderEquals)nodeArrayList1.get(0);

        passignmentopNode1 = new ARemainderAssignmentOp(tremainderequalsNode2);
        }
	nodeList.add(passignmentopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new160() /* reduce ALogicalAndLogicalBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalBinaryOp plogicalbinaryopNode1;
        {
            // Block
        TLogicalAnd tlogicalandNode2;
        tlogicalandNode2 = (TLogicalAnd)nodeArrayList1.get(0);

        plogicalbinaryopNode1 = new ALogicalAndLogicalBinaryOp(tlogicalandNode2);
        }
	nodeList.add(plogicalbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new161() /* reduce ALogicalOrLogicalBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalBinaryOp plogicalbinaryopNode1;
        {
            // Block
        TLogicalOr tlogicalorNode2;
        tlogicalorNode2 = (TLogicalOr)nodeArrayList1.get(0);

        plogicalbinaryopNode1 = new ALogicalOrLogicalBinaryOp(tlogicalorNode2);
        }
	nodeList.add(plogicalbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new162() /* reduce AEqualToEqualityBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualityBinaryOp pequalitybinaryopNode1;
        {
            // Block
        TEqualTo tequaltoNode2;
        tequaltoNode2 = (TEqualTo)nodeArrayList1.get(0);

        pequalitybinaryopNode1 = new AEqualToEqualityBinaryOp(tequaltoNode2);
        }
	nodeList.add(pequalitybinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new163() /* reduce ANotEqualToEqualityBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualityBinaryOp pequalitybinaryopNode1;
        {
            // Block
        TNotEqualTo tnotequaltoNode2;
        tnotequaltoNode2 = (TNotEqualTo)nodeArrayList1.get(0);

        pequalitybinaryopNode1 = new ANotEqualToEqualityBinaryOp(tnotequaltoNode2);
        }
	nodeList.add(pequalitybinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new164() /* reduce ALessThanComparativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparativeBinaryOp pcomparativebinaryopNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pcomparativebinaryopNode1 = new ALessThanComparativeBinaryOp(tlessthanNode2);
        }
	nodeList.add(pcomparativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new165() /* reduce ALessOrEqualComparativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparativeBinaryOp pcomparativebinaryopNode1;
        {
            // Block
        TLessOrEqual tlessorequalNode2;
        tlessorequalNode2 = (TLessOrEqual)nodeArrayList1.get(0);

        pcomparativebinaryopNode1 = new ALessOrEqualComparativeBinaryOp(tlessorequalNode2);
        }
	nodeList.add(pcomparativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new166() /* reduce AMoreThanComparativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparativeBinaryOp pcomparativebinaryopNode1;
        {
            // Block
        TMoreThan tmorethanNode2;
        tmorethanNode2 = (TMoreThan)nodeArrayList1.get(0);

        pcomparativebinaryopNode1 = new AMoreThanComparativeBinaryOp(tmorethanNode2);
        }
	nodeList.add(pcomparativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new167() /* reduce AMoreOrEqualComparativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparativeBinaryOp pcomparativebinaryopNode1;
        {
            // Block
        TMoreOrEqual tmoreorequalNode2;
        tmoreorequalNode2 = (TMoreOrEqual)nodeArrayList1.get(0);

        pcomparativebinaryopNode1 = new AMoreOrEqualComparativeBinaryOp(tmoreorequalNode2);
        }
	nodeList.add(pcomparativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new168() /* reduce APlusAdditiveBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveBinaryOp padditivebinaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        padditivebinaryopNode1 = new APlusAdditiveBinaryOp(tplusNode2);
        }
	nodeList.add(padditivebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new169() /* reduce AAndAdditiveBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveBinaryOp padditivebinaryopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        padditivebinaryopNode1 = new AAndAdditiveBinaryOp(tandNode2);
        }
	nodeList.add(padditivebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new170() /* reduce AOrAdditiveBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveBinaryOp padditivebinaryopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        padditivebinaryopNode1 = new AOrAdditiveBinaryOp(torNode2);
        }
	nodeList.add(padditivebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new171() /* reduce AXorAdditiveBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveBinaryOp padditivebinaryopNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        padditivebinaryopNode1 = new AXorAdditiveBinaryOp(txorNode2);
        }
	nodeList.add(padditivebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new172() /* reduce AMinusAdditiveBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveBinaryOp padditivebinaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        padditivebinaryopNode1 = new AMinusAdditiveBinaryOp(tminusNode2);
        }
	nodeList.add(padditivebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new173() /* reduce ALeftShiftShiftBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShiftBinaryOp pshiftbinaryopNode1;
        {
            // Block
        TLeftShift tleftshiftNode2;
        tleftshiftNode2 = (TLeftShift)nodeArrayList1.get(0);

        pshiftbinaryopNode1 = new ALeftShiftShiftBinaryOp(tleftshiftNode2);
        }
	nodeList.add(pshiftbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new174() /* reduce ARightShiftShiftBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShiftBinaryOp pshiftbinaryopNode1;
        {
            // Block
        TRightShift trightshiftNode2;
        trightshiftNode2 = (TRightShift)nodeArrayList1.get(0);

        pshiftbinaryopNode1 = new ARightShiftShiftBinaryOp(trightshiftNode2);
        }
	nodeList.add(pshiftbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new175() /* reduce ALeftRotateShiftBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShiftBinaryOp pshiftbinaryopNode1;
        {
            // Block
        TLeftRotate tleftrotateNode2;
        tleftrotateNode2 = (TLeftRotate)nodeArrayList1.get(0);

        pshiftbinaryopNode1 = new ALeftRotateShiftBinaryOp(tleftrotateNode2);
        }
	nodeList.add(pshiftbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new176() /* reduce ARightRotateShiftBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShiftBinaryOp pshiftbinaryopNode1;
        {
            // Block
        TRightRotate trightrotateNode2;
        trightrotateNode2 = (TRightRotate)nodeArrayList1.get(0);

        pshiftbinaryopNode1 = new ARightRotateShiftBinaryOp(trightrotateNode2);
        }
	nodeList.add(pshiftbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new177() /* reduce AMultiplyMultiplicativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeBinaryOp pmultiplicativebinaryopNode1;
        {
            // Block
        TMultiply tmultiplyNode2;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);

        pmultiplicativebinaryopNode1 = new AMultiplyMultiplicativeBinaryOp(tmultiplyNode2);
        }
	nodeList.add(pmultiplicativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new178() /* reduce ADivideMultiplicativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeBinaryOp pmultiplicativebinaryopNode1;
        {
            // Block
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pmultiplicativebinaryopNode1 = new ADivideMultiplicativeBinaryOp(tdivideNode2);
        }
	nodeList.add(pmultiplicativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new179() /* reduce ARemainderMultiplicativeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeBinaryOp pmultiplicativebinaryopNode1;
        {
            // Block
        TRemainder tremainderNode2;
        tremainderNode2 = (TRemainder)nodeArrayList1.get(0);

        pmultiplicativebinaryopNode1 = new ARemainderMultiplicativeBinaryOp(tremainderNode2);
        }
	nodeList.add(pmultiplicativebinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new180() /* reduce AMinusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryopNode1 = new AMinusUnaryOp(tminusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new181() /* reduce ANotUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        punaryopNode1 = new ANotUnaryOp(tnotNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new182() /* reduce ATerminal$Directive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDirective pdirectiveNode1;
        pdirectiveNode1 = (PDirective)nodeArrayList1.get(0);
	if(pdirectiveNode1 != null)
	{
	  listNode2.add(pdirectiveNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new183() /* reduce ANonTerminal$Directive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDirective pdirectiveNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdirectiveNode2 = (PDirective)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdirectiveNode2 != null)
	{
	  listNode3.add(pdirectiveNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new184() /* reduce ATerminal$ProgramSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PProgramSection pprogramsectionNode1;
        pprogramsectionNode1 = (PProgramSection)nodeArrayList1.get(0);
	if(pprogramsectionNode1 != null)
	{
	  listNode2.add(pprogramsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new185() /* reduce ANonTerminal$ProgramSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PProgramSection pprogramsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramsectionNode2 = (PProgramSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramsectionNode2 != null)
	{
	  listNode3.add(pprogramsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new186() /* reduce ATerminal$Semicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TSemicolon tsemicolonNode1;
        tsemicolonNode1 = (TSemicolon)nodeArrayList1.get(0);
	if(tsemicolonNode1 != null)
	{
	  listNode2.add(tsemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new187() /* reduce ANonTerminal$Semicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TSemicolon tsemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tsemicolonNode2 = (TSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tsemicolonNode2 != null)
	{
	  listNode3.add(tsemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new188() /* reduce ATerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBasicSection pbasicsectionNode1;
        pbasicsectionNode1 = (PBasicSection)nodeArrayList1.get(0);
	if(pbasicsectionNode1 != null)
	{
	  listNode2.add(pbasicsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new189() /* reduce ANonTerminal$BasicSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBasicSection pbasicsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasicsectionNode2 = (PBasicSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasicsectionNode2 != null)
	{
	  listNode3.add(pbasicsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new190() /* reduce ATerminal$VariableModifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TVariableModifier tvariablemodifierNode1;
        tvariablemodifierNode1 = (TVariableModifier)nodeArrayList1.get(0);
	if(tvariablemodifierNode1 != null)
	{
	  listNode2.add(tvariablemodifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new191() /* reduce ANonTerminal$VariableModifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TVariableModifier tvariablemodifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tvariablemodifierNode2 = (TVariableModifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tvariablemodifierNode2 != null)
	{
	  listNode3.add(tvariablemodifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new192() /* reduce ATerminal$DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeadSection pdeadsectionNode1;
        pdeadsectionNode1 = (PDeadSection)nodeArrayList1.get(0);
	if(pdeadsectionNode1 != null)
	{
	  listNode2.add(pdeadsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new193() /* reduce ANonTerminal$DeadSection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeadSection pdeadsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeadsectionNode2 = (PDeadSection)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeadsectionNode2 != null)
	{
	  listNode3.add(pdeadsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new194() /* reduce ATerminal$And */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TAnd tandNode1;
        tandNode1 = (TAnd)nodeArrayList1.get(0);
	if(tandNode1 != null)
	{
	  listNode2.add(tandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new195() /* reduce ANonTerminal$And */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TAnd tandNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tandNode2 = (TAnd)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tandNode2 != null)
	{
	  listNode3.add(tandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new196() /* reduce ATerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameterListTail pparameterlisttailNode1;
        pparameterlisttailNode1 = (PParameterListTail)nodeArrayList1.get(0);
	if(pparameterlisttailNode1 != null)
	{
	  listNode2.add(pparameterlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new197() /* reduce ANonTerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameterListTail pparameterlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterlisttailNode2 = (PParameterListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterlisttailNode2 != null)
	{
	  listNode3.add(pparameterlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new198() /* reduce ATerminal$ExpressionListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpressionListTail pexpressionlisttailNode1;
        pexpressionlisttailNode1 = (PExpressionListTail)nodeArrayList1.get(0);
	if(pexpressionlisttailNode1 != null)
	{
	  listNode2.add(pexpressionlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new199() /* reduce ANonTerminal$ExpressionListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpressionListTail pexpressionlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionlisttailNode2 = (PExpressionListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionlisttailNode2 != null)
	{
	  listNode3.add(pexpressionlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {61, SHIFT, 6}, },
			{{-1, ERROR, 2}, {68, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, ERROR, 6}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 53}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 190}, },
			{{-1, ERROR, 8}, {61, SHIFT, 59}, },
			{{-1, ERROR, 9}, {61, SHIFT, 60}, {62, SHIFT, 61}, },
			{{-1, ERROR, 10}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 11}, {20, SHIFT, 65}, },
			{{-1, ERROR, 12}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 13}, {20, SHIFT, 67}, },
			{{-1, ERROR, 14}, {61, SHIFT, 68}, },
			{{-1, ERROR, 15}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 72}, },
			{{-1, ERROR, 16}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 17}, {61, SHIFT, 77}, },
			{{-1, REDUCE, 180}, },
			{{-1, ERROR, 19}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 137}, {23, SHIFT, 79}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 37}, {25, SHIFT, 80}, {26, SHIFT, 81}, {27, SHIFT, 82}, {28, SHIFT, 83}, {29, SHIFT, 84}, {30, SHIFT, 85}, {31, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {34, SHIFT, 89}, {35, SHIFT, 90}, {36, SHIFT, 91}, {37, SHIFT, 92}, {38, SHIFT, 93}, {39, SHIFT, 94}, },
			{{-1, ERROR, 38}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 105}, {40, SHIFT, 97}, {41, SHIFT, 98}, },
			{{-1, REDUCE, 106}, {42, SHIFT, 100}, {43, SHIFT, 101}, },
			{{-1, REDUCE, 108}, {44, SHIFT, 103}, {45, SHIFT, 104}, {46, SHIFT, 105}, {47, SHIFT, 106}, },
			{{-1, REDUCE, 110}, {48, SHIFT, 108}, {49, SHIFT, 109}, {50, SHIFT, 110}, {51, SHIFT, 111}, {52, SHIFT, 112}, },
			{{-1, REDUCE, 112}, {53, SHIFT, 114}, {54, SHIFT, 115}, {55, SHIFT, 116}, {56, SHIFT, 117}, },
			{{-1, REDUCE, 114}, {57, SHIFT, 119}, {58, SHIFT, 120}, {59, SHIFT, 121}, },
			{{-1, REDUCE, 116}, {25, REDUCE, 104}, {26, REDUCE, 104}, {27, REDUCE, 104}, {28, REDUCE, 104}, {29, REDUCE, 104}, {30, REDUCE, 104}, {31, REDUCE, 104}, {32, REDUCE, 104}, {33, REDUCE, 104}, {34, REDUCE, 104}, {35, REDUCE, 104}, {36, REDUCE, 104}, {37, REDUCE, 104}, {38, REDUCE, 104}, {39, REDUCE, 104}, },
			{{-1, REDUCE, 118}, {16, SHIFT, 123}, {18, SHIFT, 124}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 136}, },
			{{-1, ERROR, 49}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 4}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 51}, {1, SHIFT, 129}, {3, SHIFT, 130}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 131}, {22, SHIFT, 131}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 57}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 5}, {24, SHIFT, 135}, },
			{{-1, ERROR, 59}, {16, SHIFT, 136}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 62}, {24, SHIFT, 53}, {25, SHIFT, 138}, },
			{{-1, ERROR, 63}, {23, SHIFT, 140}, },
			{{-1, ERROR, 64}, {20, SHIFT, 142}, },
			{{-1, ERROR, 65}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 147}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 66}, {20, SHIFT, 151}, },
			{{-1, ERROR, 67}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 152}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 68}, {24, SHIFT, 53}, },
			{{-1, ERROR, 69}, {16, SHIFT, 136}, },
			{{-1, ERROR, 70}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 72}, },
			{{-1, REDUCE, 194}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 75}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 158}, {61, SHIFT, 72}, },
			{{-1, ERROR, 76}, {17, SHIFT, 160}, {40, SHIFT, 97}, {41, SHIFT, 98}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 159}, },
			{{-1, ERROR, 95}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 30}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 161}, },
			{{-1, ERROR, 99}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 163}, },
			{{-1, ERROR, 102}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 167}, },
			{{-1, ERROR, 107}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 170}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 172}, },
			{{-1, ERROR, 113}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 176}, },
			{{-1, ERROR, 118}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 179}, },
			{{-1, ERROR, 122}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 123}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 168}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 124}, {15, SHIFT, 15}, {16, SHIFT, 16}, {19, SHIFT, 170}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 191}, },
			{{-1, ERROR, 130}, {61, SHIFT, 60}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 133}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 198}, },
			{{-1, REDUCE, 132}, {22, SHIFT, 174}, },
			{{-1, REDUCE, 6}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 187}, },
			{{-1, ERROR, 136}, {1, SHIFT, 7}, {2, SHIFT, 69}, {17, SHIFT, 176}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, ERROR, 137}, {4, SHIFT, 183}, {20, SHIFT, 184}, },
			{{-1, ERROR, 138}, {15, SHIFT, 15}, {16, SHIFT, 16}, {18, SHIFT, 186}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 23}, {24, SHIFT, 135}, },
			{{-1, ERROR, 140}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 72}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 142}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 191}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 143}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 53}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 144}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 53}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 145}, {24, SHIFT, 53}, },
			{{-1, ERROR, 146}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 188}, },
			{{-1, ERROR, 149}, {21, SHIFT, 200}, },
			{{-1, ERROR, 150}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 201}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 151}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 204}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 152}, {8, SHIFT, 207}, },
			{{-1, ERROR, 153}, {21, SHIFT, 208}, },
			{{-1, ERROR, 154}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 209}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 57}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 82}, {4, SHIFT, 183}, },
			{{-1, ERROR, 157}, {24, SHIFT, 212}, },
			{{-1, REDUCE, 195}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 161}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 107}, {42, SHIFT, 100}, {43, SHIFT, 101}, },
			{{-1, REDUCE, 109}, {44, SHIFT, 103}, {45, SHIFT, 104}, {46, SHIFT, 105}, {47, SHIFT, 106}, },
			{{-1, REDUCE, 111}, {48, SHIFT, 108}, {49, SHIFT, 109}, {50, SHIFT, 110}, {51, SHIFT, 111}, {52, SHIFT, 112}, },
			{{-1, REDUCE, 113}, {53, SHIFT, 114}, {54, SHIFT, 115}, {55, SHIFT, 116}, {56, SHIFT, 117}, },
			{{-1, REDUCE, 115}, {57, SHIFT, 119}, {58, SHIFT, 120}, {59, SHIFT, 121}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 169}, {17, SHIFT, 215}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 171}, {19, SHIFT, 216}, },
			{{-1, ERROR, 172}, {24, SHIFT, 53}, {25, SHIFT, 217}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 134}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 199}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 80}, {23, REDUCE, 101}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 179}, {17, SHIFT, 219}, },
			{{-1, REDUCE, 88}, {22, SHIFT, 220}, },
			{{-1, ERROR, 181}, {23, SHIFT, 140}, },
			{{-1, ERROR, 182}, {1, SHIFT, 129}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, ERROR, 183}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 72}, },
			{{-1, ERROR, 184}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 226}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 185}, {20, SHIFT, 229}, },
			{{-1, ERROR, 186}, {15, SHIFT, 15}, {16, SHIFT, 16}, {19, SHIFT, 230}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 187}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 32}, {6, SHIFT, 234}, },
			{{-1, ERROR, 192}, {21, SHIFT, 236}, },
			{{-1, ERROR, 193}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 237}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 194}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 196}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 61}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 63}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 65}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 189}, },
			{{-1, ERROR, 203}, {21, SHIFT, 251}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 205}, {21, SHIFT, 252}, },
			{{-1, ERROR, 206}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 253}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 207}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 208}, {8, SHIFT, 256}, },
			{{-1, ERROR, 209}, {8, SHIFT, 257}, },
			{{-1, ERROR, 210}, {21, SHIFT, 258}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 212}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 213}, {19, SHIFT, 260}, },
			{{-1, REDUCE, 31}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 217}, {15, SHIFT, 15}, {16, SHIFT, 16}, {18, SHIFT, 186}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 24}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 92}, {1, SHIFT, 7}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 196}, },
			{{-1, REDUCE, 90}, {22, SHIFT, 264}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 89}, {22, SHIFT, 266}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 227}, {21, SHIFT, 268}, },
			{{-1, ERROR, 228}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 269}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 229}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 271}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 131}, {22, SHIFT, 131}, {24, SHIFT, 212}, },
			{{-1, ERROR, 232}, {19, SHIFT, 275}, },
			{{-1, REDUCE, 25}, {24, SHIFT, 135}, },
			{{-1, ERROR, 234}, {5, SHIFT, 10}, {20, SHIFT, 276}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 34}, {6, SHIFT, 234}, },
			{{-1, REDUCE, 33}, {6, SHIFT, 234}, },
			{{-1, ERROR, 238}, {21, SHIFT, 280}, },
			{{-1, REDUCE, 67}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 240}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 53}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 241}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 53}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 242}, {24, SHIFT, 53}, },
			{{-1, ERROR, 243}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 192}, },
			{{-1, REDUCE, 60}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 69}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {24, SHIFT, 135}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 62}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 64}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 66}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 254}, {21, SHIFT, 290}, },
			{{-1, ERROR, 255}, {24, SHIFT, 53}, },
			{{-1, ERROR, 256}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 257}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 258}, {8, SHIFT, 294}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 261}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 263}, {1, SHIFT, 129}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 94}, {1, SHIFT, 7}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 197}, },
			{{-1, REDUCE, 93}, {1, SHIFT, 7}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 91}, {22, SHIFT, 297}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 270}, {21, SHIFT, 298}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 272}, {21, SHIFT, 299}, },
			{{-1, ERROR, 273}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 300}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 274}, {19, SHIFT, 302}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 276}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 303}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, {6, SHIFT, 234}, },
			{{-1, REDUCE, 68}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, ERROR, 282}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 72}, {24, SHIFT, 135}, },
			{{-1, ERROR, 284}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 73}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 74}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 75}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 193}, },
			{{-1, REDUCE, 70}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 240}, {12, SHIFT, 241}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, {24, SHIFT, 135}, },
			{{-1, ERROR, 292}, {24, SHIFT, 53}, },
			{{-1, ERROR, 293}, {24, SHIFT, 53}, },
			{{-1, ERROR, 294}, {15, SHIFT, 15}, {16, SHIFT, 16}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 54}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 26}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 95}, {1, SHIFT, 7}, {2, SHIFT, 69}, {18, SHIFT, 70}, {49, SHIFT, 71}, {61, SHIFT, 177}, {62, SHIFT, 61}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 301}, {21, SHIFT, 312}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 304}, {21, SHIFT, 313}, },
			{{-1, ERROR, 305}, {1, SHIFT, 7}, {3, SHIFT, 9}, {5, SHIFT, 10}, {7, SHIFT, 11}, {8, SHIFT, 12}, {9, SHIFT, 13}, {10, SHIFT, 14}, {11, SHIFT, 143}, {12, SHIFT, 144}, {13, SHIFT, 145}, {14, SHIFT, 146}, {15, SHIFT, 15}, {16, SHIFT, 16}, {21, SHIFT, 314}, {49, SHIFT, 17}, {52, SHIFT, 18}, {57, SHIFT, 19}, {60, SHIFT, 20}, {61, SHIFT, 21}, {63, SHIFT, 22}, {64, SHIFT, 23}, {65, SHIFT, 24}, {66, SHIFT, 25}, {67, SHIFT, 26}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 76}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 77}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 55}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 54}, {24, SHIFT, 135}, },
			{{-1, ERROR, 311}, {24, SHIFT, 53}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 315}, {21, SHIFT, 317}, },
			{{-1, REDUCE, 56}, {24, SHIFT, 135}, },
			{{-1, REDUCE, 43}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 27}, },
			{{-1, 4}, {5, 52}, },
			{{-1, 28}, {50, 128}, },
			{{-1, 244}, {3, 29}, {50, 29}, {65, 148}, {67, 148}, {142, 148}, {150, 202}, {151, 148}, {154, 202}, {184, 148}, {193, 202}, {206, 202}, {228, 202}, {229, 148}, {273, 202}, {276, 148}, {305, 202}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 187}, {217, 261}, },
			{{-1, 32}, },
			{{-1, 33}, {234, 277}, },
			{{-1, 235}, {236, 278}, {237, 279}, {280, 306}, },
			{{-1, 34}, },
			{{-1, 35}, },
			{{-1, 36}, },
			{{-1, 149}, {67, 153}, {142, 192}, {150, 203}, {151, 205}, {154, 210}, {184, 227}, {193, 238}, {206, 254}, {228, 270}, {229, 272}, {273, 301}, {276, 304}, {305, 315}, },
			{{-1, 245}, {246, 288}, {248, 288}, {249, 288}, {250, 288}, {281, 288}, {289, 288}, },
			{{-1, 178}, {15, 73}, {70, 157}, {140, 190}, {183, 225}, },
			{{-1, 74}, {75, 159}, },
			{{-1, 213}, {231, 274}, },
			{{-1, 185}, {156, 211}, },
			{{-1, 137}, {69, 156}, },
			{{-1, 179}, },
			{{-1, 221}, {222, 265}, {267, 265}, },
			{{-1, 262}, {136, 180}, {182, 224}, {263, 296}, },
			{{-1, 62}, {130, 172}, },
			{{-1, 181}, {9, 63}, {130, 63}, },
			{{-1, 141}, {181, 223}, },
			{{-1, 37}, },
			{{-1, 38}, {6, 55}, {10, 64}, {12, 66}, {95, 161}, {123, 55}, {124, 171}, {131, 173}, {138, 188}, {143, 194}, {144, 196}, {174, 173}, {186, 231}, {207, 255}, {212, 259}, {217, 188}, {240, 282}, {241, 284}, {256, 292}, {257, 293}, {294, 311}, },
			{{-1, 39}, {16, 76}, },
			{{-1, 40}, {99, 162}, },
			{{-1, 41}, {102, 163}, },
			{{-1, 42}, {107, 164}, },
			{{-1, 43}, {113, 165}, },
			{{-1, 44}, {118, 166}, },
			{{-1, 45}, {6, 56}, {10, 56}, {12, 56}, {16, 56}, {19, 78}, {49, 127}, {95, 56}, {99, 56}, {102, 56}, {107, 56}, {113, 56}, {118, 56}, {122, 167}, {123, 56}, {124, 56}, {131, 56}, {138, 56}, {143, 56}, {144, 56}, {174, 56}, {186, 56}, {207, 56}, {212, 56}, {217, 56}, {240, 56}, {241, 56}, {256, 56}, {257, 56}, {294, 56}, },
			{{-1, 46}, },
			{{-1, 125}, },
			{{-1, 189}, },
			{{-1, 126}, },
			{{-1, 57}, {123, 169}, {186, 232}, },
			{{-1, 132}, {133, 175}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 95}, },
			{{-1, 99}, },
			{{-1, 102}, },
			{{-1, 107}, },
			{{-1, 113}, },
			{{-1, 118}, },
			{{-1, 122}, },
			{{-1, 49}, },
			{{-1, 5}, },
			{{-1, 50}, },
			{{-1, 58}, {38, 96}, {57, 134}, {62, 139}, {68, 155}, {143, 195}, {144, 197}, {145, 198}, {146, 199}, {161, 214}, {172, 218}, {187, 233}, {194, 239}, {196, 247}, {240, 283}, {241, 285}, {242, 286}, {243, 287}, {255, 291}, {261, 295}, {282, 307}, {284, 308}, {292, 309}, {293, 310}, {311, 316}, },
			{{-1, 150}, {67, 154}, {142, 193}, {151, 206}, {184, 228}, {229, 273}, {276, 305}, },
			{{-1, 51}, {136, 182}, {220, 263}, {264, 263}, {266, 263}, {297, 263}, },
			{{-1, 246}, {197, 248}, {198, 249}, {199, 250}, {239, 281}, {247, 289}, },
			{{-1, 75}, },
			{{-1, 222}, {224, 267}, },
			{{-1, 133}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '%!', 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'sizeof', '(', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: name",
			"expecting: EOF",
			"expecting: 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'sizeof', '(', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: 'sizeof', '(', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: 'static', 'fn', 'var', '[', '&', name, '_'",
			"expecting: name, '_'",
			"expecting: 'sizeof', '(', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: '{'",
			"expecting: 'fn', '[', '&', name",
			"expecting: '(', '[', ':', ';', '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%=', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: '(', ')', '[', ']', '{', ',', ';', '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%=', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%='",
			"expecting: ';'",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?'",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?', '==', '!='",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-'",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>'",
			"expecting: ')', ']', '{', ',', ';', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: ';', '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%=', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: 'static', 'var'",
			"expecting: '%!', 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: ')', ',', ';'",
			"expecting: '%!', 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'sizeof', '(', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: '('",
			"expecting: ':'",
			"expecting: ';', '='",
			"expecting: 'static', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: ')', '&?', '|?'",
			"expecting: ')', ']', '{', ',', ';', '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%=', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: 'static', 'fn', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: 'sizeof', '(', ')', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: 'sizeof', '(', ']', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: 'sizeof', '(', ')', ']', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: ')', ']', ',', ';'",
			"expecting: 'static', 'fn', ')', '[', '&', name, '_'",
			"expecting: '->', '{'",
			"expecting: 'sizeof', '(', '[', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: '}'",
			"expecting: conditional iterative section keyword",
			"expecting: '->', '(', ')', '[', ']', '{', ',', ';', '=', '&?=', '|?=', '+=', '&=', '|=', '^=', '-=', '<<=', '>>=', '<<<=', '>>>=', '*=', '/=', '%=', '&?', '|?', '==', '!=', '<', '<=', '>', '>=', '+', '&', '|', '^', '-', '<<', '>>', '<<<', '>>>', '*', '/', '%'",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: ')', ',', ':'",
			"expecting: ')', ','",
			"expecting: 'static', 'fn', '[', '&', name, '_'",
			"expecting: ')', ',', ';', '='",
			"expecting: 'static', 'fn', 'var', conditional branch section keyword, 'else', 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null', EOF",
			"expecting: 'static', 'var', conditional branch section keyword, 'loop', conditional iterative section keyword, 'do', 'goto', 'exit', 'return', 'continue', 'break', 'sizeof', '(', '}', ';', '&', '-', '*', '!', name, bool value, int value, nat value, char value, 'null'",
			"expecting: ']', ',', ';'",
			"expecting: conditional branch section keyword, '{'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 0, 4, 5, 1, 6, 7, 8, 7, 8, 1, 9, 7, 1, 7, 7, 7, 10, 11, 11, 11, 11, 11, 2, 3, 3, 3, 12, 12, 12, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 11, 11, 11, 7, 3, 22, 0, 23, 11, 24, 20, 14, 25, 26, 27, 27, 28, 27, 8, 29, 8, 29, 14, 26, 9, 9, 11, 11, 11, 9, 30, 31, 31, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 32, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 33, 34, 11, 11, 31, 3, 5, 6, 35, 36, 36, 25, 23, 37, 38, 39, 32, 9, 28, 29, 4, 4, 14, 14, 12, 29, 40, 29, 29, 41, 40, 29, 32, 42, 14, 9, 11, 11, 14, 16, 17, 18, 19, 20, 20, 11, 43, 11, 44, 28, 36, 35, 36, 42, 45, 46, 43, 46, 27, 47, 9, 29, 8, 34, 14, 14, 14, 48, 49, 40, 29, 14, 50, 14, 50, 50, 50, 12, 12, 29, 40, 12, 40, 29, 7, 41, 41, 40, 11, 7, 44, 32, 11, 11, 39, 32, 42, 37, 46, 46, 46, 46, 11, 3, 40, 29, 29, 14, 51, 44, 32, 52, 12, 49, 49, 40, 50, 4, 4, 14, 14, 29, 29, 29, 50, 29, 29, 29, 12, 12, 12, 40, 14, 7, 7, 41, 44, 11, 14, 46, 47, 37, 46, 37, 46, 3, 3, 40, 3, 40, 29, 44, 14, 29, 12, 12, 12, 49, 29, 14, 50, 14, 50, 50, 50, 29, 29, 12, 32, 14, 14, 7, 32, 46, 37, 3, 3, 3, 40, 14, 12, 40, 29, 12, 50, 50, 32, 32, 14, 3, 12, 12, 40, 32, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
