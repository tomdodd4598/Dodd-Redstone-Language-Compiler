Package drlc;

Helpers
	all = [0 .. 127];
	digit = ['0' .. '9'];
	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	
	decimal_integer = (digit | '_')* digit (digit | '_')*;
	binary_digit = '0' | '1';
	binary_integer = ('0b' | '0B') (binary_digit | '_')* binary_digit (binary_digit | '_')*;
	octal_digit = ['0' .. '7'];
	octal_integer = ('0o' | '0O') (octal_digit | '_')* octal_digit (octal_digit | '_')*;
	hexadecimal_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
	hexadecimal_integer = ('0x' | '0X') (hexadecimal_digit | '_')* hexadecimal_digit (hexadecimal_digit | '_')*;
	integer = decimal_integer | binary_integer | octal_integer | hexadecimal_integer;
	
	lf = 10;
	cr = 13;
	eol = lf | cr lf?;
	
	apostrophe = 39;
	quote = 34;
	
	hex_escape = 'x' octal_digit hexadecimal_digit;
	escape_char = '\' ('0' | 't' | 'b' | 'n' | 'r' | 'f' | apostrophe | quote | '\' | hex_escape);
	
	c_char = [all - [apostrophe + ['\' + [lf + cr]]]] | escape_char;
	
	s_char = [all - [quote + ['\' + [lf + cr]]]] | escape_char;
	s_char_sequence = s_char*;
	
	not_eol = [all - [lf + cr]];
	not_star = [all - '*'];
	not_star_slash = [not_star - '/'];
	
	line_comment = '//' not_eol* eol?;
	block_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

Tokens
	directive_prefix = '%!';
	
	/* function_modifier = 'stack'; */
	variable_modifier = 'static';
	
	fn = 'fn';
	var = 'var';
	
	arrow = '->';
	
	conditional_branch_section_keyword = 'if' | 'unless';
	else = 'else';
	
	loop = 'loop';
	conditional_iterative_section_keyword = 'while' | 'until';
	do = 'do';
	
	goto = 'goto';
	
	exit = 'exit';
	return = 'return';
	continue = 'continue';
	break = 'break';
	
	sizeof = 'sizeof';
	
	l_par = '(';
	r_par = ')';
	l_bracket = '[';
	r_bracket = ']';
	l_brace = '{';
	r_brace = '}';
	comma = ',';
	colon = ':';
	semicolon = ';';
	
	equals = '=';
	
	logical_and_equals = '&?=';
	logical_or_equals = '|?=';
	
	plus_equals = '+=';
	and_equals = '&=';
	or_equals = '|=';
	xor_equals = '^=';
	minus_equals = '-=';
	
	left_shift_equals = '<<=';
	right_shift_equals = '>>=';
	left_rotate_equals = '<<<=';
	right_rotate_equals = '>>>=';
	
	multiply_equals = '*=';
	divide_equals = '/=';
	remainder_equals = '%=';
	
	logical_and = '&?';
	logical_or = '|?';
	
	equal_to = '==';
	not_equal_to = '!=';
	
	less_than = '<';
	less_or_equal = '<=';
	more_than = '>';
	more_or_equal = '>=';
	
	plus = '+';
	and = '&';
	or = '|';
	xor = '^';
	minus = '-';
	
	left_shift = '<<';
	right_shift = '>>';
	left_rotate = '<<<';
	right_rotate = '>>>';
	
	multiply = '*';
	divide = '/';
	remainder = '%';
	
	not = '!';
	
	name = letter (digit | letter | '_')*;
	discard = '_';
	
	bool_value = 'false' | 'true';
	int_value = integer 'i'?;
	nat_value = integer 'n';
	char_value = apostrophe c_char apostrophe;
	
	null = 'null';
	
	blank = (' ' | 9 | 11 | eol)+;
	comment = line_comment | block_comment;

Ignored Tokens
	blank,
	comment;

Productions
	unit =
		setup program;
	
	setup =
		directive*;
	
	program =
		program_section*;
	
	
	
	/* UNIT SPECIFICATION */
	
	directive =
		directive_prefix name expression_list? semicolon+;
	
	program_section =
		{function_definition} function_definition |
		{basic_section} basic_section;
	
	basic_section =
		{variable_declaration} variable_declaration |
		{expression_statement} expression_statement |
		{conditional_section} conditional_section |
		{iterative_section} iterative_section |
		{goto_statement} goto_statement |
		{section_label} section_label;
	
	
	
	/* SECTION SPECIFICATIONS */
	
	function_definition =
		/* function_modifier* */ fn name par_parameter_list return_type? l_brace basic_section* stop_statement? r_brace;
	
	variable_declaration =
		{excluding_initialization} variable_modifier* var declarator semicolon+ |
		{including_initialization} variable_modifier* var declarator equals initialization_expression semicolon+;
	
	initialization_expression =
		{basic} expression_rvalue |
		{array} bracket_expression_list |
		{array_fill} l_bracket expression_rvalue array_type_tail r_bracket;
	
	expression_statement =
		{basic} expression_rvalue semicolon+ |
		{assignment} expression_lvalue assignment_op expression_rvalue semicolon+;
	
	conditional_section =
		conditional_branch_section_keyword expression_rvalue l_brace basic_section* stop_statement? r_brace else_section?;
	
	else_section =
		{excluding_branch} else l_brace basic_section* stop_statement? r_brace |
		{including_branch} else conditional_section;
	
	iterative_section =
		{loop} loop l_brace basic_section* stop_statement? r_brace |
		{conditional} conditional_iterative_section_keyword expression_rvalue l_brace basic_section* stop_statement? r_brace |
		{do_conditional} do l_brace basic_section* stop_statement? r_brace conditional_iterative_section_keyword expression_rvalue semicolon+;
	
	goto_statement =
		goto name semicolon+;
	
	section_label =
		name colon;
	
	stop_statement =
		{exit} exit semicolon+ dead_section* |
		{return} return semicolon+ dead_section* |
		{continue} continue semicolon+ dead_section* |
		{break} break semicolon+ dead_section* |
		{exit_expression} exit expression_rvalue semicolon+ dead_section* |
		{return_expression} return expression_rvalue semicolon+ dead_section*;
	
	dead_section =
		{dead0} basic_section |
		{dead1} exit semicolon+ |
		{dead2} return semicolon+ |
		{dead3} continue semicolon+ |
		{dead4} break semicolon+ |
		{dead5} exit expression_rvalue semicolon+ |
		{dead6} return expression_rvalue semicolon+;
	
	
	
	/* COMPONENT SPECIFICATIONS */
	
	type =
		and* raw_type;
	
	raw_type =
		{basic} name |
		{array} l_bracket type array_type_tail r_bracket |
		{function} fn par_parameter_list return_type?;
	
	array_type_tail =
		semicolon expression_rvalue;
	
	return_type =
		arrow type;
	
	par_parameter_list =
		l_par parameter_list? r_par;
	
	parameter_list =
		variable_modifier* parameter parameter_list_tail* comma?;
	
	parameter_list_tail =
		comma variable_modifier* parameter;
	
	parameter =
		{excluding_identifier} type |
		{including_identifier} identifier type_annotation;
	
	declarator =
		identifier type_annotation;
	
	identifier =
		{name} name |
		{discard} discard;
	
	type_annotation =
		colon type;
	
	expression_lvalue =
		expression6;
	
	expression_rvalue =
		expression0;
	
	expression0 =
		{prioritized} expression1 |
		{binary} expression0 logical_binary_op expression1;
	
	expression1 =
		{prioritized} expression2 |
		{binary} expression1 equality_binary_op expression2;
	
	expression2 =
		{prioritized} expression3 |
		{binary} expression2 comparative_binary_op expression3;
	
	expression3 =
		{prioritized} expression4 |
		{binary} expression3 additive_binary_op expression4;
	
	expression4 =
		{prioritized} expression5 |
		{binary} expression4 shift_binary_op expression5;
	
	expression5 =
		{prioritized} expression6 |
		{binary} expression5 multiplicative_binary_op expression6;
	
	expression6 =
		{prioritized} expression7 |
		{unary} unary_op expression6 |
		{dereference} multiply expression6 |
		{address_of} and name;
	
	expression7 =
		{prioritized} expression8 |
		{index} expression7 bracket_expression |
		{function} expression7 par_expression_list;
	
	bracket_expression =
		l_bracket expression_rvalue? r_bracket;
	
	bracket_expression_list =
		l_bracket expression_list? r_bracket;
	
	par_expression_list =
		l_par expression_list? r_par;
	
	expression_list =
		expression_rvalue expression_list_tail* comma?;
	
	expression_list_tail =
		comma expression_rvalue;
	
	expression8 =
		{value} value |
		{variable} name |
		{parentheses} l_par expression0 r_par;
	
	value =
		{bool} bool_value |
		{int} int_value |
		{nat} nat_value |
		{char} char_value |
		{null} null |
		{sizeof} sizeof type;
	
	
	
		/* OPERATION SPECIFICATIONS */
	
	assignment_op =
		{equals} equals |
		{logical_and} logical_and_equals |
		{logical_or} logical_or_equals |
		{plus} plus_equals |
		{and} and_equals |
		{or} or_equals |
		{xor} xor_equals |
		{minus} minus_equals |
		{left_shift} left_shift_equals |
		{right_shift} right_shift_equals |
		{left_rotate} left_rotate_equals |
		{right_rotate} right_rotate_equals |
		{multiply} multiply_equals |
		{divide} divide_equals |
		{remainder} remainder_equals;
	
	logical_binary_op =
		{logical_and} logical_and |
		{logical_or} logical_or;
	
	equality_binary_op =
		{equal_to} equal_to |
		{not_equal_to} not_equal_to;
	
	comparative_binary_op =
		{less_than} less_than |
		{less_or_equal} less_or_equal |
		{more_than} more_than |
		{more_or_equal} more_or_equal;
	
	additive_binary_op =
		{plus} plus |
		{and} and |
		{or} or |
		{xor} xor |
		{minus} minus;
	
	shift_binary_op =
		{left_shift} left_shift |
		{right_shift} right_shift |
		{left_rotate} left_rotate |
		{right_rotate} right_rotate;
	
	multiplicative_binary_op =
		{multiply} multiply |
		{divide} divide |
		{remainder} remainder;
	
	unary_op =
		{minus} minus |
		{not} not;
